//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:4.0.30319.42000
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

namespace AkiraNetwork.VirtualStorageLibrary.Localization {
    using System;
    
    
    /// <summary>
    ///   ローカライズされた文字列などを検索するための、厳密に型指定されたリソース クラスです。
    /// </summary>
    // このクラスは StronglyTypedResourceBuilder クラスが ResGen
    // または Visual Studio のようなツールを使用して自動生成されました。
    // メンバーを追加または削除するには、.ResX ファイルを編集して、/str オプションと共に
    // ResGen を実行し直すか、または VS プロジェクトをビルドし直します。
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   このクラスで使用されているキャッシュされた ResourceManager インスタンスを返します。
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("AkiraNetwork.VirtualStorageLibrary.Localization.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   すべてについて、現在のスレッドの CurrentUICulture プロパティをオーバーライドします
        ///   現在のスレッドの CurrentUICulture プロパティをオーバーライドします。
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   The specified base path is not an absolute path. [{0}] に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string BasePathIsNotAbsolute {
            get {
                return ResourceManager.GetString("BasePathIsNotAbsolute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Node name [{0}] is invalid. Forbidden characters are used. に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string InvalidNodeName {
            get {
                return ResourceManager.GetString("InvalidNodeName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Node [{0}] already exists. Overwriting is not allowed. に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string NodeAlreadyExists {
            get {
                return ResourceManager.GetString("NodeAlreadyExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   The specified node [{0}] is not of type VirtualDirectory. に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string NodeIsNotVirtualDirectory {
            get {
                return ResourceManager.GetString("NodeIsNotVirtualDirectory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   The specified node [{0}] is not of type VirtualItem&lt;{1}&gt;. に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string NodeIsNotVirtualItem {
            get {
                return ResourceManager.GetString("NodeIsNotVirtualItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   The specified node [{0}] is not of type VirtualSymbolicLink. に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string NodeIsNotVirtualSymbolicLink {
            get {
                return ResourceManager.GetString("NodeIsNotVirtualSymbolicLink", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Node not found. [{0}] に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string NodeNotFound {
            get {
                return ResourceManager.GetString("NodeNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   The object specified by the parameter is not of type VirtualPath. に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string ParameterIsNotVirtualPath {
            get {
                return ResourceManager.GetString("ParameterIsNotVirtualPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   This path is not an absolute path. [{0}] に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string PathIsNotAbsolutePath {
            get {
                return ResourceManager.GetString("PathIsNotAbsolutePath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Due to path normalization, it is above the root directory. [{0}] に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string PathNormalizationAboveRoot {
            get {
                return ResourceManager.GetString("PathNormalizationAboveRoot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Prefix cannot be empty. に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string PrefixIsEmpty {
            get {
                return ResourceManager.GetString("PrefixIsEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   The root directory already exists. に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string RootAlreadyExists {
            get {
                return ResourceManager.GetString("RootAlreadyExists", resourceCulture);
            }
        }
    }
}
