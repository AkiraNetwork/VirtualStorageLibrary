{
  "api/AkiraNetwork.VirtualStorageLibrary.ActionNodeDelegate.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.ActionNodeDelegate.html",
    "title": "Delegate ActionNodeDelegate | AkiraNetwork",
    "keywords": "Delegate ActionNodeDelegate A delegate used to perform an action on a specific node during node traversal. Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public delegate bool ActionNodeDelegate(VirtualDirectory parentDirectory, VirtualNodeName nodeName, VirtualPath nodePath) Parameters Type Name Description VirtualDirectory parentDirectory The parent directory of the target node. VirtualNodeName nodeName The name of the target node. VirtualPath nodePath The path of the target node. Returns Type Description bool Returns true to continue node traversal, or false to stop node traversal. Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.IVirtualDeepCloneable-1.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.IVirtualDeepCloneable-1.html",
    "title": "Interface IVirtualDeepCloneable<T> | AkiraNetwork",
    "keywords": "Interface IVirtualDeepCloneable<T> Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public interface IVirtualDeepCloneable<T> Type Parameters Name Description T Methods | Edit this page View Source DeepClone(bool) Declaration T DeepClone(bool recursive = false) Parameters Type Name Description bool recursive Returns Type Description T Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.IVirtualWildcardMatcher.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.IVirtualWildcardMatcher.html",
    "title": "Interface IVirtualWildcardMatcher | AkiraNetwork",
    "keywords": "Interface IVirtualWildcardMatcher Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public interface IVirtualWildcardMatcher Properties | Edit this page View Source Count Declaration int Count { get; } Property Value Type Description int | Edit this page View Source Patterns Declaration IEnumerable<string> Patterns { get; } Property Value Type Description IEnumerable<string> | Edit this page View Source WildcardDictionary Declaration ReadOnlyDictionary<string, string> WildcardDictionary { get; } Property Value Type Description ReadOnlyDictionary<string, string> | Edit this page View Source Wildcards Declaration IEnumerable<string> Wildcards { get; } Property Value Type Description IEnumerable<string> Methods | Edit this page View Source PatternMatcher(string, string) Declaration bool PatternMatcher(string nodeName, string pattern) Parameters Type Name Description string nodeName string pattern Returns Type Description bool Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.NotifyNodeDelegate.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.NotifyNodeDelegate.html",
    "title": "Delegate NotifyNodeDelegate | AkiraNetwork",
    "keywords": "Delegate NotifyNodeDelegate A delegate used to notify the status of a specific node during node traversal. Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public delegate void NotifyNodeDelegate(VirtualPath path, VirtualNode? node) Parameters Type Name Description VirtualPath path The virtual path of the node being notified. VirtualNode node The instance of the node being notified. Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.PatternMatch.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.PatternMatch.html",
    "title": "Delegate PatternMatch | AkiraNetwork",
    "keywords": "Delegate PatternMatch A delegate used to determine if a node name matches a pattern. Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public delegate bool PatternMatch(string nodeName, string pattern) Parameters Type Name Description string nodeName The name of the node to be matched. string pattern The pattern to match against. Returns Type Description bool True if the node name matches the pattern; otherwise, false. Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.html",
    "title": "Class VirtualTextFormatter | AkiraNetwork",
    "keywords": "Class VirtualTextFormatter Inheritance object VirtualTextFormatter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AkiraNetwork.VirtualStorageLibrary.Utilities Assembly: VirtualStorageLibrary.dll Syntax public static class VirtualTextFormatter Methods | Edit this page View Source GenerateLinkTableDebugText<T>(VirtualStorage<T>) Declaration public static string GenerateLinkTableDebugText<T>(this VirtualStorage<T> vs) Parameters Type Name Description VirtualStorage<T> vs Returns Type Description string Type Parameters Name Description T | Edit this page View Source GenerateSingleTableDebugText<T>(T) Declaration public static string GenerateSingleTableDebugText<T>(this T singleObject) Parameters Type Name Description T singleObject Returns Type Description string Type Parameters Name Description T | Edit this page View Source GenerateTableDebugText<T>(IEnumerable<T>) Declaration public static string GenerateTableDebugText<T>(this IEnumerable<T> enumerableObject) Parameters Type Name Description IEnumerable<T> enumerableObject Returns Type Description string Type Parameters Name Description T | Edit this page View Source GenerateTreeDebugText<T>(VirtualStorage<T>, VirtualPath, bool, bool) Declaration public static string GenerateTreeDebugText<T>(this VirtualStorage<T> vs, VirtualPath basePath, bool recursive = true, bool followLinks = false) Parameters Type Name Description VirtualStorage<T> vs VirtualPath basePath bool recursive bool followLinks Returns Type Description string Type Parameters Name Description T"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.Utilities.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.Utilities.html",
    "title": "Namespace AkiraNetwork.VirtualStorageLibrary.Utilities | AkiraNetwork",
    "keywords": "Namespace AkiraNetwork.VirtualStorageLibrary.Utilities Classes VirtualTextFormatter"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualCycleDetector.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualCycleDetector.html",
    "title": "Class VirtualCycleDetector | AkiraNetwork",
    "keywords": "Class VirtualCycleDetector Inheritance object VirtualCycleDetector Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public class VirtualCycleDetector Constructors | Edit this page View Source VirtualCycleDetector() Declaration public VirtualCycleDetector() Properties | Edit this page View Source Count Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source CycleDictionary Declaration public Dictionary<VirtualID, VirtualSymbolicLink> CycleDictionary { get; } Property Value Type Description Dictionary<VirtualID, VirtualSymbolicLink> Methods | Edit this page View Source Clear() Declaration public void Clear() | Edit this page View Source IsNodeInCycle(VirtualSymbolicLink) Declaration public bool IsNodeInCycle(VirtualSymbolicLink link) Parameters Type Name Description VirtualSymbolicLink link Returns Type Description bool Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualDirectory.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualDirectory.html",
    "title": "Class VirtualDirectory | AkiraNetwork",
    "keywords": "Class VirtualDirectory Represents a virtual directory. A virtual directory functions as a container for other nodes. It can contain VirtualItem<T>, VirtualDirectory, and VirtualSymbolicLink, providing a centralized way to manage these entities. This class supports operations such as adding, removing, updating, checking the existence of, and enumerating nodes within the directory. It serves as a fundamental component for efficiently managing the structure of the virtual storage. Additionally, nodes can be enumerated according to the specified display conditions. Inheritance object VirtualNode VirtualDirectory Implements IVirtualDeepCloneable<VirtualNode> IEnumerable<VirtualNode> IEnumerable Inherited Members VirtualNode.Name VirtualNode.CreatedDate VirtualNode.UpdatedDate VirtualNode.VID VirtualNode.IsReferencedInStorage object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public class VirtualDirectory : VirtualNode, IVirtualDeepCloneable<VirtualNode>, IEnumerable<VirtualNode>, IEnumerable Constructors | Edit this page View Source VirtualDirectory() Initializes a new instance of the VirtualDirectory class. The node name is automatically generated by the GenerateNodeName(string) method. Declaration public VirtualDirectory() | Edit this page View Source VirtualDirectory(VirtualNodeName) Initializes a new instance of the VirtualDirectory class with the specified name. Declaration public VirtualDirectory(VirtualNodeName name) Parameters Type Name Description VirtualNodeName name The name of the directory. | Edit this page View Source VirtualDirectory(VirtualNodeName, DateTime, DateTime) Initializes a new instance of the VirtualDirectory class with the specified name, creation date, and update date. Declaration public VirtualDirectory(VirtualNodeName name, DateTime createdDate, DateTime updatedDate) Parameters Type Name Description VirtualNodeName name The name of the directory. DateTime createdDate The creation date. DateTime updatedDate The update date. Properties | Edit this page View Source Count Gets the total number of nodes within the directory. Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source DirectoryCount Gets the number of directories within the directory. Declaration public int DirectoryCount { get; } Property Value Type Description int | Edit this page View Source DirectoryViewCount Gets the number of directories based on the current display conditions. Declaration public int DirectoryViewCount { get; } Property Value Type Description int | Edit this page View Source this[VirtualNodeName] Gets or sets the node with the specified name using the indexer. Declaration public VirtualNode this[VirtualNodeName name] { get; set; } Parameters Type Name Description VirtualNodeName name The name of the node. Property Value Type Description VirtualNode The node with the specified name. Exceptions Type Condition VirtualNodeNotFoundException Thrown if the node is not found. | Edit this page View Source ItemCount Gets the number of items within the directory. Declaration public int ItemCount { get; } Property Value Type Description int | Edit this page View Source ItemViewCount Gets the number of items based on the current display conditions. Declaration public int ItemViewCount { get; } Property Value Type Description int | Edit this page View Source NodeNames Enumerates all node names within the directory. Declaration public IEnumerable<VirtualNodeName> NodeNames { get; } Property Value Type Description IEnumerable<VirtualNodeName> | Edit this page View Source NodeType Gets the type of the node. This class always returns Directory. Declaration public override VirtualNodeType NodeType { get; } Property Value Type Description VirtualNodeType Overrides VirtualNode.NodeType | Edit this page View Source Nodes Enumerates all nodes within the directory. Declaration public IEnumerable<VirtualNode> Nodes { get; } Property Value Type Description IEnumerable<VirtualNode> | Edit this page View Source NodesView Gets a view of nodes based on the current display conditions. Declaration public IEnumerable<VirtualNode> NodesView { get; } Property Value Type Description IEnumerable<VirtualNode> | Edit this page View Source NodesViewCount Gets the number of nodes based on the current display conditions. Declaration public int NodesViewCount { get; } Property Value Type Description int | Edit this page View Source SymbolicLinkCount Gets the number of symbolic links within the directory. Declaration public int SymbolicLinkCount { get; } Property Value Type Description int | Edit this page View Source SymbolicLinkViewCount Gets the number of symbolic links based on the current display conditions. Declaration public int SymbolicLinkViewCount { get; } Property Value Type Description int Methods | Edit this page View Source Add(VirtualNode, bool) Adds a node to the directory. Declaration public VirtualNode Add(VirtualNode node, bool allowOverwrite = false) Parameters Type Name Description VirtualNode node The node to add. bool allowOverwrite If true, allows overwriting an existing node with the same name. Returns Type Description VirtualNode The added node. Exceptions Type Condition ArgumentException Thrown if an invalid node name is specified. InvalidOperationException Thrown if a node with the same name already exists. | Edit this page View Source AddDirectory(VirtualNodeName, bool) Adds a directory with the specified name. Declaration public VirtualDirectory AddDirectory(VirtualNodeName name, bool allowOverwrite = false) Parameters Type Name Description VirtualNodeName name The name of the directory. bool allowOverwrite If true, allows overwriting an existing node with the same name. Returns Type Description VirtualDirectory The added directory. | Edit this page View Source AddItem<T>(VirtualNodeName, T?, bool) Adds an item with the specified name. Declaration public VirtualItem<T> AddItem<T>(VirtualNodeName name, T? itemData = default, bool allowOverwrite = false) Parameters Type Name Description VirtualNodeName name The name of the item. T itemData The data of the item. bool allowOverwrite If true, allows overwriting an existing node with the same name. Returns Type Description VirtualItem<T> The added item. Type Parameters Name Description T The data type of the item. | Edit this page View Source AddSymbolicLink(VirtualNodeName, VirtualPath, bool) Adds a symbolic link with the specified name. Declaration public VirtualSymbolicLink AddSymbolicLink(VirtualNodeName name, VirtualPath targetPath, bool allowOverwrite = false) Parameters Type Name Description VirtualNodeName name The name of the symbolic link. VirtualPath targetPath The target path of the symbolic link. bool allowOverwrite If true, allows overwriting an existing node with the same name. Returns Type Description VirtualSymbolicLink The added symbolic link. | Edit this page View Source DeepClone(bool) Creates a deep clone of the directory. Declaration public override VirtualNode DeepClone(bool recursive = false) Parameters Type Name Description bool recursive If true, all nodes within the directory are recursively cloned. Returns Type Description VirtualNode A deep clone of the directory. Overrides VirtualNode.DeepClone(bool) | Edit this page View Source DirectoryExists(VirtualNodeName) Checks whether a directory with the specified name exists. Declaration public bool DirectoryExists(VirtualNodeName name) Parameters Type Name Description VirtualNodeName name The name of the directory to check. Returns Type Description bool True if the directory exists; otherwise, false. | Edit this page View Source Get(VirtualNodeName, bool) Gets the node with the specified name. Declaration public VirtualNode? Get(VirtualNodeName name, bool exceptionEnabled = true) Parameters Type Name Description VirtualNodeName name The name of the node. bool exceptionEnabled If true, throws an exception if the node is not found. Returns Type Description VirtualNode The node with the specified name, or null if the node does not exist. | Edit this page View Source GetDirectory(VirtualNodeName) Gets the directory with the specified name. Declaration public VirtualDirectory GetDirectory(VirtualNodeName name) Parameters Type Name Description VirtualNodeName name The name of the directory. Returns Type Description VirtualDirectory The directory with the specified name. Exceptions Type Condition VirtualNodeNotFoundException Thrown if the node is not found. InvalidOperationException Thrown if the specified node is not a directory. | Edit this page View Source GetEnumerator() Gets an enumerator for nodes based on the current display conditions. Declaration public IEnumerator<VirtualNode> GetEnumerator() Returns Type Description IEnumerator<VirtualNode> An enumerator for filtered nodes. | Edit this page View Source GetItem<T>(VirtualNodeName) Gets the item with the specified name. Declaration public VirtualItem<T> GetItem<T>(VirtualNodeName name) Parameters Type Name Description VirtualNodeName name The name of the item. Returns Type Description VirtualItem<T> The item with the specified name. Type Parameters Name Description T The data type of the item. Exceptions Type Condition VirtualNodeNotFoundException Thrown if the node is not found. InvalidOperationException Thrown if the specified node is not an item. | Edit this page View Source GetNodesView() Gets a view of nodes based on the current display conditions. Declaration public IEnumerable<VirtualNode> GetNodesView() Returns Type Description IEnumerable<VirtualNode> An enumeration of nodes based on the display conditions. | Edit this page View Source GetSymbolicLink(VirtualNodeName) Gets the symbolic link with the specified name. Declaration public VirtualSymbolicLink GetSymbolicLink(VirtualNodeName name) Parameters Type Name Description VirtualNodeName name The name of the symbolic link. Returns Type Description VirtualSymbolicLink The symbolic link with the specified name. Exceptions Type Condition VirtualNodeNotFoundException Thrown if the node is not found. InvalidOperationException Thrown if the specified node is not a symbolic link. | Edit this page View Source ItemExists(VirtualNodeName) Checks whether an item with the specified name exists. Declaration public bool ItemExists(VirtualNodeName name) Parameters Type Name Description VirtualNodeName name The name of the item to check. Returns Type Description bool True if the item exists; otherwise, false. | Edit this page View Source NodeExists(VirtualNodeName) Checks whether a node with the specified name exists. Declaration public bool NodeExists(VirtualNodeName name) Parameters Type Name Description VirtualNodeName name The name of the node to check. Returns Type Description bool True if the node exists; otherwise, false. | Edit this page View Source Remove(VirtualNode) Removes the specified node from the directory. Declaration public void Remove(VirtualNode node) Parameters Type Name Description VirtualNode node The node to remove. Exceptions Type Condition VirtualNodeNotFoundException Thrown if the node is not found. | Edit this page View Source SymbolicLinkExists(VirtualNodeName) Checks whether a symbolic link with the specified name exists. Declaration public bool SymbolicLinkExists(VirtualNodeName name) Parameters Type Name Description VirtualNodeName name The name of the symbolic link to check. Returns Type Description bool True if the symbolic link exists; otherwise, false. | Edit this page View Source ToString() Returns a string representation of the directory. Declaration public override string ToString() Returns Type Description string A string representation of the directory. Overrides object.ToString() | Edit this page View Source Update(VirtualNode) Updates the current directory with the data from the specified node. Declaration public override void Update(VirtualNode node) Parameters Type Name Description VirtualNode node The node used for the update. Overrides VirtualNode.Update(VirtualNode) Exceptions Type Condition ArgumentException Thrown if the specified node is not a VirtualDirectory. Operators | Edit this page View Source operator +(VirtualDirectory, VirtualNode) Overloads the addition operator to add a node to the directory. Declaration public static VirtualDirectory operator +(VirtualDirectory directory, VirtualNode node) Parameters Type Name Description VirtualDirectory directory The directory to which the node is added. VirtualNode node The node to add. Returns Type Description VirtualDirectory The directory with the added node. | Edit this page View Source implicit operator VirtualDirectory(VirtualNodeName) Performs an implicit conversion from VirtualNodeName to VirtualDirectory. Declaration public static implicit operator VirtualDirectory(VirtualNodeName nodeName) Parameters Type Name Description VirtualNodeName nodeName The node name to convert. Returns Type Description VirtualDirectory | Edit this page View Source operator -(VirtualDirectory, VirtualNode) Overloads the subtraction operator to remove a node from the directory. Declaration public static VirtualDirectory operator -(VirtualDirectory directory, VirtualNode node) Parameters Type Name Description VirtualDirectory directory The directory from which the node is removed. VirtualNode node The node to remove. Returns Type Description VirtualDirectory The directory with the removed node. Implements IVirtualDeepCloneable<T> IEnumerable<T> IEnumerable Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T) VirtualNodeExtensions.ResolveNodeType(VirtualNode) VirtualTextFormatter.GenerateTableDebugText<T>(IEnumerable<T>) VirtualStorageExtensions.ApplySortConditions<T>(IEnumerable<T>, List<VirtualSortCondition<T>>?) VirtualStorageExtensions.GroupAndSort<T>(IEnumerable<T>, VirtualGroupCondition<T, object>?, List<VirtualSortCondition<T>>?)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualDirectoryAdapter-1.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualDirectoryAdapter-1.html",
    "title": "Class VirtualDirectoryAdapter<T> | AkiraNetwork",
    "keywords": "Class VirtualDirectoryAdapter<T> Inheritance object VirtualDirectoryAdapter<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public class VirtualDirectoryAdapter<T> Type Parameters Name Description T Constructors | Edit this page View Source VirtualDirectoryAdapter(VirtualStorage<T>) Declaration public VirtualDirectoryAdapter(VirtualStorage<T> storage) Parameters Type Name Description VirtualStorage<T> storage Properties | Edit this page View Source this[VirtualPath, bool] Declaration public VirtualDirectory this[VirtualPath path, bool followLinks = true] { get; set; } Parameters Type Name Description VirtualPath path bool followLinks Property Value Type Description VirtualDirectory Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualException.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualException.html",
    "title": "Class VirtualException | AkiraNetwork",
    "keywords": "Class VirtualException The base class for exceptions that occur within the virtual storage library. Inheritance object Exception VirtualException VirtualNodeNotFoundException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public abstract class VirtualException : Exception, ISerializable Constructors | Edit this page View Source VirtualException() Initializes a new instance of the VirtualException class. Declaration public VirtualException() | Edit this page View Source VirtualException(string) Initializes a new instance of the VirtualException class with a specified error message. Declaration public VirtualException(string message) Parameters Type Name Description string message The error message. | Edit this page View Source VirtualException(string, Exception) Initializes a new instance of the VirtualException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public VirtualException(string message, Exception innerException) Parameters Type Name Description string message The error message. Exception innerException The exception that is the cause of this exception. Implements ISerializable Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualGroupCondition-2.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualGroupCondition-2.html",
    "title": "Class VirtualGroupCondition<T, TKey> | AkiraNetwork",
    "keywords": "Class VirtualGroupCondition<T, TKey> Represents the conditions for grouping data, holding the property to group by and the order (ascending or descending). Inheritance object VirtualGroupCondition<T, TKey> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public class VirtualGroupCondition<T, TKey> Type Parameters Name Description T The type of the entity to be grouped. TKey The type of the key used for grouping. Constructors | Edit this page View Source VirtualGroupCondition(Expression<Func<T, TKey>>, bool) Initializes a new instance of the VirtualGroupCondition<T, TKey> class with the specified grouping property and order. Declaration public VirtualGroupCondition(Expression<Func<T, TKey>> groupBy, bool ascending = true) Parameters Type Name Description Expression<Func<T, TKey>> groupBy The property to group by. bool ascending A value indicating whether the grouping order is ascending. Properties | Edit this page View Source Ascending Gets or sets a value indicating whether the grouping order is ascending. True if the order is ascending; otherwise, false. Declaration public bool Ascending { get; set; } Property Value Type Description bool A boolean value indicating whether the grouping order is ascending. | Edit this page View Source GroupBy Gets or sets the property used for grouping. Declaration public Expression<Func<T, TKey>> GroupBy { get; set; } Property Value Type Description Expression<Func<T, TKey>> An expression that specifies the property to use for grouping. Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualID.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualID.html",
    "title": "Struct VirtualID | AkiraNetwork",
    "keywords": "Struct VirtualID A structure representing a unique identifier within the virtual storage library. This identifier is based on a randomly generated UUID version 4 (UUIDv4). UUIDv4 is a 128-bit value that ensures high uniqueness and has strong cryptographic properties. Implements IEquatable<VirtualID> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public readonly record struct VirtualID : IEquatable<VirtualID> Constructors | Edit this page View Source VirtualID() Initializes a new instance of the VirtualID structure, generating a unique identifier. Declaration public VirtualID() Properties | Edit this page View Source ID Gets the unique identifier. Declaration public Guid ID { get; } Property Value Type Description Guid A Guid value representing the unique identifier. Methods | Edit this page View Source ToString() Returns a string representation of this instance's unique identifier. Declaration public override string ToString() Returns Type Description string A string that represents the unique identifier. Overrides ValueType.ToString() Implements IEquatable<T> Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualItem-1.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualItem-1.html",
    "title": "Class VirtualItem<T> | AkiraNetwork",
    "keywords": "Class VirtualItem<T> Represents a virtual item. A virtual item is an object used to manage item data within the virtual storage. It holds item data based on the user-defined type T, facilitating the management and manipulation of various types of content. Virtual items ensure that the actual data is distinctly present. If the user-defined type T implements the IVirtualDeepCloneable<T> interface, a deep clone of the item data is created, ensuring separate instances. If this interface is not implemented, shallow copies may result in multiple virtual items referencing the same instance of the item data. Inheritance object VirtualNode VirtualItem VirtualItem<T> Implements IVirtualDeepCloneable<VirtualNode> IDisposable Inherited Members VirtualNode.Name VirtualNode.CreatedDate VirtualNode.UpdatedDate VirtualNode.VID VirtualNode.IsReferencedInStorage object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public class VirtualItem<T> : VirtualItem, IVirtualDeepCloneable<VirtualNode>, IDisposable Type Parameters Name Description T The user-defined type that can be freely specified by the user of this library. Constructors | Edit this page View Source VirtualItem() Initializes a new instance of the VirtualItem<T> class. The node name is automatically generated by the GenerateNodeName(string) method. Declaration public VirtualItem() | Edit this page View Source VirtualItem(VirtualNodeName) Initializes a new instance of the VirtualItem<T> class. Declaration public VirtualItem(VirtualNodeName name) Parameters Type Name Description VirtualNodeName name The name of the item. | Edit this page View Source VirtualItem(VirtualNodeName, T?) Initializes a new instance of the VirtualItem<T> class. Declaration public VirtualItem(VirtualNodeName name, T? itemData) Parameters Type Name Description VirtualNodeName name The name of the item. T itemData The data associated with this item. It is user-defined and can hold any type of data. | Edit this page View Source VirtualItem(VirtualNodeName, T?, DateTime) Initializes a new instance of the VirtualItem<T> class. Declaration public VirtualItem(VirtualNodeName name, T? itemData, DateTime createdDate) Parameters Type Name Description VirtualNodeName name The name of the item. T itemData The data associated with this item. It is user-defined and can hold any type of data. DateTime createdDate The creation date of the item. | Edit this page View Source VirtualItem(VirtualNodeName, T?, DateTime, DateTime) Initializes a new instance of the VirtualItem<T> class. Declaration public VirtualItem(VirtualNodeName name, T? itemData, DateTime createdDate, DateTime updatedDate) Parameters Type Name Description VirtualNodeName name The name of the item. T itemData The data associated with this item. It is user-defined and can hold any type of data. DateTime createdDate The creation date of the item. DateTime updatedDate The last update date of the item. Properties | Edit this page View Source ItemData Gets or sets the data associated with this item. This value can be null. Declaration public T? ItemData { get; set; } Property Value Type Description T | Edit this page View Source NodeType Gets the type of the node. Declaration public override VirtualNodeType NodeType { get; } Property Value Type Description VirtualNodeType Overrides VirtualNode.NodeType Methods | Edit this page View Source DeepClone(bool) Creates a deep clone of this item. Declaration public override VirtualNode DeepClone(bool recursive = false) Parameters Type Name Description bool recursive If true, perform a deep clone recursively. Returns Type Description VirtualNode A deep clone of the current item as a VirtualNode. Overrides VirtualItem.DeepClone(bool) | Edit this page View Source Dispose() Releases the resources used by the VirtualItem<T>. Declaration public void Dispose() | Edit this page View Source Dispose(bool) Releases the unmanaged resources used by the VirtualItem<T> and optionally releases the managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. | Edit this page View Source ~VirtualItem() Finalizer for the VirtualItem<T> class. Declaration protected ~VirtualItem() | Edit this page View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString() | Edit this page View Source Update(VirtualNode) Updates the current item with the specified node's data. Declaration public override void Update(VirtualNode node) Parameters Type Name Description VirtualNode node The node containing the data to update. Overrides VirtualNode.Update(VirtualNode) Exceptions Type Condition ArgumentException Thrown if the specified node is not of the same type as the current item. Operators | Edit this page View Source implicit operator VirtualItem<T>(VirtualNodeName) Implicitly converts the specified node name to a VirtualItem<T>. Declaration public static implicit operator VirtualItem<T>(VirtualNodeName name) Parameters Type Name Description VirtualNodeName name The name of the node. Returns Type Description VirtualItem<T> A VirtualItem<T> initialized with the specified node name. | Edit this page View Source implicit operator VirtualItem<T>((VirtualNodeName nodeName, T? itemData)) Converts a tuple (nodeName, itemData) to a VirtualItem<T>. Declaration public static implicit operator VirtualItem<T>((VirtualNodeName nodeName, T? itemData) tuple) Parameters Type Name Description (VirtualNodeName nodeName, T itemData) tuple A tuple containing the node name and item data. Returns Type Description VirtualItem<T> A VirtualItem<T> initialized with the specified values. | Edit this page View Source implicit operator VirtualItem<T>(T?) Implicitly converts the specified data of type T to a VirtualItem<T>. The node name is automatically generated by the GenerateNodeName(string) method. Declaration public static implicit operator VirtualItem<T>(T? itemData) Parameters Type Name Description T itemData The data associated with this item. It is user-defined and can hold any type of data. Returns Type Description VirtualItem<T> A VirtualItem<T> initialized with the specified data. Implements IVirtualDeepCloneable<T> IDisposable Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T) VirtualNodeExtensions.ResolveNodeType(VirtualNode)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualItem.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualItem.html",
    "title": "Class VirtualItem | AkiraNetwork",
    "keywords": "Class VirtualItem Represents a virtual item. This class serves as the base class for the VirtualItem<T> type and is used solely for type checking of VirtualItem. Inheritance object VirtualNode VirtualItem VirtualItem<T> Implements IVirtualDeepCloneable<VirtualNode> Inherited Members VirtualNode.Name VirtualNode.CreatedDate VirtualNode.UpdatedDate VirtualNode.NodeType VirtualNode.VID VirtualNode.Update(VirtualNode) VirtualNode.IsReferencedInStorage object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public abstract class VirtualItem : VirtualNode, IVirtualDeepCloneable<VirtualNode> Constructors | Edit this page View Source VirtualItem(VirtualNodeName) Initializes a new instance of the VirtualItem class. Declaration protected VirtualItem(VirtualNodeName name) Parameters Type Name Description VirtualNodeName name The name of the item. | Edit this page View Source VirtualItem(VirtualNodeName, DateTime) Initializes a new instance of the VirtualItem class. Declaration protected VirtualItem(VirtualNodeName name, DateTime createdDate) Parameters Type Name Description VirtualNodeName name The name of the item. DateTime createdDate The creation date of the item. | Edit this page View Source VirtualItem(VirtualNodeName, DateTime, DateTime) Initializes a new instance of the VirtualItem class. Declaration protected VirtualItem(VirtualNodeName name, DateTime createdDate, DateTime updatedDate) Parameters Type Name Description VirtualNodeName name The name of the item. DateTime createdDate The creation date of the item. DateTime updatedDate The last update date of the item. Methods | Edit this page View Source DeepClone(bool) Creates a deep clone of this item. If the data of type T held by the item implements the IVirtualDeepCloneable<T> interface, the DeepClone method of the data type is called. Declaration public override abstract VirtualNode DeepClone(bool recursive = false) Parameters Type Name Description bool recursive In the case of items, this parameter is ignored. Returns Type Description VirtualNode A deep clone of the current item as a VirtualNode. Overrides VirtualNode.DeepClone(bool) Implements IVirtualDeepCloneable<T> Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T) VirtualNodeExtensions.ResolveNodeType(VirtualNode)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualItemAdapter-1.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualItemAdapter-1.html",
    "title": "Class VirtualItemAdapter<T> | AkiraNetwork",
    "keywords": "Class VirtualItemAdapter<T> Inheritance object VirtualItemAdapter<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public class VirtualItemAdapter<T> Type Parameters Name Description T Constructors | Edit this page View Source VirtualItemAdapter(VirtualStorage<T>) Declaration public VirtualItemAdapter(VirtualStorage<T> storage) Parameters Type Name Description VirtualStorage<T> storage Properties | Edit this page View Source this[VirtualPath, bool] Declaration public VirtualItem<T> this[VirtualPath path, bool followLinks = true] { get; set; } Parameters Type Name Description VirtualPath path bool followLinks Property Value Type Description VirtualItem<T> Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualNode.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualNode.html",
    "title": "Class VirtualNode | AkiraNetwork",
    "keywords": "Class VirtualNode Represents an abstract class for nodes. Inheritance object VirtualNode VirtualDirectory VirtualItem VirtualSymbolicLink Implements IVirtualDeepCloneable<VirtualNode> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public abstract class VirtualNode : IVirtualDeepCloneable<VirtualNode> Constructors | Edit this page View Source VirtualNode(VirtualNodeName) Initializes a new instance of the VirtualNode class. Declaration protected VirtualNode(VirtualNodeName name) Parameters Type Name Description VirtualNodeName name The name of node. | Edit this page View Source VirtualNode(VirtualNodeName, DateTime) Initializes a new instance of the VirtualNode class. Declaration protected VirtualNode(VirtualNodeName name, DateTime createdDate) Parameters Type Name Description VirtualNodeName name The name of node. DateTime createdDate The created date of node. | Edit this page View Source VirtualNode(VirtualNodeName, DateTime, DateTime) Initializes a new instance of the VirtualNode class. Declaration protected VirtualNode(VirtualNodeName name, DateTime createdDate, DateTime updatedDate) Parameters Type Name Description VirtualNodeName name The name of node. DateTime createdDate The created date of node. DateTime updatedDate The updated date of node. Properties | Edit this page View Source CreatedDate Gets the created date of the node. This date represents when the node was first created. Declaration public DateTime CreatedDate { get; } Property Value Type Description DateTime | Edit this page View Source IsReferencedInStorage Gets a value indicating whether referenced in storage. If this property is true, the node is referenced from storage. Otherwise, it is not. Declaration public bool IsReferencedInStorage { get; } Property Value Type Description bool | Edit this page View Source Name Gets the name of node. Declaration public VirtualNodeName Name { get; } Property Value Type Description VirtualNodeName | Edit this page View Source NodeType Gets the node type of node. Declaration public abstract VirtualNodeType NodeType { get; } Property Value Type Description VirtualNodeType | Edit this page View Source UpdatedDate Gets the updated date of the node. This date represents the last time the node was modified. It is set to the current date and time at the moment of instantiation or cloning. Declaration public DateTime UpdatedDate { get; } Property Value Type Description DateTime | Edit this page View Source VID Gets the VID of node. Declaration public VirtualID VID { get; } Property Value Type Description VirtualID Methods | Edit this page View Source DeepClone(bool) Creates a deep clone of the entity. However, the CreatedDate and UpdatedDate should not be cloned as they are set to the current date and time at the time of cloning. Declaration public abstract VirtualNode DeepClone(bool recursive = false) Parameters Type Name Description bool recursive When true, all child nodes are also cloned, creating a deep copy of the entire tree. The default is false. The CreatedDate and UpdatedDate properties are not preserved. They are set to the current date and time at the moment of instantiation or cloning. Returns Type Description VirtualNode Cloned VirtualNode instance | Edit this page View Source Update(VirtualNode) Updates the VirtualNode. Declaration public abstract void Update(VirtualNode node) Parameters Type Name Description VirtualNode node Value to update Implements IVirtualDeepCloneable<T> Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T) VirtualNodeExtensions.ResolveNodeType(VirtualNode)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualNodeContext.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualNodeContext.html",
    "title": "Class VirtualNodeContext | AkiraNetwork",
    "keywords": "Class VirtualNodeContext Inheritance object VirtualNodeContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public class VirtualNodeContext Constructors | Edit this page View Source VirtualNodeContext(VirtualNode?, VirtualPath, VirtualDirectory?, int, int, VirtualPath?, bool, VirtualSymbolicLink?) Declaration public VirtualNodeContext(VirtualNode? node, VirtualPath traversalPath, VirtualDirectory? parentNode = null, int depth = 0, int index = 0, VirtualPath? resolvedPath = null, bool resolved = false, VirtualSymbolicLink? resolvedLink = null) Parameters Type Name Description VirtualNode node VirtualPath traversalPath VirtualDirectory parentNode int depth int index VirtualPath resolvedPath bool resolved VirtualSymbolicLink resolvedLink Properties | Edit this page View Source Depth Declaration public int Depth { get; set; } Property Value Type Description int | Edit this page View Source Index Declaration public int Index { get; set; } Property Value Type Description int | Edit this page View Source Node Declaration public VirtualNode? Node { get; set; } Property Value Type Description VirtualNode | Edit this page View Source ParentDirectory Declaration public VirtualDirectory? ParentDirectory { get; set; } Property Value Type Description VirtualDirectory | Edit this page View Source Resolved Declaration public bool Resolved { get; set; } Property Value Type Description bool | Edit this page View Source ResolvedLink Declaration public VirtualSymbolicLink? ResolvedLink { get; set; } Property Value Type Description VirtualSymbolicLink | Edit this page View Source ResolvedPath Declaration public VirtualPath? ResolvedPath { get; set; } Property Value Type Description VirtualPath | Edit this page View Source TraversalPath Declaration public VirtualPath TraversalPath { get; set; } Property Value Type Description VirtualPath Methods | Edit this page View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString() Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualNodeExtensions.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualNodeExtensions.html",
    "title": "Class VirtualNodeExtensions | AkiraNetwork",
    "keywords": "Class VirtualNodeExtensions Provides extension methods for operations on virtual nodes in the Virtual Storage Library. Inheritance object VirtualNodeExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public static class VirtualNodeExtensions Methods | Edit this page View Source ResolveNodeType(VirtualNode) Resolves the type of the specified virtual node. If the node is a symbolic link, returns the type of the target node. Otherwise, returns the type of the node itself. Declaration public static VirtualNodeType ResolveNodeType(this VirtualNode node) Parameters Type Name Description VirtualNode node The virtual node to resolve the type for. Returns Type Description VirtualNodeType The type of the node or, if the node is a symbolic link, the type of the target node."
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualNodeListConditions.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualNodeListConditions.html",
    "title": "Struct VirtualNodeListConditions | AkiraNetwork",
    "keywords": "Struct VirtualNodeListConditions Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public struct VirtualNodeListConditions Constructors | Edit this page View Source VirtualNodeListConditions() Declaration public VirtualNodeListConditions() | Edit this page View Source VirtualNodeListConditions(VirtualNodeTypeFilter, VirtualGroupCondition<VirtualNode, object>?, List<VirtualSortCondition<VirtualNode>>?) Declaration public VirtualNodeListConditions(VirtualNodeTypeFilter filter, VirtualGroupCondition<VirtualNode, object>? groupCondition, List<VirtualSortCondition<VirtualNode>>? sortConditions) Parameters Type Name Description VirtualNodeTypeFilter filter VirtualGroupCondition<VirtualNode, object> groupCondition List<VirtualSortCondition<VirtualNode>> sortConditions Properties | Edit this page View Source Filter Declaration public VirtualNodeTypeFilter Filter { readonly get; set; } Property Value Type Description VirtualNodeTypeFilter | Edit this page View Source GroupCondition Declaration public VirtualGroupCondition<VirtualNode, object>? GroupCondition { readonly get; set; } Property Value Type Description VirtualGroupCondition<VirtualNode, object> | Edit this page View Source SortConditions Declaration public List<VirtualSortCondition<VirtualNode>>? SortConditions { readonly get; set; } Property Value Type Description List<VirtualSortCondition<VirtualNode>> Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualNodeName.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualNodeName.html",
    "title": "Class VirtualNodeName | AkiraNetwork",
    "keywords": "Class VirtualNodeName Inheritance object VirtualNodeName Implements IEquatable<VirtualNodeName> IComparable<VirtualNodeName> IComparable Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public class VirtualNodeName : IEquatable<VirtualNodeName>, IComparable<VirtualNodeName>, IComparable Constructors | Edit this page View Source VirtualNodeName(string) Declaration public VirtualNodeName(string name) Parameters Type Name Description string name Properties | Edit this page View Source IsRoot Declaration public bool IsRoot { get; } Property Value Type Description bool | Edit this page View Source Name Declaration public string Name { get; } Property Value Type Description string Methods | Edit this page View Source CompareTo(VirtualNodeName?) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(VirtualNodeName? other) Parameters Type Name Description VirtualNodeName other An object to compare with this instance. Returns Type Description int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. | Edit this page View Source CompareTo(object?) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(object? obj) Parameters Type Name Description object obj An object to compare with this instance. Returns Type Description int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes obj in the sort order. Zero This instance occurs in the same position in the sort order as obj. Greater than zero This instance follows obj in the sort order. Exceptions Type Condition ArgumentException obj is not the same type as this instance. | Edit this page View Source Equals(VirtualNodeName?) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(VirtualNodeName? other) Parameters Type Name Description VirtualNodeName other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides object.Equals(object) | Edit this page View Source GenerateNodeName(string) Declaration public static VirtualNodeName GenerateNodeName(string prefix) Parameters Type Name Description string prefix Returns Type Description VirtualNodeName | Edit this page View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description int A hash code for the current object. Overrides object.GetHashCode() | Edit this page View Source IsValidNodeName(VirtualNodeName) Declaration public static bool IsValidNodeName(VirtualNodeName nodeName) Parameters Type Name Description VirtualNodeName nodeName Returns Type Description bool | Edit this page View Source ResetCounter() Declaration public static void ResetCounter() | Edit this page View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString() Operators | Edit this page View Source operator ==(VirtualNodeName?, VirtualNodeName?) Declaration public static bool operator ==(VirtualNodeName? left, VirtualNodeName? right) Parameters Type Name Description VirtualNodeName left VirtualNodeName right Returns Type Description bool | Edit this page View Source implicit operator string(VirtualNodeName) Declaration public static implicit operator string(VirtualNodeName nodeName) Parameters Type Name Description VirtualNodeName nodeName Returns Type Description string | Edit this page View Source implicit operator VirtualNodeName(string) Declaration public static implicit operator VirtualNodeName(string name) Parameters Type Name Description string name Returns Type Description VirtualNodeName | Edit this page View Source operator !=(VirtualNodeName?, VirtualNodeName?) Declaration public static bool operator !=(VirtualNodeName? left, VirtualNodeName? right) Parameters Type Name Description VirtualNodeName left VirtualNodeName right Returns Type Description bool Implements IEquatable<T> IComparable<T> IComparable Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualNodeNotFoundException.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualNodeNotFoundException.html",
    "title": "Class VirtualNodeNotFoundException | AkiraNetwork",
    "keywords": "Class VirtualNodeNotFoundException The exception that is thrown when a node is not found in the virtual storage. Inheritance object Exception VirtualException VirtualNodeNotFoundException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public class VirtualNodeNotFoundException : VirtualException, ISerializable Constructors | Edit this page View Source VirtualNodeNotFoundException() Initializes a new instance of the VirtualNodeNotFoundException class. Declaration public VirtualNodeNotFoundException() | Edit this page View Source VirtualNodeNotFoundException(string) Initializes a new instance of the VirtualNodeNotFoundException class with a specified error message. Declaration public VirtualNodeNotFoundException(string message) Parameters Type Name Description string message The error message. | Edit this page View Source VirtualNodeNotFoundException(string, Exception) Initializes a new instance of the VirtualNodeNotFoundException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public VirtualNodeNotFoundException(string message, Exception innerException) Parameters Type Name Description string message The error message. Exception innerException The exception that is the cause of this exception. Implements ISerializable Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualNodeType.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualNodeType.html",
    "title": "Enum VirtualNodeType | AkiraNetwork",
    "keywords": "Enum VirtualNodeType Specifies the types of virtual nodes. Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public enum VirtualNodeType Fields Name Description Directory Represents a directory node. Item Represents an item node with a user-defined type T. None Represents an unspecified or unknown node type. SymbolicLink Represents a symbolic link node. Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<VirtualNodeType>(VirtualNodeType)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter.html",
    "title": "Enum VirtualNodeTypeFilter | AkiraNetwork",
    "keywords": "Enum VirtualNodeTypeFilter Specifies the filters for virtual node types. Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public enum VirtualNodeTypeFilter Fields Name Description All Filter for all node types. Directory Filter for directory nodes. Item Filter for item nodes with a user-defined type T. None No specific node type is specified. SymbolicLink Filter for symbolic link nodes. Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<VirtualNodeTypeFilter>(VirtualNodeTypeFilter)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualPath.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualPath.html",
    "title": "Class VirtualPath | AkiraNetwork",
    "keywords": "Class VirtualPath Inheritance object VirtualPath Implements IEquatable<VirtualPath> IComparable<VirtualPath> IComparable Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public class VirtualPath : IEquatable<VirtualPath>, IComparable<VirtualPath>, IComparable Constructors | Edit this page View Source VirtualPath(IEnumerable<VirtualNodeName>) Declaration public VirtualPath(IEnumerable<VirtualNodeName> parts) Parameters Type Name Description IEnumerable<VirtualNodeName> parts | Edit this page View Source VirtualPath(string) Declaration public VirtualPath(string path) Parameters Type Name Description string path Properties | Edit this page View Source BaseDepth Declaration public int BaseDepth { get; } Property Value Type Description int | Edit this page View Source Depth Declaration public int Depth { get; } Property Value Type Description int | Edit this page View Source DirectoryPath Declaration public VirtualPath DirectoryPath { get; } Property Value Type Description VirtualPath | Edit this page View Source Dot Declaration public static string Dot { get; } Property Value Type Description string | Edit this page View Source DotDot Declaration public static string DotDot { get; } Property Value Type Description string | Edit this page View Source FixedPath Declaration public VirtualPath FixedPath { get; } Property Value Type Description VirtualPath | Edit this page View Source IsAbsolute Declaration public bool IsAbsolute { get; } Property Value Type Description bool | Edit this page View Source IsDot Declaration public bool IsDot { get; } Property Value Type Description bool | Edit this page View Source IsDotDot Declaration public bool IsDotDot { get; } Property Value Type Description bool | Edit this page View Source IsEmpty Declaration public bool IsEmpty { get; } Property Value Type Description bool | Edit this page View Source IsEndsWithSlash Declaration public bool IsEndsWithSlash { get; } Property Value Type Description bool | Edit this page View Source IsRoot Declaration public bool IsRoot { get; } Property Value Type Description bool | Edit this page View Source NodeName Declaration public VirtualNodeName NodeName { get; } Property Value Type Description VirtualNodeName | Edit this page View Source PartsList Declaration public List<VirtualNodeName> PartsList { get; } Property Value Type Description List<VirtualNodeName> | Edit this page View Source Path Declaration public string Path { get; } Property Value Type Description string | Edit this page View Source Root Declaration public static string Root { get; } Property Value Type Description string | Edit this page View Source Separator Declaration public static char Separator { get; } Property Value Type Description char Methods | Edit this page View Source AddEndSlash() Declaration public VirtualPath AddEndSlash() Returns Type Description VirtualPath | Edit this page View Source AddStartSlash() Declaration public VirtualPath AddStartSlash() Returns Type Description VirtualPath | Edit this page View Source ArePathsSubdirectories(VirtualPath, VirtualPath) Declaration public static bool ArePathsSubdirectories(VirtualPath path1, VirtualPath path2) Parameters Type Name Description VirtualPath path1 VirtualPath path2 Returns Type Description bool | Edit this page View Source Combine(params VirtualPath[]) Declaration public VirtualPath Combine(params VirtualPath[] paths) Parameters Type Name Description VirtualPath[] paths Returns Type Description VirtualPath | Edit this page View Source Combine(params string[]) Declaration public static string Combine(params string[] paths) Parameters Type Name Description string[] paths Returns Type Description string | Edit this page View Source CombineFromIndex(VirtualPath, int) Declaration public VirtualPath CombineFromIndex(VirtualPath path, int index) Parameters Type Name Description VirtualPath path int index Returns Type Description VirtualPath | Edit this page View Source CompareTo(VirtualPath?) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(VirtualPath? other) Parameters Type Name Description VirtualPath other An object to compare with this instance. Returns Type Description int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. | Edit this page View Source CompareTo(object?) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(object? obj) Parameters Type Name Description object obj An object to compare with this instance. Returns Type Description int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes obj in the sort order. Zero This instance occurs in the same position in the sort order as obj. Greater than zero This instance follows obj in the sort order. Exceptions Type Condition ArgumentException obj is not the same type as this instance. | Edit this page View Source Equals(VirtualPath?) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(VirtualPath? other) Parameters Type Name Description VirtualPath other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides object.Equals(object) | Edit this page View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description int A hash code for the current object. Overrides object.GetHashCode() | Edit this page View Source GetNodeName() Declaration public VirtualNodeName GetNodeName() Returns Type Description VirtualNodeName | Edit this page View Source GetParentPath() Declaration public VirtualPath GetParentPath() Returns Type Description VirtualPath | Edit this page View Source GetPartsLinkedList() Declaration public LinkedList<VirtualNodeName> GetPartsLinkedList() Returns Type Description LinkedList<VirtualNodeName> | Edit this page View Source GetPartsList() Declaration public List<VirtualNodeName> GetPartsList() Returns Type Description List<VirtualNodeName> | Edit this page View Source GetRelativePath(VirtualPath) Declaration public VirtualPath GetRelativePath(VirtualPath basePath) Parameters Type Name Description VirtualPath basePath Returns Type Description VirtualPath | Edit this page View Source IsSubdirectory(VirtualPath) Declaration public bool IsSubdirectory(VirtualPath parentPath) Parameters Type Name Description VirtualPath parentPath Returns Type Description bool | Edit this page View Source NormalizePath() Declaration public VirtualPath NormalizePath() Returns Type Description VirtualPath | Edit this page View Source NormalizePath(string) Declaration public static string NormalizePath(string path) Parameters Type Name Description string path Returns Type Description string | Edit this page View Source StartsWith(VirtualPath) Declaration public bool StartsWith(VirtualPath path) Parameters Type Name Description VirtualPath path Returns Type Description bool | Edit this page View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString() | Edit this page View Source TrimEndSlash() Declaration public VirtualPath TrimEndSlash() Returns Type Description VirtualPath Operators | Edit this page View Source operator +(VirtualPath, VirtualNodeName) Declaration public static VirtualPath operator +(VirtualPath path, VirtualNodeName nodeName) Parameters Type Name Description VirtualPath path VirtualNodeName nodeName Returns Type Description VirtualPath | Edit this page View Source operator +(VirtualPath, VirtualPath) Declaration public static VirtualPath operator +(VirtualPath path1, VirtualPath path2) Parameters Type Name Description VirtualPath path1 VirtualPath path2 Returns Type Description VirtualPath | Edit this page View Source operator +(VirtualPath, char) Declaration public static VirtualPath operator +(VirtualPath path, char chr) Parameters Type Name Description VirtualPath path char chr Returns Type Description VirtualPath | Edit this page View Source operator +(VirtualPath, string) Declaration public static VirtualPath operator +(VirtualPath path, string str) Parameters Type Name Description VirtualPath path string str Returns Type Description VirtualPath | Edit this page View Source operator +(char, VirtualPath) Declaration public static VirtualPath operator +(char chr, VirtualPath path) Parameters Type Name Description char chr VirtualPath path Returns Type Description VirtualPath | Edit this page View Source operator +(string, VirtualPath) Declaration public static VirtualPath operator +(string str, VirtualPath path) Parameters Type Name Description string str VirtualPath path Returns Type Description VirtualPath | Edit this page View Source operator ==(VirtualPath?, VirtualPath?) Declaration public static bool operator ==(VirtualPath? left, VirtualPath? right) Parameters Type Name Description VirtualPath left VirtualPath right Returns Type Description bool | Edit this page View Source implicit operator string(VirtualPath?) Declaration public static implicit operator string(VirtualPath? virtualPath) Parameters Type Name Description VirtualPath virtualPath Returns Type Description string | Edit this page View Source implicit operator VirtualPath(string) Declaration public static implicit operator VirtualPath(string path) Parameters Type Name Description string path Returns Type Description VirtualPath | Edit this page View Source operator !=(VirtualPath?, VirtualPath?) Declaration public static bool operator !=(VirtualPath? left, VirtualPath? right) Parameters Type Name Description VirtualPath left VirtualPath right Returns Type Description bool Implements IEquatable<T> IComparable<T> IComparable Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualSortCondition-1.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualSortCondition-1.html",
    "title": "Class VirtualSortCondition<T> | AkiraNetwork",
    "keywords": "Class VirtualSortCondition<T> Represents the conditions for sorting data, holding the property to sort by and the order (ascending or descending). Inheritance object VirtualSortCondition<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public class VirtualSortCondition<T> Type Parameters Name Description T The type of the entity to be sorted. Constructors | Edit this page View Source VirtualSortCondition(Expression<Func<T, object>>, bool) Initializes a new instance of the VirtualSortCondition<T> class with the specified sorting property and order. Declaration public VirtualSortCondition(Expression<Func<T, object>> sortBy, bool ascending = true) Parameters Type Name Description Expression<Func<T, object>> sortBy The property to sort by. bool ascending A value indicating whether the sorting order is ascending. Properties | Edit this page View Source Ascending Gets or sets a value indicating whether the sorting order is ascending. True if the order is ascending; otherwise, false. Declaration public bool Ascending { get; set; } Property Value Type Description bool A boolean value indicating whether the sorting order is ascending. | Edit this page View Source SortBy Gets or sets the property used for sorting. Declaration public Expression<Func<T, object>> SortBy { get; set; } Property Value Type Description Expression<Func<T, object>> An expression that specifies the property to use for sorting. Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html",
    "title": "Class VirtualStorage<T> | AkiraNetwork",
    "keywords": "Class VirtualStorage<T> Inheritance object VirtualStorage<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public class VirtualStorage<T> Type Parameters Name Description T Constructors | Edit this page View Source VirtualStorage() Declaration public VirtualStorage() Properties | Edit this page View Source CurrentPath Declaration public VirtualPath CurrentPath { get; } Property Value Type Description VirtualPath | Edit this page View Source CycleDetectorForTarget Declaration public VirtualCycleDetector CycleDetectorForTarget { get; } Property Value Type Description VirtualCycleDetector | Edit this page View Source CycleDetectorForTree Declaration public VirtualCycleDetector CycleDetectorForTree { get; } Property Value Type Description VirtualCycleDetector | Edit this page View Source Dir Declaration public VirtualDirectoryAdapter<T> Dir { get; } Property Value Type Description VirtualDirectoryAdapter<T> | Edit this page View Source this[VirtualPath, bool] Declaration public VirtualNode this[VirtualPath path, bool followLinks = true] { get; set; } Parameters Type Name Description VirtualPath path bool followLinks Property Value Type Description VirtualNode | Edit this page View Source Item Declaration public VirtualItemAdapter<T> Item { get; } Property Value Type Description VirtualItemAdapter<T> | Edit this page View Source Link Declaration public VirtualSymbolicLinkAdapter<T> Link { get; } Property Value Type Description VirtualSymbolicLinkAdapter<T> | Edit this page View Source LinkDictionary Declaration public Dictionary<VirtualPath, HashSet<VirtualPath>> LinkDictionary { get; } Property Value Type Description Dictionary<VirtualPath, HashSet<VirtualPath>> | Edit this page View Source Root Declaration public VirtualDirectory Root { get; } Property Value Type Description VirtualDirectory Methods | Edit this page View Source AddDirectory(VirtualPath, VirtualDirectory, bool) Declaration public void AddDirectory(VirtualPath directoryPath, VirtualDirectory directory, bool createSubdirectories = false) Parameters Type Name Description VirtualPath directoryPath VirtualDirectory directory bool createSubdirectories | Edit this page View Source AddDirectory(VirtualPath, bool) Declaration public void AddDirectory(VirtualPath path, bool createSubdirectories = false) Parameters Type Name Description VirtualPath path bool createSubdirectories | Edit this page View Source AddItem(VirtualPath, VirtualItem<T>, bool) Declaration public void AddItem(VirtualPath itemDirectoryPath, VirtualItem<T> item, bool overwrite = false) Parameters Type Name Description VirtualPath itemDirectoryPath VirtualItem<T> item bool overwrite | Edit this page View Source AddItem(VirtualPath, T?, bool) Declaration public void AddItem(VirtualPath itemPath, T? data = default, bool overwrite = false) Parameters Type Name Description VirtualPath itemPath T data bool overwrite | Edit this page View Source AddLinkToDictionary(VirtualPath, VirtualPath) Declaration public void AddLinkToDictionary(VirtualPath targetPath, VirtualPath linkPath) Parameters Type Name Description VirtualPath targetPath VirtualPath linkPath | Edit this page View Source AddNode(VirtualPath, VirtualNode, bool) Declaration public void AddNode(VirtualPath nodeDirectoryPath, VirtualNode node, bool overwrite = false) Parameters Type Name Description VirtualPath nodeDirectoryPath VirtualNode node bool overwrite | Edit this page View Source AddSymbolicLink(VirtualPath, VirtualPath?, bool) Declaration public void AddSymbolicLink(VirtualPath linkPath, VirtualPath? targetPath = null, bool overwrite = false) Parameters Type Name Description VirtualPath linkPath VirtualPath targetPath bool overwrite | Edit this page View Source AddSymbolicLink(VirtualPath, VirtualSymbolicLink, bool) Declaration public void AddSymbolicLink(VirtualPath linkDirectoryPath, VirtualSymbolicLink link, bool overwrite = false) Parameters Type Name Description VirtualPath linkDirectoryPath VirtualSymbolicLink link bool overwrite | Edit this page View Source ChangeDirectory(VirtualPath) Declaration public void ChangeDirectory(VirtualPath path) Parameters Type Name Description VirtualPath path | Edit this page View Source ConvertToAbsolutePath(VirtualPath?, VirtualPath?) Declaration public VirtualPath ConvertToAbsolutePath(VirtualPath? relativePath, VirtualPath? basePath = null) Parameters Type Name Description VirtualPath relativePath VirtualPath basePath Returns Type Description VirtualPath | Edit this page View Source CopyNode(VirtualPath, VirtualPath, bool, bool, bool, List<VirtualNodeContext>?) Declaration public void CopyNode(VirtualPath sourcePath, VirtualPath destinationPath, bool overwrite = false, bool recursive = false, bool followLinks = false, List<VirtualNodeContext>? destinationContextList = null) Parameters Type Name Description VirtualPath sourcePath VirtualPath destinationPath bool overwrite bool recursive bool followLinks List<VirtualNodeContext> destinationContextList | Edit this page View Source DirectoryExists(VirtualPath, bool) Declaration public bool DirectoryExists(VirtualPath path, bool followLinks = false) Parameters Type Name Description VirtualPath path bool followLinks Returns Type Description bool | Edit this page View Source ExpandPath(VirtualPath, VirtualNodeTypeFilter, bool, bool) Declaration public IEnumerable<VirtualPath> ExpandPath(VirtualPath path, VirtualNodeTypeFilter filter = VirtualNodeTypeFilter.All, bool followLinks = true, bool resolveLinks = true) Parameters Type Name Description VirtualPath path VirtualNodeTypeFilter filter bool followLinks bool resolveLinks Returns Type Description IEnumerable<VirtualPath> | Edit this page View Source ExpandPathTree(VirtualPath, VirtualNodeTypeFilter, bool, bool) Declaration public IEnumerable<VirtualNodeContext> ExpandPathTree(VirtualPath path, VirtualNodeTypeFilter filter = VirtualNodeTypeFilter.All, bool followLinks = true, bool resolveLinks = true) Parameters Type Name Description VirtualPath path VirtualNodeTypeFilter filter bool followLinks bool resolveLinks Returns Type Description IEnumerable<VirtualNodeContext> | Edit this page View Source GetDirectory(VirtualPath, bool) Declaration public VirtualDirectory GetDirectory(VirtualPath path, bool followLinks = false) Parameters Type Name Description VirtualPath path bool followLinks Returns Type Description VirtualDirectory | Edit this page View Source GetItem(VirtualPath, bool) Declaration public VirtualItem<T> GetItem(VirtualPath path, bool followLinks = false) Parameters Type Name Description VirtualPath path bool followLinks Returns Type Description VirtualItem<T> | Edit this page View Source GetLinksFromDictionary(VirtualPath) Declaration public HashSet<VirtualPath> GetLinksFromDictionary(VirtualPath targetPath) Parameters Type Name Description VirtualPath targetPath Returns Type Description HashSet<VirtualPath> | Edit this page View Source GetNode(VirtualPath, bool) Declaration public VirtualNode GetNode(VirtualPath path, bool followLinks = false) Parameters Type Name Description VirtualPath path bool followLinks Returns Type Description VirtualNode | Edit this page View Source GetNodeType(VirtualPath, bool) Declaration public VirtualNodeType GetNodeType(VirtualPath path, bool followLinks = false) Parameters Type Name Description VirtualPath path bool followLinks Returns Type Description VirtualNodeType | Edit this page View Source GetNodes(VirtualNodeTypeFilter, bool, bool) Declaration public IEnumerable<VirtualNode> GetNodes(VirtualNodeTypeFilter nodeType = VirtualNodeTypeFilter.All, bool recursive = false, bool followLinks = false) Parameters Type Name Description VirtualNodeTypeFilter nodeType bool recursive bool followLinks Returns Type Description IEnumerable<VirtualNode> | Edit this page View Source GetNodes(VirtualPath, VirtualNodeTypeFilter, bool, bool) Declaration public IEnumerable<VirtualNode> GetNodes(VirtualPath basePath, VirtualNodeTypeFilter nodeType = VirtualNodeTypeFilter.All, bool recursive = false, bool followLinks = false) Parameters Type Name Description VirtualPath basePath VirtualNodeTypeFilter nodeType bool recursive bool followLinks Returns Type Description IEnumerable<VirtualNode> | Edit this page View Source GetNodesWithPaths(VirtualNodeTypeFilter, bool, bool) Declaration public IEnumerable<VirtualPath> GetNodesWithPaths(VirtualNodeTypeFilter nodeType = VirtualNodeTypeFilter.All, bool recursive = false, bool followLinks = false) Parameters Type Name Description VirtualNodeTypeFilter nodeType bool recursive bool followLinks Returns Type Description IEnumerable<VirtualPath> | Edit this page View Source GetNodesWithPaths(VirtualPath, VirtualNodeTypeFilter, bool, bool) Declaration public IEnumerable<VirtualPath> GetNodesWithPaths(VirtualPath basePath, VirtualNodeTypeFilter nodeType = VirtualNodeTypeFilter.All, bool recursive = false, bool followLinks = false) Parameters Type Name Description VirtualPath basePath VirtualNodeTypeFilter nodeType bool recursive bool followLinks Returns Type Description IEnumerable<VirtualPath> | Edit this page View Source GetSymbolicLink(VirtualPath) Declaration public VirtualSymbolicLink GetSymbolicLink(VirtualPath path) Parameters Type Name Description VirtualPath path Returns Type Description VirtualSymbolicLink | Edit this page View Source ItemExists(VirtualPath, bool) Declaration public bool ItemExists(VirtualPath path, bool followLinks = false) Parameters Type Name Description VirtualPath path bool followLinks Returns Type Description bool | Edit this page View Source MoveNode(VirtualPath, VirtualPath, bool, bool) Declaration public void MoveNode(VirtualPath sourcePath, VirtualPath destinationPath, bool overwrite = false, bool resolveLinks = true) Parameters Type Name Description VirtualPath sourcePath VirtualPath destinationPath bool overwrite bool resolveLinks | Edit this page View Source NodeExists(VirtualPath, bool) Declaration public bool NodeExists(VirtualPath path, bool followLinks = false) Parameters Type Name Description VirtualPath path bool followLinks Returns Type Description bool | Edit this page View Source RemoveLinkByLinkPath(VirtualPath) Declaration public void RemoveLinkByLinkPath(VirtualPath linkPath) Parameters Type Name Description VirtualPath linkPath | Edit this page View Source RemoveLinkFromDictionary(VirtualPath, VirtualPath) Declaration public void RemoveLinkFromDictionary(VirtualPath targetPath, VirtualPath linkPath) Parameters Type Name Description VirtualPath targetPath VirtualPath linkPath | Edit this page View Source RemoveNode(VirtualPath, bool, bool, bool) Declaration public void RemoveNode(VirtualPath nodePath, bool recursive = false, bool followLinks = false, bool resolveLinks = true) Parameters Type Name Description VirtualPath nodePath bool recursive bool followLinks bool resolveLinks | Edit this page View Source ResolveLinkTarget(VirtualPath) Declaration public VirtualPath ResolveLinkTarget(VirtualPath path) Parameters Type Name Description VirtualPath path Returns Type Description VirtualPath | Edit this page View Source SetLinkTargetNodeType(HashSet<VirtualPath>, VirtualNodeType) Declaration public void SetLinkTargetNodeType(HashSet<VirtualPath> linkPathSet, VirtualNodeType nodeType) Parameters Type Name Description HashSet<VirtualPath> linkPathSet VirtualNodeType nodeType | Edit this page View Source SetNode(VirtualPath, VirtualNode) Declaration public void SetNode(VirtualPath destinationPath, VirtualNode node) Parameters Type Name Description VirtualPath destinationPath VirtualNode node | Edit this page View Source SetNodeName(VirtualPath, VirtualNodeName, bool) Declaration public void SetNodeName(VirtualPath nodePath, VirtualNodeName newName, bool resolveLinks = true) Parameters Type Name Description VirtualPath nodePath VirtualNodeName newName bool resolveLinks | Edit this page View Source SymbolicLinkExists(VirtualPath) Declaration public bool SymbolicLinkExists(VirtualPath path) Parameters Type Name Description VirtualPath path Returns Type Description bool | Edit this page View Source TryGetDirectory(VirtualPath, bool) Declaration public VirtualDirectory? TryGetDirectory(VirtualPath path, bool followLinks = false) Parameters Type Name Description VirtualPath path bool followLinks Returns Type Description VirtualDirectory | Edit this page View Source TryGetItem(VirtualPath, bool) Declaration public VirtualItem<T>? TryGetItem(VirtualPath path, bool followLinks = false) Parameters Type Name Description VirtualPath path bool followLinks Returns Type Description VirtualItem<T> | Edit this page View Source TryGetNode(VirtualPath, bool) Declaration public VirtualNode? TryGetNode(VirtualPath path, bool followLinks = false) Parameters Type Name Description VirtualPath path bool followLinks Returns Type Description VirtualNode | Edit this page View Source TryGetSymbolicLink(VirtualPath) Declaration public VirtualSymbolicLink? TryGetSymbolicLink(VirtualPath path) Parameters Type Name Description VirtualPath path Returns Type Description VirtualSymbolicLink | Edit this page View Source TryResolveLinkTarget(VirtualPath) Declaration public VirtualPath? TryResolveLinkTarget(VirtualPath path) Parameters Type Name Description VirtualPath path Returns Type Description VirtualPath | Edit this page View Source UpdateAllTargetNodeTypesInDictionary() Declaration public void UpdateAllTargetNodeTypesInDictionary() | Edit this page View Source UpdateDirectory(VirtualPath, VirtualDirectory) Declaration public void UpdateDirectory(VirtualPath directoryPath, VirtualDirectory newDirectory) Parameters Type Name Description VirtualPath directoryPath VirtualDirectory newDirectory | Edit this page View Source UpdateItem(VirtualPath, VirtualItem<T>) Declaration public void UpdateItem(VirtualPath itemPath, VirtualItem<T> newItem) Parameters Type Name Description VirtualPath itemPath VirtualItem<T> newItem | Edit this page View Source UpdateLinkInDictionary(VirtualPath, VirtualPath) Declaration public void UpdateLinkInDictionary(VirtualPath linkPath, VirtualPath newTargetPath) Parameters Type Name Description VirtualPath linkPath VirtualPath newTargetPath | Edit this page View Source UpdateLinksToTarget(VirtualPath, VirtualPath) Declaration public void UpdateLinksToTarget(VirtualPath oldTargetPath, VirtualPath newTargetPath) Parameters Type Name Description VirtualPath oldTargetPath VirtualPath newTargetPath | Edit this page View Source UpdateSymbolicLInk(VirtualPath, VirtualSymbolicLink) Declaration public void UpdateSymbolicLInk(VirtualPath linkPath, VirtualSymbolicLink newLink) Parameters Type Name Description VirtualPath linkPath VirtualSymbolicLink newLink | Edit this page View Source UpdateTargetNodeTypesInDictionary(VirtualPath) Declaration public void UpdateTargetNodeTypesInDictionary(VirtualPath targetPath) Parameters Type Name Description VirtualPath targetPath | Edit this page View Source WalkPathToTarget(VirtualPath, NotifyNodeDelegate?, ActionNodeDelegate?, bool, bool) Declaration public VirtualNodeContext WalkPathToTarget(VirtualPath targetPath, NotifyNodeDelegate? notifyNode = null, ActionNodeDelegate? actionNode = null, bool followLinks = true, bool exceptionEnabled = true) Parameters Type Name Description VirtualPath targetPath NotifyNodeDelegate notifyNode ActionNodeDelegate actionNode bool followLinks bool exceptionEnabled Returns Type Description VirtualNodeContext | Edit this page View Source WalkPathTree(VirtualPath, VirtualNodeTypeFilter, bool, bool, bool) Declaration public IEnumerable<VirtualNodeContext> WalkPathTree(VirtualPath basePath, VirtualNodeTypeFilter filter = VirtualNodeTypeFilter.All, bool recursive = true, bool followLinks = true, bool resolveLinks = true) Parameters Type Name Description VirtualPath basePath VirtualNodeTypeFilter filter bool recursive bool followLinks bool resolveLinks Returns Type Description IEnumerable<VirtualNodeContext> Extension Methods VirtualTextFormatter.GenerateLinkTableDebugText<T>(VirtualStorage<T>) VirtualTextFormatter.GenerateSingleTableDebugText<T>(T) VirtualTextFormatter.GenerateTreeDebugText<T>(VirtualStorage<T>, VirtualPath, bool, bool)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualStorageExtensions.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualStorageExtensions.html",
    "title": "Class VirtualStorageExtensions | AkiraNetwork",
    "keywords": "Class VirtualStorageExtensions Provides extension methods for various operations on collections in the Virtual Storage Library. Inheritance object VirtualStorageExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public static class VirtualStorageExtensions Methods | Edit this page View Source ApplySortConditions<T>(IEnumerable<T>, List<VirtualSortCondition<T>>?) Applies the specified sort conditions to the elements of the source sequence. Declaration public static IEnumerable<T> ApplySortConditions<T>(this IEnumerable<T> source, List<VirtualSortCondition<T>>? sortConditions = null) Parameters Type Name Description IEnumerable<T> source The sequence of elements to sort. List<VirtualSortCondition<T>> sortConditions A list of conditions that define the sort order. If null or empty, no sorting is applied. Returns Type Description IEnumerable<T> An IEnumerable<T> containing the sorted elements. Type Parameters Name Description T The type of elements in the source sequence. | Edit this page View Source GroupAndSort<T>(IEnumerable<T>, VirtualGroupCondition<T, object>?, List<VirtualSortCondition<T>>?) Groups and sorts the elements of the source sequence based on the specified conditions. Declaration public static IEnumerable<T> GroupAndSort<T>(this IEnumerable<T> source, VirtualGroupCondition<T, object>? groupCondition = null, List<VirtualSortCondition<T>>? sortConditions = null) Parameters Type Name Description IEnumerable<T> source The sequence of elements to group and sort. VirtualGroupCondition<T, object> groupCondition The condition that defines how to group the elements. If null, no grouping is applied. List<VirtualSortCondition<T>> sortConditions A list of conditions that define the sort order. If null or empty, no sorting is applied. Returns Type Description IEnumerable<T> An IEnumerable<T> containing the grouped and sorted elements. Type Parameters Name Description T The type of elements in the source sequence."
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualStorageSettings.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualStorageSettings.html",
    "title": "Class VirtualStorageSettings | AkiraNetwork",
    "keywords": "Class VirtualStorageSettings Inheritance object VirtualStorageSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public class VirtualStorageSettings Properties | Edit this page View Source InvalidFullNodeNames Declaration public string[] InvalidFullNodeNames { get; set; } Property Value Type Description string[] | Edit this page View Source InvalidNodeNameCharacters Declaration public char[] InvalidNodeNameCharacters { get; set; } Property Value Type Description char[] | Edit this page View Source NodeListConditions Declaration public VirtualNodeListConditions NodeListConditions { get; set; } Property Value Type Description VirtualNodeListConditions | Edit this page View Source PathDot Declaration public string PathDot { get; set; } Property Value Type Description string | Edit this page View Source PathDotDot Declaration public string PathDotDot { get; set; } Property Value Type Description string | Edit this page View Source PathRoot Declaration public string PathRoot { get; set; } Property Value Type Description string | Edit this page View Source PathSeparator Declaration public char PathSeparator { get; set; } Property Value Type Description char | Edit this page View Source PrefixDirectory Declaration public string PrefixDirectory { get; set; } Property Value Type Description string | Edit this page View Source PrefixItem Declaration public string PrefixItem { get; set; } Property Value Type Description string | Edit this page View Source PrefixSymbolicLink Declaration public string PrefixSymbolicLink { get; set; } Property Value Type Description string | Edit this page View Source Settings Declaration public static VirtualStorageSettings Settings { get; } Property Value Type Description VirtualStorageSettings | Edit this page View Source WildcardMatcher Declaration public IVirtualWildcardMatcher? WildcardMatcher { get; set; } Property Value Type Description IVirtualWildcardMatcher Methods | Edit this page View Source Initialize() Declaration public static void Initialize() Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualStorageState.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualStorageState.html",
    "title": "Class VirtualStorageState | AkiraNetwork",
    "keywords": "Class VirtualStorageState Inheritance object VirtualStorageState Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public class VirtualStorageState Properties | Edit this page View Source InvalidFullNodeNames Declaration public string[] InvalidFullNodeNames { get; set; } Property Value Type Description string[] | Edit this page View Source InvalidNodeNameCharacters Declaration public char[] InvalidNodeNameCharacters { get; set; } Property Value Type Description char[] | Edit this page View Source NodeListConditions Declaration public VirtualNodeListConditions NodeListConditions { get; set; } Property Value Type Description VirtualNodeListConditions | Edit this page View Source PathDot Declaration public string PathDot { get; set; } Property Value Type Description string | Edit this page View Source PathDotDot Declaration public string PathDotDot { get; set; } Property Value Type Description string | Edit this page View Source PathRoot Declaration public string PathRoot { get; set; } Property Value Type Description string | Edit this page View Source PathSeparator Declaration public char PathSeparator { get; set; } Property Value Type Description char | Edit this page View Source PrefixDirectory Declaration public string PrefixDirectory { get; set; } Property Value Type Description string | Edit this page View Source PrefixItem Declaration public string PrefixItem { get; set; } Property Value Type Description string | Edit this page View Source PrefixSymbolicLink Declaration public string PrefixSymbolicLink { get; set; } Property Value Type Description string | Edit this page View Source State Declaration public static VirtualStorageState State { get; } Property Value Type Description VirtualStorageState | Edit this page View Source WildcardMatcher Declaration public IVirtualWildcardMatcher? WildcardMatcher { get; set; } Property Value Type Description IVirtualWildcardMatcher Methods | Edit this page View Source SetNodeListConditions(VirtualNodeListConditions) Declaration public static void SetNodeListConditions(VirtualNodeListConditions conditions) Parameters Type Name Description VirtualNodeListConditions conditions | Edit this page View Source SetNodeListConditions(VirtualNodeTypeFilter, VirtualGroupCondition<VirtualNode, object>?, List<VirtualSortCondition<VirtualNode>>?) Declaration public static void SetNodeListConditions(VirtualNodeTypeFilter filter, VirtualGroupCondition<VirtualNode, object>? groupCondition = null, List<VirtualSortCondition<VirtualNode>>? sortConditions = null) Parameters Type Name Description VirtualNodeTypeFilter filter VirtualGroupCondition<VirtualNode, object> groupCondition List<VirtualSortCondition<VirtualNode>> sortConditions Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualSymbolicLink.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualSymbolicLink.html",
    "title": "Class VirtualSymbolicLink | AkiraNetwork",
    "keywords": "Class VirtualSymbolicLink Represents a virtual symbolic link. A virtual symbolic link provides a virtual reference to other nodes (directories, items, or other symbolic links). This class represents symbolic links within the virtual storage library and manages paths to other nodes. The virtual symbolic link supports the concept of NULL links. When the TargetPath is null, the link resolution is not performed during path traversal. This feature can be useful when the target is undefined or dynamically determined. Inheritance object VirtualNode VirtualSymbolicLink Implements IVirtualDeepCloneable<VirtualNode> Inherited Members VirtualNode.Name VirtualNode.CreatedDate VirtualNode.UpdatedDate VirtualNode.VID VirtualNode.IsReferencedInStorage object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public class VirtualSymbolicLink : VirtualNode, IVirtualDeepCloneable<VirtualNode> Constructors | Edit this page View Source VirtualSymbolicLink() Initializes a new instance of the VirtualSymbolicLink class. The node name is automatically generated using the VirtualNodeName.GenerateNodeName method. Declaration public VirtualSymbolicLink() | Edit this page View Source VirtualSymbolicLink(VirtualNodeName) Initializes a new instance of the VirtualSymbolicLink class with the specified name. Declaration public VirtualSymbolicLink(VirtualNodeName name) Parameters Type Name Description VirtualNodeName name The name of the symbolic link. | Edit this page View Source VirtualSymbolicLink(VirtualNodeName, VirtualPath?) Initializes a new instance of the VirtualSymbolicLink class with the specified name and target path. Declaration public VirtualSymbolicLink(VirtualNodeName name, VirtualPath? targetPath) Parameters Type Name Description VirtualNodeName name The name of the symbolic link. VirtualPath targetPath The target path of the symbolic link. | Edit this page View Source VirtualSymbolicLink(VirtualNodeName, VirtualPath?, DateTime, DateTime) Initializes a new instance of the VirtualSymbolicLink class with the specified name, target path, creation date, and update date. Declaration public VirtualSymbolicLink(VirtualNodeName name, VirtualPath? targetPath, DateTime createdDate, DateTime updatedDate) Parameters Type Name Description VirtualNodeName name The name of the symbolic link. VirtualPath targetPath The target path of the symbolic link. DateTime createdDate The creation date. DateTime updatedDate The update date. Properties | Edit this page View Source NodeType Gets the type of the node. This class always returns SymbolicLink. Declaration public override VirtualNodeType NodeType { get; } Property Value Type Description VirtualNodeType Overrides VirtualNode.NodeType | Edit this page View Source TargetNodeType Gets or sets the type of the target node of the symbolic link. Declaration public VirtualNodeType TargetNodeType { get; set; } Property Value Type Description VirtualNodeType | Edit this page View Source TargetPath Gets or sets the target path of the symbolic link. Declaration public VirtualPath? TargetPath { get; set; } Property Value Type Description VirtualPath Methods | Edit this page View Source DeepClone(bool) Creates a deep clone of the symbolic link. Declaration public override VirtualNode DeepClone(bool recursive = false) Parameters Type Name Description bool recursive If true, all links are recursively cloned. Returns Type Description VirtualNode A deep clone of the symbolic link. Overrides VirtualNode.DeepClone(bool) | Edit this page View Source ToString() Returns a string representation of the symbolic link. Declaration public override string ToString() Returns Type Description string A string representation of the symbolic link. Overrides object.ToString() | Edit this page View Source Update(VirtualNode) Updates the current symbolic link with the data from the specified node. Declaration public override void Update(VirtualNode node) Parameters Type Name Description VirtualNode node The node to use for the update. Overrides VirtualNode.Update(VirtualNode) Exceptions Type Condition ArgumentException Thrown if the specified node is not a VirtualSymbolicLink. Operators | Edit this page View Source implicit operator VirtualSymbolicLink(VirtualPath?) Performs an implicit conversion from VirtualPath to VirtualSymbolicLink. The node name is automatically generated using the VirtualNodeName.GenerateNodeName method. Declaration public static implicit operator VirtualSymbolicLink(VirtualPath? targetPath) Parameters Type Name Description VirtualPath targetPath The target path to convert. Returns Type Description VirtualSymbolicLink | Edit this page View Source implicit operator VirtualSymbolicLink((VirtualNodeName nodeName, VirtualPath? targetPath)) Performs an implicit conversion from a tuple to VirtualSymbolicLink. Declaration public static implicit operator VirtualSymbolicLink((VirtualNodeName nodeName, VirtualPath? targetPath) tuple) Parameters Type Name Description (VirtualNodeName nodeName, VirtualPath targetPath) tuple The tuple to convert. Returns Type Description VirtualSymbolicLink Implements IVirtualDeepCloneable<T> Extension Methods VirtualNodeExtensions.ResolveNodeType(VirtualNode) VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualSymbolicLinkAdapter-1.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualSymbolicLinkAdapter-1.html",
    "title": "Class VirtualSymbolicLinkAdapter<T> | AkiraNetwork",
    "keywords": "Class VirtualSymbolicLinkAdapter<T> Inheritance object VirtualSymbolicLinkAdapter<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public class VirtualSymbolicLinkAdapter<T> Type Parameters Name Description T Constructors | Edit this page View Source VirtualSymbolicLinkAdapter(VirtualStorage<T>) Declaration public VirtualSymbolicLinkAdapter(VirtualStorage<T> storage) Parameters Type Name Description VirtualStorage<T> storage Properties | Edit this page View Source this[VirtualPath, bool] Declaration public VirtualSymbolicLink this[VirtualPath path, bool followLinks = true] { get; set; } Parameters Type Name Description VirtualPath path bool followLinks Property Value Type Description VirtualSymbolicLink Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.WildcardMatchers.DefaultWildcardMatcher.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.WildcardMatchers.DefaultWildcardMatcher.html",
    "title": "Class DefaultWildcardMatcher | AkiraNetwork",
    "keywords": "Class DefaultWildcardMatcher Inheritance object DefaultWildcardMatcher Implements IVirtualWildcardMatcher Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AkiraNetwork.VirtualStorageLibrary.WildcardMatchers Assembly: VirtualStorageLibrary.dll Syntax public class DefaultWildcardMatcher : IVirtualWildcardMatcher Properties | Edit this page View Source Count Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source Patterns Declaration public IEnumerable<string> Patterns { get; } Property Value Type Description IEnumerable<string> | Edit this page View Source WildcardDictionary Declaration public ReadOnlyDictionary<string, string> WildcardDictionary { get; } Property Value Type Description ReadOnlyDictionary<string, string> | Edit this page View Source Wildcards Declaration public IEnumerable<string> Wildcards { get; } Property Value Type Description IEnumerable<string> Methods | Edit this page View Source PatternMatcher(string, string) Declaration public bool PatternMatcher(string nodeName, string pattern) Parameters Type Name Description string nodeName string pattern Returns Type Description bool Implements IVirtualWildcardMatcher Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.WildcardMatchers.PowerShellWildcardMatcher.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.WildcardMatchers.PowerShellWildcardMatcher.html",
    "title": "Class PowerShellWildcardMatcher | AkiraNetwork",
    "keywords": "Class PowerShellWildcardMatcher Inheritance object PowerShellWildcardMatcher Implements IVirtualWildcardMatcher Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AkiraNetwork.VirtualStorageLibrary.WildcardMatchers Assembly: VirtualStorageLibrary.dll Syntax public class PowerShellWildcardMatcher : IVirtualWildcardMatcher Properties | Edit this page View Source Count Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source Patterns Declaration public IEnumerable<string> Patterns { get; } Property Value Type Description IEnumerable<string> | Edit this page View Source WildcardDictionary Declaration public ReadOnlyDictionary<string, string> WildcardDictionary { get; } Property Value Type Description ReadOnlyDictionary<string, string> | Edit this page View Source Wildcards Declaration public IEnumerable<string> Wildcards { get; } Property Value Type Description IEnumerable<string> Methods | Edit this page View Source PatternMatcher(string, string) Declaration public bool PatternMatcher(string nodeName, string pattern) Parameters Type Name Description string nodeName string pattern Returns Type Description bool Implements IVirtualWildcardMatcher Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.WildcardMatchers.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.WildcardMatchers.html",
    "title": "Namespace AkiraNetwork.VirtualStorageLibrary.WildcardMatchers | AkiraNetwork",
    "keywords": "Namespace AkiraNetwork.VirtualStorageLibrary.WildcardMatchers Classes DefaultWildcardMatcher PowerShellWildcardMatcher"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.html",
    "title": "Namespace AkiraNetwork.VirtualStorageLibrary | AkiraNetwork",
    "keywords": "Namespace AkiraNetwork.VirtualStorageLibrary Classes VirtualCycleDetector VirtualDirectory Represents a virtual directory. A virtual directory functions as a container for other nodes. It can contain VirtualItem<T>, VirtualDirectory, and VirtualSymbolicLink, providing a centralized way to manage these entities. This class supports operations such as adding, removing, updating, checking the existence of, and enumerating nodes within the directory. It serves as a fundamental component for efficiently managing the structure of the virtual storage. Additionally, nodes can be enumerated according to the specified display conditions. VirtualDirectoryAdapter<T> VirtualException The base class for exceptions that occur within the virtual storage library. VirtualGroupCondition<T, TKey> Represents the conditions for grouping data, holding the property to group by and the order (ascending or descending). VirtualItem Represents a virtual item. This class serves as the base class for the VirtualItem<T> type and is used solely for type checking of VirtualItem. VirtualItemAdapter<T> VirtualItem<T> Represents a virtual item. A virtual item is an object used to manage item data within the virtual storage. It holds item data based on the user-defined type T, facilitating the management and manipulation of various types of content. Virtual items ensure that the actual data is distinctly present. If the user-defined type T implements the IVirtualDeepCloneable<T> interface, a deep clone of the item data is created, ensuring separate instances. If this interface is not implemented, shallow copies may result in multiple virtual items referencing the same instance of the item data. VirtualNode Represents an abstract class for nodes. VirtualNodeContext VirtualNodeExtensions Provides extension methods for operations on virtual nodes in the Virtual Storage Library. VirtualNodeName VirtualNodeNotFoundException The exception that is thrown when a node is not found in the virtual storage. VirtualPath VirtualSortCondition<T> Represents the conditions for sorting data, holding the property to sort by and the order (ascending or descending). VirtualStorageExtensions Provides extension methods for various operations on collections in the Virtual Storage Library. VirtualStorageSettings VirtualStorageState VirtualStorage<T> VirtualSymbolicLink Represents a virtual symbolic link. A virtual symbolic link provides a virtual reference to other nodes (directories, items, or other symbolic links). This class represents symbolic links within the virtual storage library and manages paths to other nodes. The virtual symbolic link supports the concept of NULL links. When the TargetPath is null, the link resolution is not performed during path traversal. This feature can be useful when the target is undefined or dynamically determined. VirtualSymbolicLinkAdapter<T> Structs VirtualID A structure representing a unique identifier within the virtual storage library. This identifier is based on a randomly generated UUID version 4 (UUIDv4). UUIDv4 is a 128-bit value that ensures high uniqueness and has strong cryptographic properties. VirtualNodeListConditions Interfaces IVirtualDeepCloneable<T> IVirtualWildcardMatcher Enums VirtualNodeType Specifies the types of virtual nodes. VirtualNodeTypeFilter Specifies the filters for virtual node types. Delegates ActionNodeDelegate A delegate used to perform an action on a specific node during node traversal. NotifyNodeDelegate A delegate used to notify the status of a specific node during node traversal. PatternMatch A delegate used to determine if a node name matches a pattern."
  },
  "getting-started.html": {
    "href": "getting-started.html",
    "title": "Getting Started | AkiraNetwork",
    "keywords": "Getting Started"
  },
  "index.html": {
    "href": "index.html",
    "title": "AkiraNetwork HOMEPAGE. | AkiraNetwork",
    "keywords": "AkiraNetwork HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image. This documentation uses the DocFX Material theme, which is © 2019 Oscar Vásquez. It is licensed under the MIT License. For more details, please see the DocFX Material GitHub repository."
  },
  "introduction.html": {
    "href": "introduction.html",
    "title": "Introduction | AkiraNetwork",
    "keywords": "Introduction"
  }
}