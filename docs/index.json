{
  "api/AkiraNetwork.VirtualStorageLibrary.ActionNodeDelegate.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.ActionNodeDelegate.html",
    "title": "Delegate ActionNodeDelegate | AkiraNetwork",
    "keywords": "Delegate ActionNodeDelegate A delegate used to perform an action on a specific node during node traversal. Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public delegate bool ActionNodeDelegate(VirtualDirectory parentDirectory, VirtualNodeName nodeName, VirtualPath nodePath) Parameters Type Name Description VirtualDirectory parentDirectory The parent directory of the target node. VirtualNodeName nodeName The name of the target node. VirtualPath nodePath The path of the target node. Returns Type Description bool Returns true to continue node traversal, or false to stop node traversal. Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.IVirtualDeepCloneable-1.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.IVirtualDeepCloneable-1.html",
    "title": "Interface IVirtualDeepCloneable<T> | AkiraNetwork",
    "keywords": "Interface IVirtualDeepCloneable<T> Provides functionality to create deep clones of type T. Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public interface IVirtualDeepCloneable<T> Type Parameters Name Description T The type of the object to clone. Methods DeepClone(bool) Creates a deep clone of the object. Declaration T DeepClone(bool recursive = false) Parameters Type Name Description bool recursive Indicates whether to recursively clone nested objects. If true, a recursive clone is performed; if false, only the object itself is cloned. This parameter is only relevant for VirtualDirectory, and is ignored for VirtualItem{T} and VirtualSymbolicLink. Returns Type Description T The cloned object. Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.IVirtualWildcardMatcher.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.IVirtualWildcardMatcher.html",
    "title": "Interface IVirtualWildcardMatcher | AkiraNetwork",
    "keywords": "Interface IVirtualWildcardMatcher Provides functionality for wildcard matching. Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public interface IVirtualWildcardMatcher Properties Count Gets the number of wildcards. Declaration int Count { get; } Property Value Type Description int An integer representing the number of wildcards available. Patterns Gets a collection of available patterns. Declaration IEnumerable<string> Patterns { get; } Property Value Type Description IEnumerable<string> An enumerable collection of strings representing the available patterns. WildcardDictionary Gets a dictionary of wildcards and their corresponding regex patterns. Declaration ReadOnlyDictionary<string, string> WildcardDictionary { get; } Property Value Type Description ReadOnlyDictionary<string, string> A read-only dictionary containing wildcards as keys and their corresponding regex patterns as values. Wildcards Gets a collection of available wildcards. Declaration IEnumerable<string> Wildcards { get; } Property Value Type Description IEnumerable<string> An enumerable collection of strings representing the available wildcards. Methods PatternMatcher(string, string) Determines whether the specified node name matches the specified pattern. Declaration bool PatternMatcher(string nodeName, string pattern) Parameters Type Name Description string nodeName The node name to check. string pattern The pattern to compare against. Returns Type Description bool True if the node name matches the pattern; otherwise, false. Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.Localization.Resources.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.Localization.Resources.html",
    "title": "Class Resources | AkiraNetwork",
    "keywords": "Class Resources ローカライズされた文字列などを検索するための、厳密に型指定されたリソース クラスです。 Inheritance object Resources Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AkiraNetwork.VirtualStorageLibrary.Localization Assembly: VirtualStorageLibrary.dll Syntax internal class Resources Constructors Resources() Declaration internal Resources() Fields resourceCulture Declaration private static CultureInfo resourceCulture Field Value Type Description CultureInfo resourceMan Declaration private static ResourceManager resourceMan Field Value Type Description ResourceManager Properties BasePathIsNotAbsolute The specified base path is not an absolute path. [{0}] に類似しているローカライズされた文字列を検索します。 Declaration internal static string BasePathIsNotAbsolute { get; } Property Value Type Description string CannotAddRoot Cannot add the root to a directory. に類似しているローカライズされた文字列を検索します。 Declaration internal static string CannotAddRoot { get; } Property Value Type Description string CannotMoveRootDirectory Cannot move the root directory. に類似しているローカライズされた文字列を検索します。 Declaration internal static string CannotMoveRootDirectory { get; } Property Value Type Description string CannotReachBecauseNodeItem Cannot reach node [{0}]. Node [{1}] is an item. に類似しているローカライズされた文字列を検索します。 Declaration internal static string CannotReachBecauseNodeItem { get; } Property Value Type Description string CannotReachBecauseNodeSymbolicLink Cannot reach node [{0}]. Node [{1}] is a symbolic link, and the followLinks parameter is set to false. に類似しているローカライズされた文字列を検索します。 Declaration internal static string CannotReachBecauseNodeSymbolicLink { get; } Property Value Type Description string CannotRemoveNonEmptyDirectory Cannot remove the directory because it is not empty and the recursive parameter is set to false. [{0}] に類似しているローカライズされた文字列を検索します。 Declaration internal static string CannotRemoveNonEmptyDirectory { get; } Property Value Type Description string CannotRemoveRoot Cannot remove the root directory. に類似しているローカライズされた文字列を検索します。 Declaration internal static string CannotRemoveRoot { get; } Property Value Type Description string CircularReferenceDetected Circular reference detected. [{0}] [{1}] に類似しているローカライズされた文字列を検索します。 Declaration internal static string CircularReferenceDetected { get; } Property Value Type Description string Culture すべてについて、現在のスレッドの CurrentUICulture プロパティをオーバーライドします 現在のスレッドの CurrentUICulture プロパティをオーバーライドします。 Declaration internal static CultureInfo Culture { get; set; } Property Value Type Description CultureInfo DestinationIsSubdirectoryOfSource The destination path is a subdirectory of the source path. [{0}] [{1}] に類似しているローカライズされた文字列を検索します。 Declaration internal static string DestinationIsSubdirectoryOfSource { get; } Property Value Type Description string DestinationNodeIsItemOrSymbolicLink The destination node is an item or a symbolic link. [{0}] に類似しているローカライズされた文字列を検索します。 Declaration internal static string DestinationNodeIsItemOrSymbolicLink { get; } Property Value Type Description string InvalidNodeName Node name [{0}] is invalid. Forbidden characters are used. に類似しているローカライズされた文字列を検索します。 Declaration internal static string InvalidNodeName { get; } Property Value Type Description string LinkPathIsNotAbsolutePath The symbolic link path specified in the parameter must be an absolute path. [{0}] に類似しているローカライズされた文字列を検索します。 Declaration internal static string LinkPathIsNotAbsolutePath { get; } Property Value Type Description string NegativeDepthValue Depth has become a negative value. [{0}] に類似しているローカライズされた文字列を検索します。 Declaration internal static string NegativeDepthValue { get; } Property Value Type Description string NewNameNodeAlreadyExists Cannot rename because a node with the new name already exists. [{0}] に類似しているローカライズされた文字列を検索します。 Declaration internal static string NewNameNodeAlreadyExists { get; } Property Value Type Description string NewNameSameAsCurrent The new name is the same as the current name. [{0}] に類似しているローカライズされた文字列を検索します。 Declaration internal static string NewNameSameAsCurrent { get; } Property Value Type Description string NodeAlreadyExists Node [{0}] already exists. Overwriting is not allowed. に類似しているローカライズされた文字列を検索します。 Declaration internal static string NodeAlreadyExists { get; } Property Value Type Description string NodeIsNotVirtualDirectory The specified node [{0}] is not of type VirtualDirectory. に類似しているローカライズされた文字列を検索します。 Declaration internal static string NodeIsNotVirtualDirectory { get; } Property Value Type Description string NodeIsNotVirtualItem The specified node [{0}] is not of type VirtualItem<{1}>. に類似しているローカライズされた文字列を検索します。 Declaration internal static string NodeIsNotVirtualItem { get; } Property Value Type Description string NodeIsNotVirtualSymbolicLink The specified node [{0}] is not of type VirtualSymbolicLink. に類似しているローカライズされた文字列を検索します。 Declaration internal static string NodeIsNotVirtualSymbolicLink { get; } Property Value Type Description string NodeNotFound Node not found. [{0}] に類似しているローカライズされた文字列を検索します。 Declaration internal static string NodeNotFound { get; } Property Value Type Description string NodeWithSameNameAtDestination A node with the same name already exists at the destination path. [{0}] [{1}] に類似しているローカライズされた文字列を検索します。 Declaration internal static string NodeWithSameNameAtDestination { get; } Property Value Type Description string ParameterIsEmpty The values ​​specified in the parameters are empty. [{0}] に類似しているローカライズされた文字列を検索します。 Declaration internal static string ParameterIsEmpty { get; } Property Value Type Description string ParameterIsNotVirtualNodeName The object specified by the parameter is not of type VirtualNodeName. に類似しているローカライズされた文字列を検索します。 Declaration internal static string ParameterIsNotVirtualNodeName { get; } Property Value Type Description string ParameterIsNotVirtualPath The object specified by the parameter is not of type VirtualPath. に類似しているローカライズされた文字列を検索します。 Declaration internal static string ParameterIsNotVirtualPath { get; } Property Value Type Description string ParameterIsNullOrEmpty The values ​​specified in the parameters are null or empty. [{0}] に類似しているローカライズされた文字列を検索します。 Declaration internal static string ParameterIsNullOrEmpty { get; } Property Value Type Description string PathCannotBeEmpty An empty string cannot be specified as a path. に類似しているローカライズされた文字列を検索します。 Declaration internal static string PathCannotBeEmpty { get; } Property Value Type Description string PathIsNotAbsolutePath This path is not an absolute path. [{0}] に類似しているローカライズされた文字列を検索します。 Declaration internal static string PathIsNotAbsolutePath { get; } Property Value Type Description string PathNormalizationAboveRoot Due to path normalization, it is above the root directory. [{0}] に類似しているローカライズされた文字列を検索します。 Declaration internal static string PathNormalizationAboveRoot { get; } Property Value Type Description string PathNotFound Path not found. [{0}] に類似しているローカライズされた文字列を検索します。 Declaration internal static string PathNotFound { get; } Property Value Type Description string PrefixIsEmpty Prefix cannot be empty. に類似しているローカライズされた文字列を検索します。 Declaration internal static string PrefixIsEmpty { get; } Property Value Type Description string RecursiveSubdirectoryConflict If the recursive parameter is set to true, the source or destination cannot be a subdirectory of each other. [{0}] [{1}] に類似しているローカライズされた文字列を検索します。 Declaration internal static string RecursiveSubdirectoryConflict { get; } Property Value Type Description string ResourceManager このクラスで使用されているキャッシュされた ResourceManager インスタンスを返します。 Declaration internal static ResourceManager ResourceManager { get; } Property Value Type Description ResourceManager RootAlreadyExists The root directory already exists. に類似しているローカライズされた文字列を検索します。 Declaration internal static string RootAlreadyExists { get; } Property Value Type Description string SourceAndDestinationPathSameForCopy The source path and the destination path for the copy operation are the same. [{0}] [{1}] に類似しているローカライズされた文字列を検索します。 Declaration internal static string SourceAndDestinationPathSameForCopy { get; } Property Value Type Description string SourceAndDestinationPathSameForMove The source path and the destination path for the move operation are the same. [{0}] [{1}] に類似しているローカライズされた文字列を検索します。 Declaration internal static string SourceAndDestinationPathSameForMove { get; } Property Value Type Description string TargetPathIsNotAbsolutePath The target path specified in the parameter must be an absolute path. [{0}] に類似しているローカライズされた文字列を検索します。 Declaration internal static string TargetPathIsNotAbsolutePath { get; } Property Value Type Description string Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.Localization.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.Localization.html",
    "title": "Namespace AkiraNetwork.VirtualStorageLibrary.Localization | AkiraNetwork",
    "keywords": "Namespace AkiraNetwork.VirtualStorageLibrary.Localization Classes Resources ローカライズされた文字列などを検索するための、厳密に型指定されたリソース クラスです。"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.NotifyNodeDelegate.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.NotifyNodeDelegate.html",
    "title": "Delegate NotifyNodeDelegate | AkiraNetwork",
    "keywords": "Delegate NotifyNodeDelegate A delegate used to notify the status of a specific node during node traversal. Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public delegate void NotifyNodeDelegate(VirtualPath path, VirtualNode? node) Parameters Type Name Description VirtualPath path The virtual path of the node being notified. VirtualNode node The instance of the node being notified. Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.PatternMatch.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.PatternMatch.html",
    "title": "Delegate PatternMatch | AkiraNetwork",
    "keywords": "Delegate PatternMatch A delegate used to determine if a node name matches a pattern. Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public delegate bool PatternMatch(string nodeName, string pattern) Parameters Type Name Description string nodeName The name of the node to be matched. string pattern The pattern to match against. Returns Type Description bool True if the node name matches the pattern; otherwise, false. Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.html",
    "title": "Class VirtualTextFormatter | AkiraNetwork",
    "keywords": "Class VirtualTextFormatter Utility class for generating text-based representations of the virtual storage's tree structure. Provides static methods for generating various debug texts. Inheritance object VirtualTextFormatter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AkiraNetwork.VirtualStorageLibrary.Utilities Assembly: VirtualStorageLibrary.dll Syntax public static class VirtualTextFormatter Remarks This class distinguishes between full-width and half-width characters based on specific character code ranges. The following ranges are considered full-width characters: 0x1100 to 0x115F: Korean Hangul Jamo characters 0x2E80 to 0xA4CF (excluding 0x303F): CJK Unified Ideographs and compatibility characters 0xAC00 to 0xD7A3: Korean Hangul syllables 0xF900 to 0xFAFF: CJK compatibility ideographs 0xFE10 to 0xFE19: Vertical forms punctuation 0xFE30 to 0xFE6F: CJK compatibility forms 0xFF00 to 0xFF60: Full-width ASCII and symbols 0xFFE0 to 0xFFE6: Full-width special symbols The distinction between full-width and half-width characters is important for ensuring proper alignment and formatting in text-based representations, especially when working with mixed-language data or presenting data in a tabular format. This classification helps in correctly calculating string widths and aligning elements in debug text outputs, such as file paths or tabular data, where accurate spacing is crucial. Methods GenerateLinkTableDebugText<T>(VirtualStorage<T>) Generates and returns a table representation of symbolic link information. Declaration public static string GenerateLinkTableDebugText<T>(this VirtualStorage<T> vs) Parameters Type Name Description VirtualStorage<T> vs The instance of the virtual storage. Returns Type Description string The generated debug text of the link table. Type Parameters Name Description T The type of data in the storage. GenerateSingleTableDebugText<T>(T) Generates and returns a table representation of a single object's properties. Declaration public static string GenerateSingleTableDebugText<T>(this T singleObject) Parameters Type Name Description T singleObject The object to be represented. Returns Type Description string The generated debug text of the table. Type Parameters Name Description T The type of the object. GenerateTableDebugText<T>(IEnumerable<T>) Generates and returns a table representation of the collection's contents. Declaration public static string GenerateTableDebugText<T>(this IEnumerable<T> enumerableObject) Parameters Type Name Description IEnumerable<T> enumerableObject The collection to be represented. Returns Type Description string The generated debug text of the table. Type Parameters Name Description T The type of objects in the collection. GenerateTreeDebugText<T>(VirtualStorage<T>, VirtualPath, bool, bool) Generates and returns a text-based representation of the virtual storage tree structure. Declaration public static string GenerateTreeDebugText<T>(this VirtualStorage<T> vs, VirtualPath basePath, bool recursive = true, bool followLinks = false) Parameters Type Name Description VirtualStorage<T> vs The instance of the virtual storage. VirtualPath basePath The base path from which to start. bool recursive Whether to list subdirectories recursively. bool followLinks Whether to follow symbolic links. Returns Type Description string The generated debug text of the tree structure. Type Parameters Name Description T The type of data in the storage. Remarks The generated text represents the tree structure starting from the specified base path. Each node is represented by the result of the ToString method overridden in the specific derived class of the node. When `recursive` is true, subdirectories are listed recursively. If false, subdirectories are not included in the output. When `followLinks` is true, symbolic links are replaced with their target paths in the output. If false, the symbolic links themselves are displayed. The output format includes indents and special characters to denote directory hierarchies and symbolic links. Example: / ├dir1/ │├subdir1/ ││└item3 │└item2 ├link-to-dir -> /dir1 ├item1 └link-to-item -> /item1"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.Utilities.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.Utilities.html",
    "title": "Namespace AkiraNetwork.VirtualStorageLibrary.Utilities | AkiraNetwork",
    "keywords": "Namespace AkiraNetwork.VirtualStorageLibrary.Utilities Classes VirtualTextFormatter Utility class for generating text-based representations of the virtual storage's tree structure. Provides static methods for generating various debug texts."
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualCycleDetector.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualCycleDetector.html",
    "title": "Class VirtualCycleDetector | AkiraNetwork",
    "keywords": "Class VirtualCycleDetector Class for detecting cycles in virtual symbolic links. Determines if a given link is part of a cycle. Inheritance object VirtualCycleDetector Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public class VirtualCycleDetector Constructors VirtualCycleDetector() Initializes a new instance of the VirtualCycleDetector class. Declaration public VirtualCycleDetector() Properties Count Gets the number of detected cycles. Declaration public int Count { get; } Property Value Type Description int The number of detected cycles. CycleDictionary Gets the dictionary of detected cycles. Declaration public Dictionary<VirtualID, VirtualSymbolicLink> CycleDictionary { get; } Property Value Type Description Dictionary<VirtualID, VirtualSymbolicLink> A dictionary where the keys are VirtualIDs and the values are the corresponding VirtualSymbolicLinks. Methods Clear() Clears the dictionary of detected cycles. Declaration public void Clear() IsNodeInCycle(VirtualSymbolicLink) Determines whether the specified VirtualSymbolicLink is part of a cycle. Declaration public bool IsNodeInCycle(VirtualSymbolicLink link) Parameters Type Name Description VirtualSymbolicLink link The VirtualSymbolicLink to check. Returns Type Description bool True if the link is part of a cycle; otherwise, false. Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualDirectory.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualDirectory.html",
    "title": "Class VirtualDirectory | AkiraNetwork",
    "keywords": "Class VirtualDirectory Represents a virtual directory. A virtual directory functions as a container for other nodes. It can contain VirtualItem<T>, VirtualDirectory, and VirtualSymbolicLink, providing a centralized way to manage these entities. This class supports operations such as adding, removing, updating, checking the existence of, and enumerating nodes within the directory. It serves as a fundamental component for efficiently managing the structure of the virtual storage. Additionally, nodes can be enumerated according to the specified display conditions. Inheritance object VirtualNode VirtualDirectory Implements IVirtualDeepCloneable<VirtualNode> IEnumerable<VirtualNode> IEnumerable Inherited Members VirtualNode.Name VirtualNode.CreatedDate VirtualNode.UpdatedDate VirtualNode.VID VirtualNode.IsReferencedInStorage object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public class VirtualDirectory : VirtualNode, IVirtualDeepCloneable<VirtualNode>, IEnumerable<VirtualNode>, IEnumerable Constructors VirtualDirectory() Initializes a new instance of the VirtualDirectory class. The node name is automatically generated by the GenerateNodeName(string) method. Declaration public VirtualDirectory() VirtualDirectory(VirtualNodeName) Initializes a new instance of the VirtualDirectory class with the specified name. Declaration public VirtualDirectory(VirtualNodeName name) Parameters Type Name Description VirtualNodeName name The name of the directory. VirtualDirectory(VirtualNodeName, DateTime, DateTime) Initializes a new instance of the VirtualDirectory class with the specified name, creation date, and update date. Declaration public VirtualDirectory(VirtualNodeName name, DateTime createdDate, DateTime updatedDate) Parameters Type Name Description VirtualNodeName name The name of the directory. DateTime createdDate The creation date. DateTime updatedDate The update date. Properties Count Gets the total number of nodes within the directory. Declaration public int Count { get; } Property Value Type Description int DirectoryCount Gets the number of directories within the directory. Declaration public int DirectoryCount { get; } Property Value Type Description int DirectoryViewCount Gets the number of directories based on the current display conditions. Declaration public int DirectoryViewCount { get; } Property Value Type Description int this[VirtualNodeName] Gets or sets the node with the specified name using the indexer. Declaration public VirtualNode this[VirtualNodeName name] { get; set; } Parameters Type Name Description VirtualNodeName name The name of the node. Property Value Type Description VirtualNode The node with the specified name. Exceptions Type Condition VirtualNodeNotFoundException Thrown if the node is not found. ItemCount Gets the number of items within the directory. Declaration public int ItemCount { get; } Property Value Type Description int ItemViewCount Gets the number of items based on the current display conditions. Declaration public int ItemViewCount { get; } Property Value Type Description int NodeNames Enumerates all node names within the directory. Declaration public IEnumerable<VirtualNodeName> NodeNames { get; } Property Value Type Description IEnumerable<VirtualNodeName> NodeType Gets the type of the node. This class always returns Directory. Declaration public override VirtualNodeType NodeType { get; } Property Value Type Description VirtualNodeType Overrides VirtualNode.NodeType Nodes Enumerates all nodes within the directory. Declaration public IEnumerable<VirtualNode> Nodes { get; } Property Value Type Description IEnumerable<VirtualNode> NodesView Gets a view of nodes based on the current display conditions. Declaration public IEnumerable<VirtualNode> NodesView { get; } Property Value Type Description IEnumerable<VirtualNode> NodesViewCount Gets the number of nodes based on the current display conditions. Declaration public int NodesViewCount { get; } Property Value Type Description int SymbolicLinkCount Gets the number of symbolic links within the directory. Declaration public int SymbolicLinkCount { get; } Property Value Type Description int SymbolicLinkViewCount Gets the number of symbolic links based on the current display conditions. Declaration public int SymbolicLinkViewCount { get; } Property Value Type Description int Methods Add(VirtualNode, bool) Adds a node to the directory. Declaration public VirtualNode Add(VirtualNode node, bool allowOverwrite = false) Parameters Type Name Description VirtualNode node The node to add. bool allowOverwrite If true, allows overwriting an existing node with the same name. Returns Type Description VirtualNode The added node. Exceptions Type Condition ArgumentException Thrown if an invalid node name is specified. InvalidOperationException Thrown if a node with the same name already exists. AddDirectory(VirtualNodeName, bool) Adds a directory with the specified name. Declaration public VirtualDirectory AddDirectory(VirtualNodeName name, bool allowOverwrite = false) Parameters Type Name Description VirtualNodeName name The name of the directory. bool allowOverwrite If true, allows overwriting an existing node with the same name. Returns Type Description VirtualDirectory The added directory. AddItem<T>(VirtualNodeName, T?, bool) Adds an item with the specified name. Declaration public VirtualItem<T> AddItem<T>(VirtualNodeName name, T? itemData = default, bool allowOverwrite = false) Parameters Type Name Description VirtualNodeName name The name of the item. T itemData The data of the item. bool allowOverwrite If true, allows overwriting an existing node with the same name. Returns Type Description VirtualItem<T> The added item. Type Parameters Name Description T The data type of the item. AddSymbolicLink(VirtualNodeName, VirtualPath, bool) Adds a symbolic link with the specified name. Declaration public VirtualSymbolicLink AddSymbolicLink(VirtualNodeName name, VirtualPath targetPath, bool allowOverwrite = false) Parameters Type Name Description VirtualNodeName name The name of the symbolic link. VirtualPath targetPath The target path of the symbolic link. bool allowOverwrite If true, allows overwriting an existing node with the same name. Returns Type Description VirtualSymbolicLink The added symbolic link. DeepClone(bool) Creates a deep clone of the directory. Declaration public override VirtualNode DeepClone(bool recursive = false) Parameters Type Name Description bool recursive If true, all nodes within the directory are recursively cloned. Returns Type Description VirtualNode A deep clone of the directory. Overrides VirtualNode.DeepClone(bool) DirectoryExists(VirtualNodeName) Checks whether a directory with the specified name exists. Declaration public bool DirectoryExists(VirtualNodeName name) Parameters Type Name Description VirtualNodeName name The name of the directory to check. Returns Type Description bool True if the directory exists; otherwise, false. Get(VirtualNodeName, bool) Gets the node with the specified name. Declaration public VirtualNode? Get(VirtualNodeName name, bool exceptionEnabled = true) Parameters Type Name Description VirtualNodeName name The name of the node. bool exceptionEnabled If true, throws an exception if the node is not found. Returns Type Description VirtualNode The node with the specified name, or null if the node does not exist. GetDirectory(VirtualNodeName) Gets the directory with the specified name. Declaration public VirtualDirectory GetDirectory(VirtualNodeName name) Parameters Type Name Description VirtualNodeName name The name of the directory. Returns Type Description VirtualDirectory The directory with the specified name. Exceptions Type Condition VirtualNodeNotFoundException Thrown if the node is not found. InvalidOperationException Thrown if the specified node is not a directory. GetEnumerator() Gets an enumerator for nodes based on the current display conditions. Declaration public IEnumerator<VirtualNode> GetEnumerator() Returns Type Description IEnumerator<VirtualNode> An enumerator for filtered nodes. GetItem<T>(VirtualNodeName) Gets the item with the specified name. Declaration public VirtualItem<T> GetItem<T>(VirtualNodeName name) Parameters Type Name Description VirtualNodeName name The name of the item. Returns Type Description VirtualItem<T> The item with the specified name. Type Parameters Name Description T The data type of the item. Exceptions Type Condition VirtualNodeNotFoundException Thrown if the node is not found. InvalidOperationException Thrown if the specified node is not an item. GetNodesView() Gets a view of nodes based on the current display conditions. Declaration public IEnumerable<VirtualNode> GetNodesView() Returns Type Description IEnumerable<VirtualNode> An enumeration of nodes based on the display conditions. GetSymbolicLink(VirtualNodeName) Gets the symbolic link with the specified name. Declaration public VirtualSymbolicLink GetSymbolicLink(VirtualNodeName name) Parameters Type Name Description VirtualNodeName name The name of the symbolic link. Returns Type Description VirtualSymbolicLink The symbolic link with the specified name. Exceptions Type Condition VirtualNodeNotFoundException Thrown if the node is not found. InvalidOperationException Thrown if the specified node is not a symbolic link. ItemExists(VirtualNodeName) Checks whether an item with the specified name exists. Declaration public bool ItemExists(VirtualNodeName name) Parameters Type Name Description VirtualNodeName name The name of the item to check. Returns Type Description bool True if the item exists; otherwise, false. NodeExists(VirtualNodeName) Checks whether a node with the specified name exists. Declaration public bool NodeExists(VirtualNodeName name) Parameters Type Name Description VirtualNodeName name The name of the node to check. Returns Type Description bool True if the node exists; otherwise, false. Remove(VirtualNode) Removes the specified node from the directory. Declaration public void Remove(VirtualNode node) Parameters Type Name Description VirtualNode node The node to remove. Exceptions Type Condition VirtualNodeNotFoundException Thrown if the node is not found. SymbolicLinkExists(VirtualNodeName) Checks whether a symbolic link with the specified name exists. Declaration public bool SymbolicLinkExists(VirtualNodeName name) Parameters Type Name Description VirtualNodeName name The name of the symbolic link to check. Returns Type Description bool True if the symbolic link exists; otherwise, false. ToString() Returns a string representation of the directory. Declaration public override string ToString() Returns Type Description string A string representation of the directory. Overrides object.ToString() Update(VirtualNode) Updates the current directory with the data from the specified node. Declaration public override void Update(VirtualNode node) Parameters Type Name Description VirtualNode node The node used for the update. Overrides VirtualNode.Update(VirtualNode) Exceptions Type Condition ArgumentException Thrown if the specified node is not a VirtualDirectory. Operators operator +(VirtualDirectory, VirtualNode) Overloads the addition operator to add a node to the directory. Declaration public static VirtualDirectory operator +(VirtualDirectory directory, VirtualNode node) Parameters Type Name Description VirtualDirectory directory The directory to which the node is added. VirtualNode node The node to add. Returns Type Description VirtualDirectory The directory with the added node. implicit operator VirtualDirectory(VirtualNodeName) Performs an implicit conversion from VirtualNodeName to VirtualDirectory. Declaration public static implicit operator VirtualDirectory(VirtualNodeName nodeName) Parameters Type Name Description VirtualNodeName nodeName The node name to convert. Returns Type Description VirtualDirectory operator -(VirtualDirectory, VirtualNode) Overloads the subtraction operator to remove a node from the directory. Declaration public static VirtualDirectory operator -(VirtualDirectory directory, VirtualNode node) Parameters Type Name Description VirtualDirectory directory The directory from which the node is removed. VirtualNode node The node to remove. Returns Type Description VirtualDirectory The directory with the removed node. Implements IVirtualDeepCloneable<T> IEnumerable<T> IEnumerable Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T) VirtualNodeExtensions.ResolveNodeType(VirtualNode) VirtualTextFormatter.GenerateTableDebugText<T>(IEnumerable<T>) VirtualStorageExtensions.ApplySortConditions<T>(IEnumerable<T>, List<VirtualSortCondition<T>>?) VirtualStorageExtensions.GroupAndSort<T>(IEnumerable<T>, VirtualGroupCondition<T, object>?, List<VirtualSortCondition<T>>?)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualDirectoryAdapter-1.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualDirectoryAdapter-1.html",
    "title": "Class VirtualDirectoryAdapter<T> | AkiraNetwork",
    "keywords": "Class VirtualDirectoryAdapter<T> Inheritance object VirtualDirectoryAdapter<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public class VirtualDirectoryAdapter<T> Type Parameters Name Description T Constructors VirtualDirectoryAdapter(VirtualStorage<T>) Declaration public VirtualDirectoryAdapter(VirtualStorage<T> storage) Parameters Type Name Description VirtualStorage<T> storage Properties this[VirtualPath, bool] Declaration public VirtualDirectory this[VirtualPath path, bool followLinks = true] { get; set; } Parameters Type Name Description VirtualPath path bool followLinks Property Value Type Description VirtualDirectory Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualException.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualException.html",
    "title": "Class VirtualException | AkiraNetwork",
    "keywords": "Class VirtualException The base class for exceptions that occur within the virtual storage library. Inheritance object Exception VirtualException VirtualNodeNotFoundException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public abstract class VirtualException : Exception, ISerializable Constructors VirtualException() Initializes a new instance of the VirtualException class. Declaration public VirtualException() VirtualException(string) Initializes a new instance of the VirtualException class with a specified error message. Declaration public VirtualException(string message) Parameters Type Name Description string message The error message. VirtualException(string, Exception) Initializes a new instance of the VirtualException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public VirtualException(string message, Exception innerException) Parameters Type Name Description string message The error message. Exception innerException The exception that is the cause of this exception. Implements ISerializable Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualGroupCondition-2.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualGroupCondition-2.html",
    "title": "Class VirtualGroupCondition<T, TKey> | AkiraNetwork",
    "keywords": "Class VirtualGroupCondition<T, TKey> Represents the conditions for grouping data, holding the property to group by and the order (ascending or descending). Inheritance object VirtualGroupCondition<T, TKey> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public class VirtualGroupCondition<T, TKey> Type Parameters Name Description T The type of the entity to be grouped. TKey The type of the key used for grouping. Constructors VirtualGroupCondition(Expression<Func<T, TKey>>, bool) Initializes a new instance of the VirtualGroupCondition<T, TKey> class with the specified grouping property and order. Declaration public VirtualGroupCondition(Expression<Func<T, TKey>> groupBy, bool ascending = true) Parameters Type Name Description Expression<Func<T, TKey>> groupBy The property to group by. bool ascending A value indicating whether the grouping order is ascending. Properties Ascending Gets or sets a value indicating whether the grouping order is ascending. True if the order is ascending; otherwise, false. Declaration public bool Ascending { get; set; } Property Value Type Description bool A boolean value indicating whether the grouping order is ascending. GroupBy Gets or sets the property used for grouping. Declaration public Expression<Func<T, TKey>> GroupBy { get; set; } Property Value Type Description Expression<Func<T, TKey>> An expression that specifies the property to use for grouping. Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualID.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualID.html",
    "title": "Struct VirtualID | AkiraNetwork",
    "keywords": "Struct VirtualID A structure representing a unique identifier within the virtual storage library. This identifier is based on a randomly generated UUID version 4 (UUIDv4). UUIDv4 is a 128-bit value that ensures high uniqueness and has strong cryptographic properties. Implements IEquatable<VirtualID> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public readonly record struct VirtualID : IEquatable<VirtualID> Constructors VirtualID() Initializes a new instance of the VirtualID structure, generating a unique identifier. Declaration public VirtualID() Properties ID Gets the unique identifier. Declaration public Guid ID { get; } Property Value Type Description Guid A Guid value representing the unique identifier. Methods ToString() Returns a string representation of this instance's unique identifier. Declaration public override string ToString() Returns Type Description string A string that represents the unique identifier. Overrides ValueType.ToString() Implements IEquatable<T> Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualItem-1.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualItem-1.html",
    "title": "Class VirtualItem<T> | AkiraNetwork",
    "keywords": "Class VirtualItem<T> Represents a virtual item. A virtual item is an object used to manage item data within the virtual storage. It holds item data based on the user-defined type T, facilitating the management and manipulation of various types of content. Virtual items ensure that the actual data is distinctly present. If the user-defined type T implements the IVirtualDeepCloneable<T> interface, a deep clone of the item data is created, ensuring separate instances. If this interface is not implemented, shallow copies may result in multiple virtual items referencing the same instance of the item data. Inheritance object VirtualNode VirtualItem VirtualItem<T> Implements IVirtualDeepCloneable<VirtualNode> IDisposable Inherited Members VirtualNode.Name VirtualNode.CreatedDate VirtualNode.UpdatedDate VirtualNode.VID VirtualNode.IsReferencedInStorage object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public class VirtualItem<T> : VirtualItem, IVirtualDeepCloneable<VirtualNode>, IDisposable Type Parameters Name Description T The user-defined type that can be freely specified by the user of this library. Constructors VirtualItem() Initializes a new instance of the VirtualItem<T> class. The node name is automatically generated by the GenerateNodeName(string) method. Declaration public VirtualItem() VirtualItem(VirtualNodeName) Initializes a new instance of the VirtualItem<T> class. Declaration public VirtualItem(VirtualNodeName name) Parameters Type Name Description VirtualNodeName name The name of the item. VirtualItem(VirtualNodeName, T?) Initializes a new instance of the VirtualItem<T> class. Declaration public VirtualItem(VirtualNodeName name, T? itemData) Parameters Type Name Description VirtualNodeName name The name of the item. T itemData The data associated with this item. It is user-defined and can hold any type of data. VirtualItem(VirtualNodeName, T?, DateTime) Initializes a new instance of the VirtualItem<T> class. Declaration public VirtualItem(VirtualNodeName name, T? itemData, DateTime createdDate) Parameters Type Name Description VirtualNodeName name The name of the item. T itemData The data associated with this item. It is user-defined and can hold any type of data. DateTime createdDate The creation date of the item. VirtualItem(VirtualNodeName, T?, DateTime, DateTime) Initializes a new instance of the VirtualItem<T> class. Declaration public VirtualItem(VirtualNodeName name, T? itemData, DateTime createdDate, DateTime updatedDate) Parameters Type Name Description VirtualNodeName name The name of the item. T itemData The data associated with this item. It is user-defined and can hold any type of data. DateTime createdDate The creation date of the item. DateTime updatedDate The last update date of the item. Properties ItemData Gets or sets the data associated with this item. This value can be null. Declaration public T? ItemData { get; set; } Property Value Type Description T NodeType Gets the type of the node. Declaration public override VirtualNodeType NodeType { get; } Property Value Type Description VirtualNodeType Overrides VirtualNode.NodeType Methods DeepClone(bool) Creates a deep clone of this item. Declaration public override VirtualNode DeepClone(bool recursive = false) Parameters Type Name Description bool recursive If true, perform a deep clone recursively. Returns Type Description VirtualNode A deep clone of the current item as a VirtualNode. Overrides VirtualItem.DeepClone(bool) Dispose() Releases the resources used by the VirtualItem<T>. Declaration public void Dispose() Dispose(bool) Releases the unmanaged resources used by the VirtualItem<T> and optionally releases the managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. ~VirtualItem() Finalizer for the VirtualItem<T> class. Declaration protected ~VirtualItem() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString() Update(VirtualNode) Updates the current item with the specified node's data. Declaration public override void Update(VirtualNode node) Parameters Type Name Description VirtualNode node The node containing the data to update. Overrides VirtualNode.Update(VirtualNode) Exceptions Type Condition ArgumentException Thrown if the specified node is not of the same type as the current item. Operators implicit operator VirtualItem<T>(VirtualNodeName) Implicitly converts the specified node name to a VirtualItem<T>. Declaration public static implicit operator VirtualItem<T>(VirtualNodeName name) Parameters Type Name Description VirtualNodeName name The name of the node. Returns Type Description VirtualItem<T> A VirtualItem<T> initialized with the specified node name. implicit operator VirtualItem<T>((VirtualNodeName nodeName, T? itemData)) Converts a tuple (nodeName, itemData) to a VirtualItem<T>. Declaration public static implicit operator VirtualItem<T>((VirtualNodeName nodeName, T? itemData) tuple) Parameters Type Name Description (VirtualNodeName nodeName, T itemData) tuple A tuple containing the node name and item data. Returns Type Description VirtualItem<T> A VirtualItem<T> initialized with the specified values. implicit operator VirtualItem<T>(T?) Implicitly converts the specified data of type T to a VirtualItem<T>. The node name is automatically generated by the GenerateNodeName(string) method. Declaration public static implicit operator VirtualItem<T>(T? itemData) Parameters Type Name Description T itemData The data associated with this item. It is user-defined and can hold any type of data. Returns Type Description VirtualItem<T> A VirtualItem<T> initialized with the specified data. Implements IVirtualDeepCloneable<T> IDisposable Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T) VirtualNodeExtensions.ResolveNodeType(VirtualNode)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualItem.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualItem.html",
    "title": "Class VirtualItem | AkiraNetwork",
    "keywords": "Class VirtualItem Represents a virtual item. This class serves as the base class for the VirtualItem<T> type and is used solely for type checking of VirtualItem. Inheritance object VirtualNode VirtualItem VirtualItem<T> Implements IVirtualDeepCloneable<VirtualNode> Inherited Members VirtualNode.Name VirtualNode.CreatedDate VirtualNode.UpdatedDate VirtualNode.NodeType VirtualNode.VID VirtualNode.Update(VirtualNode) VirtualNode.IsReferencedInStorage object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public abstract class VirtualItem : VirtualNode, IVirtualDeepCloneable<VirtualNode> Constructors VirtualItem(VirtualNodeName) Initializes a new instance of the VirtualItem class. Declaration protected VirtualItem(VirtualNodeName name) Parameters Type Name Description VirtualNodeName name The name of the item. VirtualItem(VirtualNodeName, DateTime) Initializes a new instance of the VirtualItem class. Declaration protected VirtualItem(VirtualNodeName name, DateTime createdDate) Parameters Type Name Description VirtualNodeName name The name of the item. DateTime createdDate The creation date of the item. VirtualItem(VirtualNodeName, DateTime, DateTime) Initializes a new instance of the VirtualItem class. Declaration protected VirtualItem(VirtualNodeName name, DateTime createdDate, DateTime updatedDate) Parameters Type Name Description VirtualNodeName name The name of the item. DateTime createdDate The creation date of the item. DateTime updatedDate The last update date of the item. Methods DeepClone(bool) Creates a deep clone of this item. If the data of type T held by the item implements the IVirtualDeepCloneable<T> interface, the DeepClone method of the data type is called. Declaration public override abstract VirtualNode DeepClone(bool recursive = false) Parameters Type Name Description bool recursive In the case of items, this parameter is ignored. Returns Type Description VirtualNode A deep clone of the current item as a VirtualNode. Overrides VirtualNode.DeepClone(bool) Implements IVirtualDeepCloneable<T> Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T) VirtualNodeExtensions.ResolveNodeType(VirtualNode)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualItemAdapter-1.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualItemAdapter-1.html",
    "title": "Class VirtualItemAdapter<T> | AkiraNetwork",
    "keywords": "Class VirtualItemAdapter<T> Inheritance object VirtualItemAdapter<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public class VirtualItemAdapter<T> Type Parameters Name Description T Constructors VirtualItemAdapter(VirtualStorage<T>) Declaration public VirtualItemAdapter(VirtualStorage<T> storage) Parameters Type Name Description VirtualStorage<T> storage Properties this[VirtualPath, bool] Declaration public VirtualItem<T> this[VirtualPath path, bool followLinks = true] { get; set; } Parameters Type Name Description VirtualPath path bool followLinks Property Value Type Description VirtualItem<T> Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualNode.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualNode.html",
    "title": "Class VirtualNode | AkiraNetwork",
    "keywords": "Class VirtualNode Represents an abstract class for nodes. Inheritance object VirtualNode VirtualDirectory VirtualItem VirtualSymbolicLink Implements IVirtualDeepCloneable<VirtualNode> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public abstract class VirtualNode : IVirtualDeepCloneable<VirtualNode> Constructors VirtualNode(VirtualNodeName) Initializes a new instance of the VirtualNode class. Declaration protected VirtualNode(VirtualNodeName name) Parameters Type Name Description VirtualNodeName name The name of node. VirtualNode(VirtualNodeName, DateTime) Initializes a new instance of the VirtualNode class. Declaration protected VirtualNode(VirtualNodeName name, DateTime createdDate) Parameters Type Name Description VirtualNodeName name The name of node. DateTime createdDate The created date of node. VirtualNode(VirtualNodeName, DateTime, DateTime) Initializes a new instance of the VirtualNode class. Declaration protected VirtualNode(VirtualNodeName name, DateTime createdDate, DateTime updatedDate) Parameters Type Name Description VirtualNodeName name The name of node. DateTime createdDate The created date of node. DateTime updatedDate The updated date of node. Properties CreatedDate Gets the created date of the node. This date represents when the node was first created. Declaration public DateTime CreatedDate { get; } Property Value Type Description DateTime IsReferencedInStorage Gets a value indicating whether referenced in storage. If this property is true, the node is referenced from storage. Otherwise, it is not. Declaration public bool IsReferencedInStorage { get; } Property Value Type Description bool Name Gets the name of node. Declaration public VirtualNodeName Name { get; } Property Value Type Description VirtualNodeName NodeType Gets the node type of node. Declaration public abstract VirtualNodeType NodeType { get; } Property Value Type Description VirtualNodeType UpdatedDate Gets the updated date of the node. This date represents the last time the node was modified. It is set to the current date and time at the moment of instantiation or cloning. Declaration public DateTime UpdatedDate { get; } Property Value Type Description DateTime VID Gets the VID of node. Declaration public VirtualID VID { get; } Property Value Type Description VirtualID Methods DeepClone(bool) Creates a deep clone of the entity. However, the CreatedDate and UpdatedDate should not be cloned as they are set to the current date and time at the time of cloning. Declaration public abstract VirtualNode DeepClone(bool recursive = false) Parameters Type Name Description bool recursive When true, all child nodes are also cloned, creating a deep copy of the entire tree. The default is false. The CreatedDate and UpdatedDate properties are not preserved. They are set to the current date and time at the moment of instantiation or cloning. Returns Type Description VirtualNode Cloned VirtualNode instance Update(VirtualNode) Updates the VirtualNode. Declaration public abstract void Update(VirtualNode node) Parameters Type Name Description VirtualNode node Value to update Implements IVirtualDeepCloneable<T> Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T) VirtualNodeExtensions.ResolveNodeType(VirtualNode)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualNodeContext.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualNodeContext.html",
    "title": "Class VirtualNodeContext | AkiraNetwork",
    "keywords": "Class VirtualNodeContext A class that holds context information for a node. It is returned during or after path traversal, providing information about the node, path, parent directory, depth, index, resolved path, and symbolic link. Inheritance object VirtualNodeContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public class VirtualNodeContext Constructors VirtualNodeContext(VirtualNode?, VirtualPath, VirtualDirectory?, int, int, VirtualPath?, bool, VirtualSymbolicLink?) Initializes a new instance of the VirtualNodeContext class. Declaration public VirtualNodeContext(VirtualNode? node, VirtualPath traversalPath, VirtualDirectory? parentNode = null, int depth = 0, int index = 0, VirtualPath? resolvedPath = null, bool resolved = false, VirtualSymbolicLink? resolvedLink = null) Parameters Type Name Description VirtualNode node The node being traversed. VirtualPath traversalPath The path used for node traversal. VirtualDirectory parentNode The parent directory of the node. int depth The depth of the node. The root is considered 0. int index The index of the node. Corresponds to the enumeration order within the directory. VirtualPath resolvedPath The result of resolving a symbolic link. bool resolved Indicates whether the symbolic link has been resolved. VirtualSymbolicLink resolvedLink The resolved symbolic link. Properties Depth Gets the depth of the node and can only be set within the assembly. The root is considered 0. Declaration public int Depth { get; } Property Value Type Description int The depth of the node. Index Gets the index of the node and can only be set within the assembly. This is the index corresponding to the enumeration order within the directory. Declaration public int Index { get; } Property Value Type Description int The index of the node. Node Gets the node and can only be set within the assembly. Declaration public VirtualNode? Node { get; } Property Value Type Description VirtualNode The current node. ParentDirectory Gets the parent directory of the node and can only be set within the assembly. Declaration public VirtualDirectory? ParentDirectory { get; } Property Value Type Description VirtualDirectory The instance of the parent directory. Resolved Gets a value indicating whether the symbolic link has been resolved and can only be set within the assembly. Declaration public bool Resolved { get; } Property Value Type Description bool True if the link is resolved; otherwise, false. ResolvedLink Gets the resolved symbolic link and can only be set within the assembly. Declaration public VirtualSymbolicLink? ResolvedLink { get; } Property Value Type Description VirtualSymbolicLink The resolved symbolic link, or null. ResolvedPath Gets the resolved path and can only be set within the assembly. This represents the result of resolving a symbolic link. Declaration public VirtualPath? ResolvedPath { get; } Property Value Type Description VirtualPath The resolved path, or null. TraversalPath Gets the traversal path and can only be set within the assembly. Declaration public VirtualPath TraversalPath { get; } Property Value Type Description VirtualPath The path used for node traversal. Methods ToString() Returns a string representation of this instance's information. Declaration public override string ToString() Returns Type Description string A string representing this instance's information. Overrides object.ToString() Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualNodeExtensions.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualNodeExtensions.html",
    "title": "Class VirtualNodeExtensions | AkiraNetwork",
    "keywords": "Class VirtualNodeExtensions Provides extension methods for operations on virtual nodes in the Virtual Storage Library. Inheritance object VirtualNodeExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public static class VirtualNodeExtensions Methods ResolveNodeType(VirtualNode) Resolves the type of the specified virtual node. If the node is a symbolic link, returns the type of the target node. Otherwise, returns the type of the node itself. Declaration public static VirtualNodeType ResolveNodeType(this VirtualNode node) Parameters Type Name Description VirtualNode node The virtual node to resolve the type for. Returns Type Description VirtualNodeType The type of the node or, if the node is a symbolic link, the type of the target node."
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualNodeListConditions.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualNodeListConditions.html",
    "title": "Struct VirtualNodeListConditions | AkiraNetwork",
    "keywords": "Struct VirtualNodeListConditions Represents the conditions for creating a list of virtual nodes. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public struct VirtualNodeListConditions Constructors VirtualNodeListConditions() Initializes a new instance of the VirtualNodeListConditions class with default conditions. Declaration public VirtualNodeListConditions() VirtualNodeListConditions(VirtualNodeTypeFilter, VirtualGroupCondition<VirtualNode, object>?, List<VirtualSortCondition<VirtualNode>>?) Initializes a new instance of the VirtualNodeListConditions class with the specified conditions. Declaration public VirtualNodeListConditions(VirtualNodeTypeFilter filter, VirtualGroupCondition<VirtualNode, object>? groupCondition, List<VirtualSortCondition<VirtualNode>>? sortConditions) Parameters Type Name Description VirtualNodeTypeFilter filter The filter criteria for the virtual nodes. VirtualGroupCondition<VirtualNode, object> groupCondition The grouping condition for the virtual nodes. List<VirtualSortCondition<VirtualNode>> sortConditions The sorting conditions for the virtual nodes. Properties Filter Specifies the filter criteria, determining which types of virtual nodes to include. Declaration public VirtualNodeTypeFilter Filter { readonly get; set; } Property Value Type Description VirtualNodeTypeFilter The filter specifying the types of virtual nodes. The default value is All. GroupCondition Specifies the grouping condition, determining how to group the virtual nodes. Declaration public VirtualGroupCondition<VirtualNode, object>? GroupCondition { readonly get; set; } Property Value Type Description VirtualGroupCondition<VirtualNode, object> The condition for grouping virtual nodes. The default value is null. You can specify null if no grouping condition is needed. SortConditions Specifies the sorting conditions, determining the order in which the virtual nodes are arranged. Declaration public List<VirtualSortCondition<VirtualNode>>? SortConditions { readonly get; set; } Property Value Type Description List<VirtualSortCondition<VirtualNode>> A list of conditions for sorting the virtual nodes. The default value is null. You can specify null if no sorting condition is needed. Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualNodeName.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualNodeName.html",
    "title": "Class VirtualNodeName | AkiraNetwork",
    "keywords": "Class VirtualNodeName Represents the name of a virtual node. This class handles the generation, validation, and comparison of node names. Inheritance object VirtualNodeName Implements IEquatable<VirtualNodeName> IComparable<VirtualNodeName> IComparable Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public class VirtualNodeName : IEquatable<VirtualNodeName>, IComparable<VirtualNodeName>, IComparable Constructors VirtualNodeName(string) Initializes a new instance of the VirtualNodeName class with the specified name. Declaration public VirtualNodeName(string name) Parameters Type Name Description string name The name of the node. Properties IsRoot Indicates whether the node is the root node. Declaration public bool IsRoot { get; } Property Value Type Description bool true if this is the root node; otherwise, false. Name Gets the name of the node. Declaration public string Name { get; } Property Value Type Description string The name of this node. Methods CompareTo(VirtualNodeName?) Compares this instance with a specified VirtualNodeName. Declaration public int CompareTo(VirtualNodeName? other) Parameters Type Name Description VirtualNodeName other The VirtualNodeName to compare with. Returns Type Description int A value indicating the relative order of the instances being compared. CompareTo(object?) Compares this instance with a specified object. Declaration public int CompareTo(object? obj) Parameters Type Name Description object obj The object to compare with. Returns Type Description int A value indicating the relative order of the instances being compared. Exceptions Type Condition ArgumentException Thrown when the object is not a VirtualNodeName. Equals(VirtualNodeName?) Determines whether the specified VirtualNodeName is equal to this instance. Declaration public bool Equals(VirtualNodeName? other) Parameters Type Name Description VirtualNodeName other The VirtualNodeName to compare with this instance. Returns Type Description bool true if the specified VirtualNodeName is equal to this instance; otherwise, false. Equals(object?) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides object.Equals(object) GenerateNodeName(string) Generates a new node name using the specified prefix. Declaration public static VirtualNodeName GenerateNodeName(string prefix) Parameters Type Name Description string prefix The prefix for the node name. Returns Type Description VirtualNodeName The generated node name. Remarks The current implementation may be improved for better usability, including a possible re-implementation of the node name generation. Users are advised to check for updates in the documentation regularly. Exceptions Type Condition ArgumentException Thrown when the prefix is an empty string. GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance. Overrides object.GetHashCode() IsValidNodeName(VirtualNodeName) Checks if a node name is valid. Declaration public static bool IsValidNodeName(VirtualNodeName nodeName) Parameters Type Name Description VirtualNodeName nodeName The node name to check. Returns Type Description bool true if the node name is valid; otherwise, false. ResetCounter() Resets the counter used for node name generation. Declaration public static void ResetCounter() ToString() Returns the name of the node as a string. Declaration public override string ToString() Returns Type Description string The name of the node as a string. Overrides object.ToString() Operators operator ==(VirtualNodeName?, VirtualNodeName?) Determines whether two VirtualNodeName instances are equal. Declaration public static bool operator ==(VirtualNodeName? left, VirtualNodeName? right) Parameters Type Name Description VirtualNodeName left The left VirtualNodeName to compare. VirtualNodeName right The right VirtualNodeName to compare. Returns Type Description bool true if the specified instances are equal; otherwise, false. implicit operator string(VirtualNodeName) Implicitly converts a VirtualNodeName to a string. Declaration public static implicit operator string(VirtualNodeName nodeName) Parameters Type Name Description VirtualNodeName nodeName The VirtualNodeName to convert. Returns Type Description string implicit operator VirtualNodeName(string) Implicitly converts a string to a VirtualNodeName. Declaration public static implicit operator VirtualNodeName(string name) Parameters Type Name Description string name The string to convert. Returns Type Description VirtualNodeName operator !=(VirtualNodeName?, VirtualNodeName?) Determines whether two VirtualNodeName instances are not equal. Declaration public static bool operator !=(VirtualNodeName? left, VirtualNodeName? right) Parameters Type Name Description VirtualNodeName left The left VirtualNodeName to compare. VirtualNodeName right The right VirtualNodeName to compare. Returns Type Description bool true if the specified instances are not equal; otherwise, false. Implements IEquatable<T> IComparable<T> IComparable Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualNodeNotFoundException.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualNodeNotFoundException.html",
    "title": "Class VirtualNodeNotFoundException | AkiraNetwork",
    "keywords": "Class VirtualNodeNotFoundException The exception that is thrown when a node is not found in the virtual storage. Inheritance object Exception VirtualException VirtualNodeNotFoundException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public class VirtualNodeNotFoundException : VirtualException, ISerializable Constructors VirtualNodeNotFoundException() Initializes a new instance of the VirtualNodeNotFoundException class. Declaration public VirtualNodeNotFoundException() VirtualNodeNotFoundException(string) Initializes a new instance of the VirtualNodeNotFoundException class with a specified error message. Declaration public VirtualNodeNotFoundException(string message) Parameters Type Name Description string message The error message. VirtualNodeNotFoundException(string, Exception) Initializes a new instance of the VirtualNodeNotFoundException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public VirtualNodeNotFoundException(string message, Exception innerException) Parameters Type Name Description string message The error message. Exception innerException The exception that is the cause of this exception. Implements ISerializable Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualNodeType.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualNodeType.html",
    "title": "Enum VirtualNodeType | AkiraNetwork",
    "keywords": "Enum VirtualNodeType Specifies the types of virtual nodes. Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public enum VirtualNodeType Fields Name Description Directory Represents a directory node. Item Represents an item node with a user-defined type T. None Represents an unspecified or unknown node type. SymbolicLink Represents a symbolic link node. Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<VirtualNodeType>(VirtualNodeType)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter.html",
    "title": "Enum VirtualNodeTypeFilter | AkiraNetwork",
    "keywords": "Enum VirtualNodeTypeFilter Specifies the filters for virtual node types. Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public enum VirtualNodeTypeFilter Fields Name Description All Filter for all node types. Directory Filter for directory nodes. Item Filter for item nodes with a user-defined type T. None No specific node type is specified. SymbolicLink Filter for symbolic link nodes. Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<VirtualNodeTypeFilter>(VirtualNodeTypeFilter)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualPath.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualPath.html",
    "title": "Class VirtualPath | AkiraNetwork",
    "keywords": "Class VirtualPath Inheritance object VirtualPath Implements IEquatable<VirtualPath> IComparable<VirtualPath> IComparable Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public class VirtualPath : IEquatable<VirtualPath>, IComparable<VirtualPath>, IComparable Constructors VirtualPath(IEnumerable<VirtualNodeName>) Declaration public VirtualPath(IEnumerable<VirtualNodeName> parts) Parameters Type Name Description IEnumerable<VirtualNodeName> parts VirtualPath(string) Declaration public VirtualPath(string path) Parameters Type Name Description string path Properties BaseDepth Declaration public int BaseDepth { get; } Property Value Type Description int Depth Declaration public int Depth { get; } Property Value Type Description int DirectoryPath Declaration public VirtualPath DirectoryPath { get; } Property Value Type Description VirtualPath Dot Declaration public static string Dot { get; } Property Value Type Description string DotDot Declaration public static string DotDot { get; } Property Value Type Description string FixedPath Declaration public VirtualPath FixedPath { get; } Property Value Type Description VirtualPath IsAbsolute Declaration public bool IsAbsolute { get; } Property Value Type Description bool IsDot Declaration public bool IsDot { get; } Property Value Type Description bool IsDotDot Declaration public bool IsDotDot { get; } Property Value Type Description bool IsEmpty Declaration public bool IsEmpty { get; } Property Value Type Description bool IsEndsWithSlash Declaration public bool IsEndsWithSlash { get; } Property Value Type Description bool IsRoot Declaration public bool IsRoot { get; } Property Value Type Description bool NodeName Declaration public VirtualNodeName NodeName { get; } Property Value Type Description VirtualNodeName PartsList Declaration public List<VirtualNodeName> PartsList { get; } Property Value Type Description List<VirtualNodeName> Path Declaration public string Path { get; } Property Value Type Description string Root Declaration public static string Root { get; } Property Value Type Description string Separator Declaration public static char Separator { get; } Property Value Type Description char Methods AddEndSlash() Declaration public VirtualPath AddEndSlash() Returns Type Description VirtualPath AddStartSlash() Declaration public VirtualPath AddStartSlash() Returns Type Description VirtualPath ArePathsSubdirectories(VirtualPath, VirtualPath) Declaration public static bool ArePathsSubdirectories(VirtualPath path1, VirtualPath path2) Parameters Type Name Description VirtualPath path1 VirtualPath path2 Returns Type Description bool Combine(params VirtualPath[]) Declaration public VirtualPath Combine(params VirtualPath[] paths) Parameters Type Name Description VirtualPath[] paths Returns Type Description VirtualPath Combine(params string[]) Declaration public static string Combine(params string[] paths) Parameters Type Name Description string[] paths Returns Type Description string CombineFromIndex(VirtualPath, int) Declaration public VirtualPath CombineFromIndex(VirtualPath path, int index) Parameters Type Name Description VirtualPath path int index Returns Type Description VirtualPath CompareTo(VirtualPath?) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(VirtualPath? other) Parameters Type Name Description VirtualPath other An object to compare with this instance. Returns Type Description int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. CompareTo(object?) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(object? obj) Parameters Type Name Description object obj An object to compare with this instance. Returns Type Description int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes obj in the sort order. Zero This instance occurs in the same position in the sort order as obj. Greater than zero This instance follows obj in the sort order. Exceptions Type Condition ArgumentException obj is not the same type as this instance. Equals(VirtualPath?) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(VirtualPath? other) Parameters Type Name Description VirtualPath other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides object.Equals(object) GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description int A hash code for the current object. Overrides object.GetHashCode() GetNodeName() Declaration public VirtualNodeName GetNodeName() Returns Type Description VirtualNodeName GetParentPath() Declaration public VirtualPath GetParentPath() Returns Type Description VirtualPath GetPartsLinkedList() Declaration public LinkedList<VirtualNodeName> GetPartsLinkedList() Returns Type Description LinkedList<VirtualNodeName> GetPartsList() Declaration public List<VirtualNodeName> GetPartsList() Returns Type Description List<VirtualNodeName> GetRelativePath(VirtualPath) Declaration public VirtualPath GetRelativePath(VirtualPath basePath) Parameters Type Name Description VirtualPath basePath Returns Type Description VirtualPath IsSubdirectory(VirtualPath) Declaration public bool IsSubdirectory(VirtualPath parentPath) Parameters Type Name Description VirtualPath parentPath Returns Type Description bool NormalizePath() Declaration public VirtualPath NormalizePath() Returns Type Description VirtualPath NormalizePath(string) Declaration public static string NormalizePath(string path) Parameters Type Name Description string path Returns Type Description string StartsWith(VirtualPath) Declaration public bool StartsWith(VirtualPath path) Parameters Type Name Description VirtualPath path Returns Type Description bool ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString() TrimEndSlash() Declaration public VirtualPath TrimEndSlash() Returns Type Description VirtualPath Operators operator +(VirtualPath, VirtualNodeName) Declaration public static VirtualPath operator +(VirtualPath path, VirtualNodeName nodeName) Parameters Type Name Description VirtualPath path VirtualNodeName nodeName Returns Type Description VirtualPath operator +(VirtualPath, VirtualPath) Declaration public static VirtualPath operator +(VirtualPath path1, VirtualPath path2) Parameters Type Name Description VirtualPath path1 VirtualPath path2 Returns Type Description VirtualPath operator +(VirtualPath, char) Declaration public static VirtualPath operator +(VirtualPath path, char chr) Parameters Type Name Description VirtualPath path char chr Returns Type Description VirtualPath operator +(VirtualPath, string) Declaration public static VirtualPath operator +(VirtualPath path, string str) Parameters Type Name Description VirtualPath path string str Returns Type Description VirtualPath operator +(char, VirtualPath) Declaration public static VirtualPath operator +(char chr, VirtualPath path) Parameters Type Name Description char chr VirtualPath path Returns Type Description VirtualPath operator +(string, VirtualPath) Declaration public static VirtualPath operator +(string str, VirtualPath path) Parameters Type Name Description string str VirtualPath path Returns Type Description VirtualPath operator ==(VirtualPath?, VirtualPath?) Declaration public static bool operator ==(VirtualPath? left, VirtualPath? right) Parameters Type Name Description VirtualPath left VirtualPath right Returns Type Description bool implicit operator string(VirtualPath?) Declaration public static implicit operator string(VirtualPath? virtualPath) Parameters Type Name Description VirtualPath virtualPath Returns Type Description string implicit operator VirtualPath(string) Declaration public static implicit operator VirtualPath(string path) Parameters Type Name Description string path Returns Type Description VirtualPath operator !=(VirtualPath?, VirtualPath?) Declaration public static bool operator !=(VirtualPath? left, VirtualPath? right) Parameters Type Name Description VirtualPath left VirtualPath right Returns Type Description bool Implements IEquatable<T> IComparable<T> IComparable Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualSortCondition-1.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualSortCondition-1.html",
    "title": "Class VirtualSortCondition<T> | AkiraNetwork",
    "keywords": "Class VirtualSortCondition<T> Represents the conditions for sorting data, holding the property to sort by and the order (ascending or descending). Inheritance object VirtualSortCondition<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public class VirtualSortCondition<T> Type Parameters Name Description T The type of the entity to be sorted. Constructors VirtualSortCondition(Expression<Func<T, object>>, bool) Initializes a new instance of the VirtualSortCondition<T> class with the specified sorting property and order. Declaration public VirtualSortCondition(Expression<Func<T, object>> sortBy, bool ascending = true) Parameters Type Name Description Expression<Func<T, object>> sortBy The property to sort by. bool ascending A value indicating whether the sorting order is ascending. Properties Ascending Gets or sets a value indicating whether the sorting order is ascending. True if the order is ascending; otherwise, false. Declaration public bool Ascending { get; set; } Property Value Type Description bool A boolean value indicating whether the sorting order is ascending. SortBy Gets or sets the property used for sorting. Declaration public Expression<Func<T, object>> SortBy { get; set; } Property Value Type Description Expression<Func<T, object>> An expression that specifies the property to use for sorting. Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.WalkPathToTargetParameters.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.WalkPathToTargetParameters.html",
    "title": "Struct VirtualStorage<T>.WalkPathToTargetParameters | AkiraNetwork",
    "keywords": "Struct VirtualStorage<T>.WalkPathToTargetParameters Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax private struct VirtualStorage<T>.WalkPathToTargetParameters Constructors WalkPathToTargetParameters(VirtualPath, int, VirtualPath, VirtualPath?, VirtualDirectory, NotifyNodeDelegate?, ActionNodeDelegate?, bool, bool, bool) Declaration public WalkPathToTargetParameters(VirtualPath targetPath, int traversalIndex, VirtualPath traversalPath, VirtualPath? resolvedPath, VirtualDirectory traversalDirectory, NotifyNodeDelegate? notifyNode, ActionNodeDelegate? actionNode, bool followLinks, bool exceptionEnabled, bool resolved) Parameters Type Name Description VirtualPath targetPath int traversalIndex VirtualPath traversalPath VirtualPath resolvedPath VirtualDirectory traversalDirectory NotifyNodeDelegate notifyNode ActionNodeDelegate actionNode bool followLinks bool exceptionEnabled bool resolved Properties ActionNode Declaration public ActionNodeDelegate? ActionNode { readonly get; set; } Property Value Type Description ActionNodeDelegate ExceptionEnabled Declaration public bool ExceptionEnabled { readonly get; set; } Property Value Type Description bool FollowLinks Declaration public bool FollowLinks { readonly get; set; } Property Value Type Description bool NotifyNode Declaration public NotifyNodeDelegate? NotifyNode { readonly get; set; } Property Value Type Description NotifyNodeDelegate Resolved Declaration public bool Resolved { readonly get; set; } Property Value Type Description bool ResolvedPath Declaration public VirtualPath? ResolvedPath { readonly get; set; } Property Value Type Description VirtualPath TargetPath Declaration public VirtualPath TargetPath { readonly get; set; } Property Value Type Description VirtualPath TraversalDirectory Declaration public VirtualDirectory TraversalDirectory { readonly get; set; } Property Value Type Description VirtualDirectory TraversalIndex Declaration public int TraversalIndex { readonly get; set; } Property Value Type Description int TraversalPath Declaration public VirtualPath TraversalPath { readonly get; set; } Property Value Type Description VirtualPath Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.WalkPathTreeParameters.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.WalkPathTreeParameters.html",
    "title": "Struct VirtualStorage<T>.WalkPathTreeParameters | AkiraNetwork",
    "keywords": "Struct VirtualStorage<T>.WalkPathTreeParameters Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax private struct VirtualStorage<T>.WalkPathTreeParameters Constructors WalkPathTreeParameters(VirtualPath, VirtualPath, VirtualNode, VirtualDirectory?, int, int, int, VirtualNodeTypeFilter, bool, bool, List<string>?, VirtualSymbolicLink?) Declaration public WalkPathTreeParameters(VirtualPath basePath, VirtualPath currentPath, VirtualNode baseNode, VirtualDirectory? parentDirectory, int baseDepth, int currentDepth, int currentIndex, VirtualNodeTypeFilter filter, bool recursive, bool followLinks, List<string>? patternList, VirtualSymbolicLink? resolvedLink) Parameters Type Name Description VirtualPath basePath VirtualPath currentPath VirtualNode baseNode VirtualDirectory parentDirectory int baseDepth int currentDepth int currentIndex VirtualNodeTypeFilter filter bool recursive bool followLinks List<string> patternList VirtualSymbolicLink resolvedLink Properties BaseDepth Declaration public int BaseDepth { readonly get; set; } Property Value Type Description int BaseNode Declaration public VirtualNode BaseNode { readonly get; set; } Property Value Type Description VirtualNode BasePath Declaration public VirtualPath BasePath { readonly get; set; } Property Value Type Description VirtualPath CurrentDepth Declaration public int CurrentDepth { readonly get; set; } Property Value Type Description int CurrentIndex Declaration public int CurrentIndex { readonly get; set; } Property Value Type Description int CurrentPath Declaration public VirtualPath CurrentPath { readonly get; set; } Property Value Type Description VirtualPath Filter Declaration public VirtualNodeTypeFilter Filter { readonly get; set; } Property Value Type Description VirtualNodeTypeFilter FollowLinks Declaration public bool FollowLinks { readonly get; set; } Property Value Type Description bool ParentDirectory Declaration public VirtualDirectory? ParentDirectory { readonly get; set; } Property Value Type Description VirtualDirectory PatternList Declaration public List<string>? PatternList { readonly get; set; } Property Value Type Description List<string> Recursive Declaration public bool Recursive { readonly get; set; } Property Value Type Description bool ResolvedLink Declaration public VirtualSymbolicLink? ResolvedLink { readonly get; set; } Property Value Type Description VirtualSymbolicLink Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html",
    "title": "Class VirtualStorage<T> | AkiraNetwork",
    "keywords": "Class VirtualStorage<T> Inheritance object VirtualStorage<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public class VirtualStorage<T> Type Parameters Name Description T Constructors VirtualStorage() Declaration public VirtualStorage() Properties CurrentPath Declaration public VirtualPath CurrentPath { get; } Property Value Type Description VirtualPath CycleDetectorForTarget Declaration public VirtualCycleDetector CycleDetectorForTarget { get; } Property Value Type Description VirtualCycleDetector CycleDetectorForTree Declaration public VirtualCycleDetector CycleDetectorForTree { get; } Property Value Type Description VirtualCycleDetector Dir Declaration public VirtualDirectoryAdapter<T> Dir { get; } Property Value Type Description VirtualDirectoryAdapter<T> this[VirtualPath, bool] Declaration public VirtualNode this[VirtualPath path, bool followLinks = true] { get; set; } Parameters Type Name Description VirtualPath path bool followLinks Property Value Type Description VirtualNode Item Declaration public VirtualItemAdapter<T> Item { get; } Property Value Type Description VirtualItemAdapter<T> Link Declaration public VirtualSymbolicLinkAdapter<T> Link { get; } Property Value Type Description VirtualSymbolicLinkAdapter<T> LinkDictionary Declaration public Dictionary<VirtualPath, HashSet<VirtualPath>> LinkDictionary { get; } Property Value Type Description Dictionary<VirtualPath, HashSet<VirtualPath>> Root Declaration public VirtualDirectory Root { get; } Property Value Type Description VirtualDirectory Methods AddDirectory(VirtualPath, VirtualDirectory, bool) Declaration public void AddDirectory(VirtualPath directoryPath, VirtualDirectory directory, bool createSubdirectories = false) Parameters Type Name Description VirtualPath directoryPath VirtualDirectory directory bool createSubdirectories AddDirectory(VirtualPath, bool) Declaration public void AddDirectory(VirtualPath path, bool createSubdirectories = false) Parameters Type Name Description VirtualPath path bool createSubdirectories AddItem(VirtualPath, VirtualItem<T>, bool) Declaration public void AddItem(VirtualPath itemDirectoryPath, VirtualItem<T> item, bool overwrite = false) Parameters Type Name Description VirtualPath itemDirectoryPath VirtualItem<T> item bool overwrite AddItem(VirtualPath, T?, bool) Declaration public void AddItem(VirtualPath itemPath, T? data = default, bool overwrite = false) Parameters Type Name Description VirtualPath itemPath T data bool overwrite AddLinkToDictionary(VirtualPath, VirtualPath) Declaration public void AddLinkToDictionary(VirtualPath targetPath, VirtualPath linkPath) Parameters Type Name Description VirtualPath targetPath VirtualPath linkPath AddNode(VirtualPath, VirtualNode, bool) Declaration public void AddNode(VirtualPath nodeDirectoryPath, VirtualNode node, bool overwrite = false) Parameters Type Name Description VirtualPath nodeDirectoryPath VirtualNode node bool overwrite AddSymbolicLink(VirtualPath, VirtualPath?, bool) Declaration public void AddSymbolicLink(VirtualPath linkPath, VirtualPath? targetPath = null, bool overwrite = false) Parameters Type Name Description VirtualPath linkPath VirtualPath targetPath bool overwrite AddSymbolicLink(VirtualPath, VirtualSymbolicLink, bool) Declaration public void AddSymbolicLink(VirtualPath linkDirectoryPath, VirtualSymbolicLink link, bool overwrite = false) Parameters Type Name Description VirtualPath linkDirectoryPath VirtualSymbolicLink link bool overwrite ChangeDirectory(VirtualPath) Declaration public void ChangeDirectory(VirtualPath path) Parameters Type Name Description VirtualPath path ConvertToAbsolutePath(VirtualPath?, VirtualPath?) Declaration public VirtualPath ConvertToAbsolutePath(VirtualPath? relativePath, VirtualPath? basePath = null) Parameters Type Name Description VirtualPath relativePath VirtualPath basePath Returns Type Description VirtualPath CopyNode(VirtualPath, VirtualPath, bool, bool, bool, List<VirtualNodeContext>?) Declaration public void CopyNode(VirtualPath sourcePath, VirtualPath destinationPath, bool overwrite = false, bool recursive = false, bool followLinks = false, List<VirtualNodeContext>? destinationContextList = null) Parameters Type Name Description VirtualPath sourcePath VirtualPath destinationPath bool overwrite bool recursive bool followLinks List<VirtualNodeContext> destinationContextList DirectoryExists(VirtualPath, bool) Declaration public bool DirectoryExists(VirtualPath path, bool followLinks = false) Parameters Type Name Description VirtualPath path bool followLinks Returns Type Description bool ExpandPath(VirtualPath, VirtualNodeTypeFilter, bool, bool) Declaration public IEnumerable<VirtualPath> ExpandPath(VirtualPath path, VirtualNodeTypeFilter filter = VirtualNodeTypeFilter.All, bool followLinks = true, bool resolveLinks = true) Parameters Type Name Description VirtualPath path VirtualNodeTypeFilter filter bool followLinks bool resolveLinks Returns Type Description IEnumerable<VirtualPath> ExpandPathTree(VirtualPath, VirtualNodeTypeFilter, bool, bool) Declaration public IEnumerable<VirtualNodeContext> ExpandPathTree(VirtualPath path, VirtualNodeTypeFilter filter = VirtualNodeTypeFilter.All, bool followLinks = true, bool resolveLinks = true) Parameters Type Name Description VirtualPath path VirtualNodeTypeFilter filter bool followLinks bool resolveLinks Returns Type Description IEnumerable<VirtualNodeContext> GetDirectory(VirtualPath, bool) Declaration public VirtualDirectory GetDirectory(VirtualPath path, bool followLinks = false) Parameters Type Name Description VirtualPath path bool followLinks Returns Type Description VirtualDirectory GetItem(VirtualPath, bool) Declaration public VirtualItem<T> GetItem(VirtualPath path, bool followLinks = false) Parameters Type Name Description VirtualPath path bool followLinks Returns Type Description VirtualItem<T> GetLinksFromDictionary(VirtualPath) Declaration public HashSet<VirtualPath> GetLinksFromDictionary(VirtualPath targetPath) Parameters Type Name Description VirtualPath targetPath Returns Type Description HashSet<VirtualPath> GetNode(VirtualPath, bool) Declaration public VirtualNode GetNode(VirtualPath path, bool followLinks = false) Parameters Type Name Description VirtualPath path bool followLinks Returns Type Description VirtualNode GetNodeType(VirtualPath, bool) Declaration public VirtualNodeType GetNodeType(VirtualPath path, bool followLinks = false) Parameters Type Name Description VirtualPath path bool followLinks Returns Type Description VirtualNodeType GetNodes(VirtualNodeTypeFilter, bool, bool) Declaration public IEnumerable<VirtualNode> GetNodes(VirtualNodeTypeFilter nodeType = VirtualNodeTypeFilter.All, bool recursive = false, bool followLinks = false) Parameters Type Name Description VirtualNodeTypeFilter nodeType bool recursive bool followLinks Returns Type Description IEnumerable<VirtualNode> GetNodes(VirtualPath, VirtualNodeTypeFilter, bool, bool) Declaration public IEnumerable<VirtualNode> GetNodes(VirtualPath basePath, VirtualNodeTypeFilter nodeType = VirtualNodeTypeFilter.All, bool recursive = false, bool followLinks = false) Parameters Type Name Description VirtualPath basePath VirtualNodeTypeFilter nodeType bool recursive bool followLinks Returns Type Description IEnumerable<VirtualNode> GetNodesWithPaths(VirtualNodeTypeFilter, bool, bool) Declaration public IEnumerable<VirtualPath> GetNodesWithPaths(VirtualNodeTypeFilter nodeType = VirtualNodeTypeFilter.All, bool recursive = false, bool followLinks = false) Parameters Type Name Description VirtualNodeTypeFilter nodeType bool recursive bool followLinks Returns Type Description IEnumerable<VirtualPath> GetNodesWithPaths(VirtualPath, VirtualNodeTypeFilter, bool, bool) Declaration public IEnumerable<VirtualPath> GetNodesWithPaths(VirtualPath basePath, VirtualNodeTypeFilter nodeType = VirtualNodeTypeFilter.All, bool recursive = false, bool followLinks = false) Parameters Type Name Description VirtualPath basePath VirtualNodeTypeFilter nodeType bool recursive bool followLinks Returns Type Description IEnumerable<VirtualPath> GetSymbolicLink(VirtualPath) Declaration public VirtualSymbolicLink GetSymbolicLink(VirtualPath path) Parameters Type Name Description VirtualPath path Returns Type Description VirtualSymbolicLink ItemExists(VirtualPath, bool) Declaration public bool ItemExists(VirtualPath path, bool followLinks = false) Parameters Type Name Description VirtualPath path bool followLinks Returns Type Description bool MoveNode(VirtualPath, VirtualPath, bool, bool) Declaration public void MoveNode(VirtualPath sourcePath, VirtualPath destinationPath, bool overwrite = false, bool resolveLinks = true) Parameters Type Name Description VirtualPath sourcePath VirtualPath destinationPath bool overwrite bool resolveLinks NodeExists(VirtualPath, bool) Declaration public bool NodeExists(VirtualPath path, bool followLinks = false) Parameters Type Name Description VirtualPath path bool followLinks Returns Type Description bool RemoveLinkByLinkPath(VirtualPath) Declaration public void RemoveLinkByLinkPath(VirtualPath linkPath) Parameters Type Name Description VirtualPath linkPath RemoveLinkFromDictionary(VirtualPath, VirtualPath) Declaration public void RemoveLinkFromDictionary(VirtualPath targetPath, VirtualPath linkPath) Parameters Type Name Description VirtualPath targetPath VirtualPath linkPath RemoveNode(VirtualPath, bool, bool, bool) Declaration public void RemoveNode(VirtualPath nodePath, bool recursive = false, bool followLinks = false, bool resolveLinks = true) Parameters Type Name Description VirtualPath nodePath bool recursive bool followLinks bool resolveLinks ResolveLinkTarget(VirtualPath) Declaration public VirtualPath ResolveLinkTarget(VirtualPath path) Parameters Type Name Description VirtualPath path Returns Type Description VirtualPath SetLinkTargetNodeType(HashSet<VirtualPath>, VirtualNodeType) Declaration public void SetLinkTargetNodeType(HashSet<VirtualPath> linkPathSet, VirtualNodeType nodeType) Parameters Type Name Description HashSet<VirtualPath> linkPathSet VirtualNodeType nodeType SetNode(VirtualPath, VirtualNode) Declaration public void SetNode(VirtualPath destinationPath, VirtualNode node) Parameters Type Name Description VirtualPath destinationPath VirtualNode node SetNodeName(VirtualPath, VirtualNodeName, bool) Declaration public void SetNodeName(VirtualPath nodePath, VirtualNodeName newName, bool resolveLinks = true) Parameters Type Name Description VirtualPath nodePath VirtualNodeName newName bool resolveLinks SymbolicLinkExists(VirtualPath) Declaration public bool SymbolicLinkExists(VirtualPath path) Parameters Type Name Description VirtualPath path Returns Type Description bool TryGetDirectory(VirtualPath, bool) Declaration public VirtualDirectory? TryGetDirectory(VirtualPath path, bool followLinks = false) Parameters Type Name Description VirtualPath path bool followLinks Returns Type Description VirtualDirectory TryGetItem(VirtualPath, bool) Declaration public VirtualItem<T>? TryGetItem(VirtualPath path, bool followLinks = false) Parameters Type Name Description VirtualPath path bool followLinks Returns Type Description VirtualItem<T> TryGetNode(VirtualPath, bool) Declaration public VirtualNode? TryGetNode(VirtualPath path, bool followLinks = false) Parameters Type Name Description VirtualPath path bool followLinks Returns Type Description VirtualNode TryGetSymbolicLink(VirtualPath) Declaration public VirtualSymbolicLink? TryGetSymbolicLink(VirtualPath path) Parameters Type Name Description VirtualPath path Returns Type Description VirtualSymbolicLink TryResolveLinkTarget(VirtualPath) Declaration public VirtualPath? TryResolveLinkTarget(VirtualPath path) Parameters Type Name Description VirtualPath path Returns Type Description VirtualPath UpdateAllTargetNodeTypesInDictionary() Declaration public void UpdateAllTargetNodeTypesInDictionary() UpdateDirectory(VirtualPath, VirtualDirectory) Declaration public void UpdateDirectory(VirtualPath directoryPath, VirtualDirectory newDirectory) Parameters Type Name Description VirtualPath directoryPath VirtualDirectory newDirectory UpdateItem(VirtualPath, VirtualItem<T>) Declaration public void UpdateItem(VirtualPath itemPath, VirtualItem<T> newItem) Parameters Type Name Description VirtualPath itemPath VirtualItem<T> newItem UpdateLinkInDictionary(VirtualPath, VirtualPath) Declaration public void UpdateLinkInDictionary(VirtualPath linkPath, VirtualPath newTargetPath) Parameters Type Name Description VirtualPath linkPath VirtualPath newTargetPath UpdateLinksToTarget(VirtualPath, VirtualPath) Declaration public void UpdateLinksToTarget(VirtualPath oldTargetPath, VirtualPath newTargetPath) Parameters Type Name Description VirtualPath oldTargetPath VirtualPath newTargetPath UpdateSymbolicLInk(VirtualPath, VirtualSymbolicLink) Declaration public void UpdateSymbolicLInk(VirtualPath linkPath, VirtualSymbolicLink newLink) Parameters Type Name Description VirtualPath linkPath VirtualSymbolicLink newLink UpdateTargetNodeTypesInDictionary(VirtualPath) Declaration public void UpdateTargetNodeTypesInDictionary(VirtualPath targetPath) Parameters Type Name Description VirtualPath targetPath WalkPathToTarget(VirtualPath, NotifyNodeDelegate?, ActionNodeDelegate?, bool, bool) Declaration public VirtualNodeContext WalkPathToTarget(VirtualPath targetPath, NotifyNodeDelegate? notifyNode = null, ActionNodeDelegate? actionNode = null, bool followLinks = true, bool exceptionEnabled = true) Parameters Type Name Description VirtualPath targetPath NotifyNodeDelegate notifyNode ActionNodeDelegate actionNode bool followLinks bool exceptionEnabled Returns Type Description VirtualNodeContext WalkPathTree(VirtualPath, VirtualNodeTypeFilter, bool, bool, bool) Declaration public IEnumerable<VirtualNodeContext> WalkPathTree(VirtualPath basePath, VirtualNodeTypeFilter filter = VirtualNodeTypeFilter.All, bool recursive = true, bool followLinks = true, bool resolveLinks = true) Parameters Type Name Description VirtualPath basePath VirtualNodeTypeFilter filter bool recursive bool followLinks bool resolveLinks Returns Type Description IEnumerable<VirtualNodeContext> Extension Methods VirtualTextFormatter.GenerateLinkTableDebugText<T>(VirtualStorage<T>) VirtualTextFormatter.GenerateSingleTableDebugText<T>(T) VirtualTextFormatter.GenerateTreeDebugText<T>(VirtualStorage<T>, VirtualPath, bool, bool)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualStorageExtensions.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualStorageExtensions.html",
    "title": "Class VirtualStorageExtensions | AkiraNetwork",
    "keywords": "Class VirtualStorageExtensions Provides extension methods for various operations on collections in the Virtual Storage Library. Inheritance object VirtualStorageExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public static class VirtualStorageExtensions Methods ApplySortConditions<T>(IEnumerable<T>, List<VirtualSortCondition<T>>?) Applies the specified sort conditions to the elements of the source sequence. Declaration public static IEnumerable<T> ApplySortConditions<T>(this IEnumerable<T> source, List<VirtualSortCondition<T>>? sortConditions = null) Parameters Type Name Description IEnumerable<T> source The sequence of elements to sort. List<VirtualSortCondition<T>> sortConditions A list of conditions that define the sort order. If null or empty, no sorting is applied. Returns Type Description IEnumerable<T> An IEnumerable<T> containing the sorted elements. Type Parameters Name Description T The type of elements in the source sequence. GroupAndSort<T>(IEnumerable<T>, VirtualGroupCondition<T, object>?, List<VirtualSortCondition<T>>?) Groups and sorts the elements of the source sequence based on the specified conditions. Declaration public static IEnumerable<T> GroupAndSort<T>(this IEnumerable<T> source, VirtualGroupCondition<T, object>? groupCondition = null, List<VirtualSortCondition<T>>? sortConditions = null) Parameters Type Name Description IEnumerable<T> source The sequence of elements to group and sort. VirtualGroupCondition<T, object> groupCondition The condition that defines how to group the elements. If null, no grouping is applied. List<VirtualSortCondition<T>> sortConditions A list of conditions that define the sort order. If null or empty, no sorting is applied. Returns Type Description IEnumerable<T> An IEnumerable<T> containing the grouped and sorted elements. Type Parameters Name Description T The type of elements in the source sequence."
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualStorageSettings.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualStorageSettings.html",
    "title": "Class VirtualStorageSettings | AkiraNetwork",
    "keywords": "Class VirtualStorageSettings Manages settings for the virtual storage. This class implements the singleton pattern and holds default settings and various parameters. Inheritance object VirtualStorageSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public class VirtualStorageSettings Properties InvalidNodeNameCharacters Gets or sets an array of characters that are invalid in node names. Declaration public char[] InvalidNodeNameCharacters { get; set; } Property Value Type Description char[] An array of characters that cannot be used in node names. InvalidNodeNames Gets or sets an array of invalid node names. Declaration public string[] InvalidNodeNames { get; set; } Property Value Type Description string[] An array of node names that are not allowed in the virtual storage. NodeListConditions Gets or sets the conditions for listing nodes. Declaration public VirtualNodeListConditions NodeListConditions { get; set; } Property Value Type Description VirtualNodeListConditions The conditions used to filter, group, and sort nodes. PathDot Gets or sets the path representing the current directory. The default value is \".\". Declaration public string PathDot { get; set; } Property Value Type Description string The representation of the current directory. PathDotDot Gets or sets the path representing the parent directory. The default value is \"..\". Declaration public string PathDotDot { get; set; } Property Value Type Description string The representation of the parent directory. PathRoot Gets or sets the root path. The default value is \"/\". Declaration public string PathRoot { get; set; } Property Value Type Description string The root directory path in the virtual storage. PathSeparator Gets or sets the path separator character. The default value is '/'. Declaration public char PathSeparator { get; set; } Property Value Type Description char The character used to separate path segments. PrefixDirectory Gets or sets the prefix used for directory names. The default value is \"dir\". Used for auto-generating node names. Declaration public string PrefixDirectory { get; set; } Property Value Type Description string The prefix added to auto-generated directory names. PrefixItem Gets or sets the prefix used for item names. The default value is \"item\". Used for auto-generating node names. Declaration public string PrefixItem { get; set; } Property Value Type Description string The prefix added to auto-generated item names. PrefixSymbolicLink Gets or sets the prefix used for symbolic link names. The default value is \"link\". Used for auto-generating node names. Declaration public string PrefixSymbolicLink { get; set; } Property Value Type Description string The prefix added to auto-generated symbolic link names. Settings Gets the current instance of the settings. Declaration public static VirtualStorageSettings Settings { get; } Property Value Type Description VirtualStorageSettings The current instance of VirtualStorageSettings. WildcardMatcher Gets or sets the wildcard matcher. Declaration public IVirtualWildcardMatcher? WildcardMatcher { get; set; } Property Value Type Description IVirtualWildcardMatcher The implementation of wildcard matching used in the storage. Methods Initialize() Initializes the settings. Existing settings are reset, and default settings are applied. Declaration public static void Initialize() Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualStorageState.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualStorageState.html",
    "title": "Class VirtualStorageState | AkiraNetwork",
    "keywords": "Class VirtualStorageState Manages the state of the virtual storage. This class implements the singleton pattern and maintains the current settings and state. Inheritance object VirtualStorageState Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public class VirtualStorageState Properties InvalidNodeNameCharacters Gets or sets an array of characters that are invalid in node names. Declaration public char[] InvalidNodeNameCharacters { get; set; } Property Value Type Description char[] An array of characters that are invalid in node names. InvalidNodeNames Gets or sets an array of invalid node names. Declaration public string[] InvalidNodeNames { get; set; } Property Value Type Description string[] An array of invalid node names. NodeListConditions Gets or sets the conditions for listing nodes. Declaration public VirtualNodeListConditions NodeListConditions { get; set; } Property Value Type Description VirtualNodeListConditions The conditions for listing nodes. PathDot Gets or sets the path representing the current directory. The default value is \".\". Declaration public string PathDot { get; set; } Property Value Type Description string The path representing the current directory. PathDotDot Gets or sets the path representing the parent directory. The default value is \"..\". Declaration public string PathDotDot { get; set; } Property Value Type Description string The path representing the parent directory. PathRoot Gets or sets the root path. The default value is \"/\". Declaration public string PathRoot { get; set; } Property Value Type Description string The root path. PathSeparator Gets or sets the path separator character. The default value is '/'. Declaration public char PathSeparator { get; set; } Property Value Type Description char The path separator character. PrefixDirectory Gets or sets the prefix used for directory names. The default value is \"dir\". Used for auto-generating node names. Declaration public string PrefixDirectory { get; set; } Property Value Type Description string The prefix used for directory names. PrefixItem Gets or sets the prefix used for item names. The default value is \"item\". Used for auto-generating node names. Declaration public string PrefixItem { get; set; } Property Value Type Description string The prefix used for item names. PrefixSymbolicLink Gets or sets the prefix used for symbolic link names. The default value is \"link\". Used for auto-generating node names. Declaration public string PrefixSymbolicLink { get; set; } Property Value Type Description string The prefix used for symbolic link names. State Gets the current instance of the state. Declaration public static VirtualStorageState State { get; } Property Value Type Description VirtualStorageState WildcardMatcher Gets or sets the wildcard matcher. Declaration public IVirtualWildcardMatcher? WildcardMatcher { get; set; } Property Value Type Description IVirtualWildcardMatcher The wildcard matcher. Methods SetNodeListConditions(VirtualNodeListConditions) Sets the conditions for listing nodes. Declaration public static void SetNodeListConditions(VirtualNodeListConditions conditions) Parameters Type Name Description VirtualNodeListConditions conditions The conditions for listing nodes. SetNodeListConditions(VirtualNodeTypeFilter, VirtualGroupCondition<VirtualNode, object>?, List<VirtualSortCondition<VirtualNode>>?) Sets the conditions for listing nodes. Declaration public static void SetNodeListConditions(VirtualNodeTypeFilter filter, VirtualGroupCondition<VirtualNode, object>? groupCondition = null, List<VirtualSortCondition<VirtualNode>>? sortConditions = null) Parameters Type Name Description VirtualNodeTypeFilter filter The filter for node types. VirtualGroupCondition<VirtualNode, object> groupCondition The condition for grouping nodes. List<VirtualSortCondition<VirtualNode>> sortConditions The conditions for sorting nodes. Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualSymbolicLink.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualSymbolicLink.html",
    "title": "Class VirtualSymbolicLink | AkiraNetwork",
    "keywords": "Class VirtualSymbolicLink Represents a virtual symbolic link. A virtual symbolic link provides a virtual reference to other nodes (directories, items, or other symbolic links). This class represents symbolic links within the virtual storage library and manages paths to other nodes. The virtual symbolic link supports the concept of NULL links. When the TargetPath is null, the link resolution is not performed during path traversal. This feature can be useful when the target is undefined or dynamically determined. Inheritance object VirtualNode VirtualSymbolicLink Implements IVirtualDeepCloneable<VirtualNode> Inherited Members VirtualNode.Name VirtualNode.CreatedDate VirtualNode.UpdatedDate VirtualNode.VID VirtualNode.IsReferencedInStorage object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public class VirtualSymbolicLink : VirtualNode, IVirtualDeepCloneable<VirtualNode> Constructors VirtualSymbolicLink() Initializes a new instance of the VirtualSymbolicLink class. The node name is automatically generated using the VirtualNodeName.GenerateNodeName method. Declaration public VirtualSymbolicLink() VirtualSymbolicLink(VirtualNodeName) Initializes a new instance of the VirtualSymbolicLink class with the specified name. Declaration public VirtualSymbolicLink(VirtualNodeName name) Parameters Type Name Description VirtualNodeName name The name of the symbolic link. VirtualSymbolicLink(VirtualNodeName, VirtualPath?) Initializes a new instance of the VirtualSymbolicLink class with the specified name and target path. Declaration public VirtualSymbolicLink(VirtualNodeName name, VirtualPath? targetPath) Parameters Type Name Description VirtualNodeName name The name of the symbolic link. VirtualPath targetPath The target path of the symbolic link. VirtualSymbolicLink(VirtualNodeName, VirtualPath?, DateTime, DateTime) Initializes a new instance of the VirtualSymbolicLink class with the specified name, target path, creation date, and update date. Declaration public VirtualSymbolicLink(VirtualNodeName name, VirtualPath? targetPath, DateTime createdDate, DateTime updatedDate) Parameters Type Name Description VirtualNodeName name The name of the symbolic link. VirtualPath targetPath The target path of the symbolic link. DateTime createdDate The creation date. DateTime updatedDate The update date. Properties NodeType Gets the type of the node. This class always returns SymbolicLink. Declaration public override VirtualNodeType NodeType { get; } Property Value Type Description VirtualNodeType Overrides VirtualNode.NodeType TargetNodeType Gets or sets the type of the target node of the symbolic link. Declaration public VirtualNodeType TargetNodeType { get; set; } Property Value Type Description VirtualNodeType TargetPath Gets or sets the target path of the symbolic link. Declaration public VirtualPath? TargetPath { get; set; } Property Value Type Description VirtualPath Methods DeepClone(bool) Creates a deep clone of the symbolic link. Declaration public override VirtualNode DeepClone(bool recursive = false) Parameters Type Name Description bool recursive If true, all links are recursively cloned. Returns Type Description VirtualNode A deep clone of the symbolic link. Overrides VirtualNode.DeepClone(bool) ToString() Returns a string representation of the symbolic link. Declaration public override string ToString() Returns Type Description string A string representation of the symbolic link. Overrides object.ToString() Update(VirtualNode) Updates the current symbolic link with the data from the specified node. Declaration public override void Update(VirtualNode node) Parameters Type Name Description VirtualNode node The node to use for the update. Overrides VirtualNode.Update(VirtualNode) Exceptions Type Condition ArgumentException Thrown if the specified node is not a VirtualSymbolicLink. Operators implicit operator VirtualSymbolicLink(VirtualPath?) Performs an implicit conversion from VirtualPath to VirtualSymbolicLink. The node name is automatically generated using the VirtualNodeName.GenerateNodeName method. Declaration public static implicit operator VirtualSymbolicLink(VirtualPath? targetPath) Parameters Type Name Description VirtualPath targetPath The target path to convert. Returns Type Description VirtualSymbolicLink implicit operator VirtualSymbolicLink((VirtualNodeName nodeName, VirtualPath? targetPath)) Performs an implicit conversion from a tuple to VirtualSymbolicLink. Declaration public static implicit operator VirtualSymbolicLink((VirtualNodeName nodeName, VirtualPath? targetPath) tuple) Parameters Type Name Description (VirtualNodeName nodeName, VirtualPath targetPath) tuple The tuple to convert. Returns Type Description VirtualSymbolicLink Implements IVirtualDeepCloneable<T> Extension Methods VirtualNodeExtensions.ResolveNodeType(VirtualNode) VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.VirtualSymbolicLinkAdapter-1.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.VirtualSymbolicLinkAdapter-1.html",
    "title": "Class VirtualSymbolicLinkAdapter<T> | AkiraNetwork",
    "keywords": "Class VirtualSymbolicLinkAdapter<T> Inheritance object VirtualSymbolicLinkAdapter<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AkiraNetwork.VirtualStorageLibrary Assembly: VirtualStorageLibrary.dll Syntax public class VirtualSymbolicLinkAdapter<T> Type Parameters Name Description T Constructors VirtualSymbolicLinkAdapter(VirtualStorage<T>) Declaration public VirtualSymbolicLinkAdapter(VirtualStorage<T> storage) Parameters Type Name Description VirtualStorage<T> storage Properties this[VirtualPath, bool] Declaration public VirtualSymbolicLink this[VirtualPath path, bool followLinks = true] { get; set; } Parameters Type Name Description VirtualPath path bool followLinks Property Value Type Description VirtualSymbolicLink Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.WildcardMatchers.DefaultWildcardMatcher.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.WildcardMatchers.DefaultWildcardMatcher.html",
    "title": "Class DefaultWildcardMatcher | AkiraNetwork",
    "keywords": "Class DefaultWildcardMatcher Implements default wildcard matching using regular expression patterns. Provides a straightforward mapping of regular expression symbols. Inheritance object DefaultWildcardMatcher Implements IVirtualWildcardMatcher Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AkiraNetwork.VirtualStorageLibrary.WildcardMatchers Assembly: VirtualStorageLibrary.dll Syntax public class DefaultWildcardMatcher : IVirtualWildcardMatcher Properties Count Gets the number of supported wildcard characters. Declaration public int Count { get; } Property Value Type Description int The number of supported wildcard characters. Patterns Gets the list of regular expression patterns corresponding to the wildcard characters. Declaration public IEnumerable<string> Patterns { get; } Property Value Type Description IEnumerable<string> A collection of regular expression patterns corresponding to the wildcard characters. WildcardDictionary Gets the dictionary of regular expression symbols and their corresponding literals. Declaration public ReadOnlyDictionary<string, string> WildcardDictionary { get; } Property Value Type Description ReadOnlyDictionary<string, string> A read-only dictionary where the keys are regular expression symbols and the values are their literal equivalents. Wildcards Gets the list of supported wildcard characters. Declaration public IEnumerable<string> Wildcards { get; } Property Value Type Description IEnumerable<string> A collection of supported wildcard characters. Methods PatternMatcher(string, string) Performs simple regular expression-based wildcard matching. Declaration public bool PatternMatcher(string nodeName, string pattern) Parameters Type Name Description string nodeName The name of the node to match against the pattern. string pattern The regular expression pattern to use for matching. Returns Type Description bool True if the node name matches the pattern; otherwise, false. Implements IVirtualWildcardMatcher Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.WildcardMatchers.PowerShellWildcardMatcher.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.WildcardMatchers.PowerShellWildcardMatcher.html",
    "title": "Class PowerShellWildcardMatcher | AkiraNetwork",
    "keywords": "Class PowerShellWildcardMatcher Implements wildcard matching based on PowerShell's wildcard patterns. Provides pattern matching with support for specific escape characters. Inheritance object PowerShellWildcardMatcher Implements IVirtualWildcardMatcher Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AkiraNetwork.VirtualStorageLibrary.WildcardMatchers Assembly: VirtualStorageLibrary.dll Syntax public class PowerShellWildcardMatcher : IVirtualWildcardMatcher Properties Count Gets the number of supported wildcard characters. Declaration public int Count { get; } Property Value Type Description int The number of supported wildcard characters. Patterns Gets the list of regular expression patterns corresponding to the wildcard characters. Declaration public IEnumerable<string> Patterns { get; } Property Value Type Description IEnumerable<string> A collection of regular expression patterns corresponding to the wildcard characters. WildcardDictionary Gets the dictionary of wildcard characters and their corresponding regular expression patterns. Declaration public ReadOnlyDictionary<string, string> WildcardDictionary { get; } Property Value Type Description ReadOnlyDictionary<string, string> A read-only dictionary where the keys are wildcard characters and the values are their corresponding regular expression patterns. Wildcards Gets the list of supported wildcard characters. Declaration public IEnumerable<string> Wildcards { get; } Property Value Type Description IEnumerable<string> A collection of supported wildcard characters. Methods PatternMatcher(string, string) Performs pattern matching using the specified PowerShell wildcard pattern. Declaration public bool PatternMatcher(string nodeName, string pattern) Parameters Type Name Description string nodeName The name of the node to match against the pattern. string pattern The PowerShell wildcard pattern to use for matching. Returns Type Description bool True if the node name matches the pattern; otherwise, false. Remarks If a wildcard character is escaped using a backtick (`), the character is treated as a literal. The escape character itself is represented by the backtick (`), and the character following it is the one being escaped. Implements IVirtualWildcardMatcher Extension Methods VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)"
  },
  "api/AkiraNetwork.VirtualStorageLibrary.WildcardMatchers.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.WildcardMatchers.html",
    "title": "Namespace AkiraNetwork.VirtualStorageLibrary.WildcardMatchers | AkiraNetwork",
    "keywords": "Namespace AkiraNetwork.VirtualStorageLibrary.WildcardMatchers Classes DefaultWildcardMatcher Implements default wildcard matching using regular expression patterns. Provides a straightforward mapping of regular expression symbols. PowerShellWildcardMatcher Implements wildcard matching based on PowerShell's wildcard patterns. Provides pattern matching with support for specific escape characters."
  },
  "api/AkiraNetwork.VirtualStorageLibrary.html": {
    "href": "api/AkiraNetwork.VirtualStorageLibrary.html",
    "title": "Namespace AkiraNetwork.VirtualStorageLibrary | AkiraNetwork",
    "keywords": "Namespace AkiraNetwork.VirtualStorageLibrary Classes VirtualCycleDetector Class for detecting cycles in virtual symbolic links. Determines if a given link is part of a cycle. VirtualDirectory Represents a virtual directory. A virtual directory functions as a container for other nodes. It can contain VirtualItem<T>, VirtualDirectory, and VirtualSymbolicLink, providing a centralized way to manage these entities. This class supports operations such as adding, removing, updating, checking the existence of, and enumerating nodes within the directory. It serves as a fundamental component for efficiently managing the structure of the virtual storage. Additionally, nodes can be enumerated according to the specified display conditions. VirtualDirectoryAdapter<T> VirtualException The base class for exceptions that occur within the virtual storage library. VirtualGroupCondition<T, TKey> Represents the conditions for grouping data, holding the property to group by and the order (ascending or descending). VirtualItem Represents a virtual item. This class serves as the base class for the VirtualItem<T> type and is used solely for type checking of VirtualItem. VirtualItemAdapter<T> VirtualItem<T> Represents a virtual item. A virtual item is an object used to manage item data within the virtual storage. It holds item data based on the user-defined type T, facilitating the management and manipulation of various types of content. Virtual items ensure that the actual data is distinctly present. If the user-defined type T implements the IVirtualDeepCloneable<T> interface, a deep clone of the item data is created, ensuring separate instances. If this interface is not implemented, shallow copies may result in multiple virtual items referencing the same instance of the item data. VirtualNode Represents an abstract class for nodes. VirtualNodeContext A class that holds context information for a node. It is returned during or after path traversal, providing information about the node, path, parent directory, depth, index, resolved path, and symbolic link. VirtualNodeExtensions Provides extension methods for operations on virtual nodes in the Virtual Storage Library. VirtualNodeName Represents the name of a virtual node. This class handles the generation, validation, and comparison of node names. VirtualNodeNotFoundException The exception that is thrown when a node is not found in the virtual storage. VirtualPath VirtualSortCondition<T> Represents the conditions for sorting data, holding the property to sort by and the order (ascending or descending). VirtualStorageExtensions Provides extension methods for various operations on collections in the Virtual Storage Library. VirtualStorageSettings Manages settings for the virtual storage. This class implements the singleton pattern and holds default settings and various parameters. VirtualStorageState Manages the state of the virtual storage. This class implements the singleton pattern and maintains the current settings and state. VirtualStorage<T> VirtualSymbolicLink Represents a virtual symbolic link. A virtual symbolic link provides a virtual reference to other nodes (directories, items, or other symbolic links). This class represents symbolic links within the virtual storage library and manages paths to other nodes. The virtual symbolic link supports the concept of NULL links. When the TargetPath is null, the link resolution is not performed during path traversal. This feature can be useful when the target is undefined or dynamically determined. VirtualSymbolicLinkAdapter<T> Structs VirtualID A structure representing a unique identifier within the virtual storage library. This identifier is based on a randomly generated UUID version 4 (UUIDv4). UUIDv4 is a 128-bit value that ensures high uniqueness and has strong cryptographic properties. VirtualNodeListConditions Represents the conditions for creating a list of virtual nodes. Interfaces IVirtualDeepCloneable<T> Provides functionality to create deep clones of type T. IVirtualWildcardMatcher Provides functionality for wildcard matching. Enums VirtualNodeType Specifies the types of virtual nodes. VirtualNodeTypeFilter Specifies the filters for virtual node types. Delegates ActionNodeDelegate A delegate used to perform an action on a specific node during node traversal. NotifyNodeDelegate A delegate used to notify the status of a specific node during node traversal. PatternMatch A delegate used to determine if a node name matches a pattern."
  },
  "getting-started.html": {
    "href": "getting-started.html",
    "title": "Getting Started | AkiraNetwork",
    "keywords": "Getting Started"
  },
  "index.html": {
    "href": "index.html",
    "title": "AkiraNetwork HOMEPAGE. | AkiraNetwork",
    "keywords": "AkiraNetwork HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image. This documentation uses the DocFX Material theme, which is © 2019 Oscar Vásquez. It is licensed under the MIT License. For more details, please see the DocFX Material GitHub repository."
  },
  "introduction.html": {
    "href": "introduction.html",
    "title": "Introduction | AkiraNetwork",
    "keywords": "Introduction"
  }
}