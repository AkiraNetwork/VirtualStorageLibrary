### YamlMime:ManagedReference
items:
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  commentId: T:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  id: VirtualStorage`1
  parent: AkiraNetwork.VirtualStorageLibrary
  children:
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.#ctor
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AddDirectory(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualDirectory,System.Boolean)
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AddDirectory(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AddItem(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualItem{`0},System.Boolean)
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AddItem(AkiraNetwork.VirtualStorageLibrary.VirtualPath,`0,System.Boolean)
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AddLinkToDictionary(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AddNode(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualNode,System.Boolean)
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AddSymbolicLink(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AddSymbolicLink(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualSymbolicLink,System.Boolean)
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.ChangeDirectory(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.ConvertToAbsolutePath(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.CopyNode(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{AkiraNetwork.VirtualStorageLibrary.VirtualNodeContext})
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.CurrentPath
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.CycleDetectorForTarget
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.CycleDetectorForTree
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.DirectoryExists(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.ExpandPath(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter,System.Boolean,System.Boolean)
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.ExpandPathTree(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter,System.Boolean,System.Boolean)
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetDirectory(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetItem(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetLinksFromDictionary(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetNode(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetNodeType(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetNodes(AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter,System.Boolean,System.Boolean)
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetNodes(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter,System.Boolean,System.Boolean)
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetNodesWithPaths(AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter,System.Boolean,System.Boolean)
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetNodesWithPaths(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter,System.Boolean,System.Boolean)
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetSymbolicLink(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.Indexer(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.ItemExists(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.LinkDictionary
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.MoveNode(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean,System.Boolean)
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.NodeExists(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.RemoveLinkByLinkPath(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.RemoveLinkFromDictionary(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.RemoveNode(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean,System.Boolean,System.Boolean)
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.ResolveLinkTarget(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.Root
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.SetLinkTargetNodeType(System.Collections.Generic.HashSet{AkiraNetwork.VirtualStorageLibrary.VirtualPath},AkiraNetwork.VirtualStorageLibrary.VirtualNodeType)
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.SetNode(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualNode)
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.SetNodeName(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualNodeName,System.Boolean)
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.SymbolicLinkExists(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.TryGetDirectory(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.TryGetItem(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.TryGetNode(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.TryGetSymbolicLink(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.TryResolveLinkTarget(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.UpdateAllTargetNodeTypesInDictionary
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.UpdateDirectory(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualDirectory)
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.UpdateItem(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualItem{`0})
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.UpdateLinkInDictionary(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.UpdateLinksToTarget(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.UpdateSymbolicLInk(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualSymbolicLink)
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.UpdateTargetNodeTypesInDictionary(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.WalkPathToTarget(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.NotifyNodeDelegate,AkiraNetwork.VirtualStorageLibrary.ActionNodeDelegate,System.Boolean,System.Boolean)
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.WalkPathTree(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter,System.Boolean,System.Boolean,System.Boolean)
  langs:
  - csharp
  - vb
  name: VirtualStorage<T>
  nameWithType: VirtualStorage<T>
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>
  type: Class
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.WalkPathTree.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: VirtualStorage
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.WalkPathTree.cs
    startLine: 19
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Manages virtual storage containing user-defined type T item data.
  example: []
  syntax:
    content: public class VirtualStorage<T>
    typeParameters:
    - id: T
      description: The user-defined type within the virtual storage
    content.vb: Public Class VirtualStorage(Of T)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.GenerateLinkTableDebugText``1
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.GenerateSingleTableDebugText``1
  - AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.GenerateTreeDebugText``1(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean,System.Boolean)
  nameWithType.vb: VirtualStorage(Of T)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T)
  name.vb: VirtualStorage(Of T)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.Root
  commentId: P:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.Root
  id: Root
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: Root
  nameWithType: VirtualStorage<T>.Root
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.Root
  type: Property
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VirtualStorage.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: Root
    path: ../AkiraNetwork/VirtualStorageLibrary/VirtualStorage.cs
    startLine: 29
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Gets the root directory of the virtual storage.
  example: []
  syntax:
    content: public VirtualDirectory Root { get; }
    parameters: []
    return:
      type: AkiraNetwork.VirtualStorageLibrary.VirtualDirectory
      description: The root directory of the virtual storage
    content.vb: Public ReadOnly Property Root As VirtualDirectory
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.Root*
  nameWithType.vb: VirtualStorage(Of T).Root
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).Root
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.CurrentPath
  commentId: P:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.CurrentPath
  id: CurrentPath
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: CurrentPath
  nameWithType: VirtualStorage<T>.CurrentPath
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.CurrentPath
  type: Property
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VirtualStorage.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: CurrentPath
    path: ../AkiraNetwork/VirtualStorageLibrary/VirtualStorage.cs
    startLine: 35
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Gets or sets the current virtual path.
  example: []
  syntax:
    content: public VirtualPath CurrentPath { get; }
    parameters: []
    return:
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The current virtual path
    content.vb: Public Property CurrentPath As VirtualPath
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.CurrentPath*
  nameWithType.vb: VirtualStorage(Of T).CurrentPath
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).CurrentPath
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.CycleDetectorForTarget
  commentId: P:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.CycleDetectorForTarget
  id: CycleDetectorForTarget
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: CycleDetectorForTarget
  nameWithType: VirtualStorage<T>.CycleDetectorForTarget
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.CycleDetectorForTarget
  type: Property
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VirtualStorage.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: CycleDetectorForTarget
    path: ../AkiraNetwork/VirtualStorageLibrary/VirtualStorage.cs
    startLine: 41
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Gets the cycle detector class used for the WalkPathToTarget method.
  example: []
  syntax:
    content: public VirtualCycleDetector CycleDetectorForTarget { get; }
    parameters: []
    return:
      type: AkiraNetwork.VirtualStorageLibrary.VirtualCycleDetector
      description: An instance of the cycle detector class
    content.vb: Public ReadOnly Property CycleDetectorForTarget As VirtualCycleDetector
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.CycleDetectorForTarget*
  nameWithType.vb: VirtualStorage(Of T).CycleDetectorForTarget
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).CycleDetectorForTarget
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.CycleDetectorForTree
  commentId: P:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.CycleDetectorForTree
  id: CycleDetectorForTree
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: CycleDetectorForTree
  nameWithType: VirtualStorage<T>.CycleDetectorForTree
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.CycleDetectorForTree
  type: Property
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VirtualStorage.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: CycleDetectorForTree
    path: ../AkiraNetwork/VirtualStorageLibrary/VirtualStorage.cs
    startLine: 47
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Gets the cycle detector class used for the WalkPathTree method.
  example: []
  syntax:
    content: public VirtualCycleDetector CycleDetectorForTree { get; }
    parameters: []
    return:
      type: AkiraNetwork.VirtualStorageLibrary.VirtualCycleDetector
      description: An instance of the cycle detector class
    content.vb: Public ReadOnly Property CycleDetectorForTree As VirtualCycleDetector
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.CycleDetectorForTree*
  nameWithType.vb: VirtualStorage(Of T).CycleDetectorForTree
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).CycleDetectorForTree
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.#ctor
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.#ctor
  id: '#ctor'
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: VirtualStorage()
  nameWithType: VirtualStorage<T>.VirtualStorage()
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.VirtualStorage()
  type: Constructor
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VirtualStorage.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: .ctor
    path: ../AkiraNetwork/VirtualStorageLibrary/VirtualStorage.cs
    startLine: 52
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Initializes a new instance of the VirtualStorage class.
  example: []
  syntax:
    content: public VirtualStorage()
    content.vb: Public Sub New()
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.#ctor*
  nameWithType.vb: VirtualStorage(Of T).New()
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).New()
  name.vb: New()
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.CopyNode(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{AkiraNetwork.VirtualStorageLibrary.VirtualNodeContext})
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.CopyNode(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{AkiraNetwork.VirtualStorageLibrary.VirtualNodeContext})
  id: CopyNode(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{AkiraNetwork.VirtualStorageLibrary.VirtualNodeContext})
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: CopyNode(VirtualPath, VirtualPath, bool, bool, bool, List<VirtualNodeContext>?)
  nameWithType: VirtualStorage<T>.CopyNode(VirtualPath, VirtualPath, bool, bool, bool, List<VirtualNodeContext>?)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.CopyNode(AkiraNetwork.VirtualStorageLibrary.VirtualPath, AkiraNetwork.VirtualStorageLibrary.VirtualPath, bool, bool, bool, System.Collections.Generic.List<AkiraNetwork.VirtualStorageLibrary.VirtualNodeContext>?)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.CopyTask.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: CopyNode
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.CopyTask.cs
    startLine: 81
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Copies the node at the specified path.
  example: []
  syntax:
    content: public void CopyNode(VirtualPath sourcePath, VirtualPath destinationPath, bool overwrite = false, bool recursive = false, bool followLinks = false, List<VirtualNodeContext>? destinationContextList = null)
    parameters:
    - id: sourcePath
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The source path of the copy.
    - id: destinationPath
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The destination path of the copy.
    - id: overwrite
      type: System.Boolean
      description: Whether to overwrite existing nodes.
    - id: recursive
      type: System.Boolean
      description: Whether to copy recursively.
    - id: followLinks
      type: System.Boolean
      description: Whether to follow symbolic links.
    - id: destinationContextList
      type: System.Collections.Generic.List{AkiraNetwork.VirtualStorageLibrary.VirtualNodeContext}
      description: List of destination contexts.
    content.vb: Public Sub CopyNode(sourcePath As VirtualPath, destinationPath As VirtualPath, overwrite As Boolean = False, recursive As Boolean = False, followLinks As Boolean = False, destinationContextList As List(Of VirtualNodeContext) = Nothing)
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.CopyNode*
  exceptions:
  - type: AkiraNetwork.VirtualStorageLibrary.VirtualNodeNotFoundException
    commentId: T:AkiraNetwork.VirtualStorageLibrary.VirtualNodeNotFoundException
    description: Thrown if the source node is not found.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >-
      Thrown if the source and destination paths are the same or if a recursive copy

      would result in a circular reference.
  nameWithType.vb: VirtualStorage(Of T).CopyNode(VirtualPath, VirtualPath, Boolean, Boolean, Boolean, List(Of VirtualNodeContext))
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).CopyNode(AkiraNetwork.VirtualStorageLibrary.VirtualPath, AkiraNetwork.VirtualStorageLibrary.VirtualPath, Boolean, Boolean, Boolean, System.Collections.Generic.List(Of AkiraNetwork.VirtualStorageLibrary.VirtualNodeContext))
  name.vb: CopyNode(VirtualPath, VirtualPath, Boolean, Boolean, Boolean, List(Of VirtualNodeContext))
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.Indexer(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  commentId: P:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.Indexer(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  id: Indexer(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: this[VirtualPath, bool]
  nameWithType: VirtualStorage<T>.this[VirtualPath, bool]
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.this[AkiraNetwork.VirtualStorageLibrary.VirtualPath, bool]
  type: Property
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.Indexer.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: this[]
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.Indexer.cs
    startLine: 27
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Gets or sets the virtual node corresponding to the specified virtual path.
  example: []
  syntax:
    content: public VirtualDirectory this[VirtualPath path, bool followLinks = true] { get; set; }
    parameters:
    - id: path
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The virtual path
    - id: followLinks
      type: System.Boolean
      description: Flag indicating whether to follow symbolic links
    return:
      type: AkiraNetwork.VirtualStorageLibrary.VirtualDirectory
      description: The virtual node corresponding to the specified virtual path
    content.vb: Public Default Property this[](path As VirtualPath, followLinks As Boolean = True) As VirtualDirectory
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.Indexer*
  nameWithType.vb: VirtualStorage(Of T).this[](VirtualPath, Boolean)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).this[](AkiraNetwork.VirtualStorageLibrary.VirtualPath, Boolean)
  name.vb: this[](VirtualPath, Boolean)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.LinkDictionary
  commentId: P:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.LinkDictionary
  id: LinkDictionary
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: LinkDictionary
  nameWithType: VirtualStorage<T>.LinkDictionary
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.LinkDictionary
  type: Property
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.LinkManagement.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: LinkDictionary
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.LinkManagement.cs
    startLine: 30
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Gets the link dictionary.
  example: []
  syntax:
    content: public Dictionary<VirtualPath, HashSet<VirtualPath>> LinkDictionary { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Collections.Generic.HashSet{AkiraNetwork.VirtualStorageLibrary.VirtualPath}}
      description: A dictionary representing the link mappings.
    content.vb: Public ReadOnly Property LinkDictionary As Dictionary(Of VirtualPath, HashSet(Of VirtualPath))
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.LinkDictionary*
  nameWithType.vb: VirtualStorage(Of T).LinkDictionary
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).LinkDictionary
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AddLinkToDictionary(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AddLinkToDictionary(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  id: AddLinkToDictionary(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: AddLinkToDictionary(VirtualPath, VirtualPath)
  nameWithType: VirtualStorage<T>.AddLinkToDictionary(VirtualPath, VirtualPath)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.AddLinkToDictionary(AkiraNetwork.VirtualStorageLibrary.VirtualPath, AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.LinkManagement.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: AddLinkToDictionary
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.LinkManagement.cs
    startLine: 38
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Adds a new link to the link dictionary.
  example: []
  syntax:
    content: public void AddLinkToDictionary(VirtualPath targetPath, VirtualPath linkPath)
    parameters:
    - id: targetPath
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The target path of the link.
    - id: linkPath
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The path of the link.
    content.vb: Public Sub AddLinkToDictionary(targetPath As VirtualPath, linkPath As VirtualPath)
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AddLinkToDictionary*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if the target path is not an absolute path.
  nameWithType.vb: VirtualStorage(Of T).AddLinkToDictionary(VirtualPath, VirtualPath)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).AddLinkToDictionary(AkiraNetwork.VirtualStorageLibrary.VirtualPath, AkiraNetwork.VirtualStorageLibrary.VirtualPath)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.UpdateTargetNodeTypesInDictionary(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.UpdateTargetNodeTypesInDictionary(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  id: UpdateTargetNodeTypesInDictionary(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: UpdateTargetNodeTypesInDictionary(VirtualPath)
  nameWithType: VirtualStorage<T>.UpdateTargetNodeTypesInDictionary(VirtualPath)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.UpdateTargetNodeTypesInDictionary(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.LinkManagement.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: UpdateTargetNodeTypesInDictionary
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.LinkManagement.cs
    startLine: 59
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Updates the target node types in the link dictionary.
  example: []
  syntax:
    content: public void UpdateTargetNodeTypesInDictionary(VirtualPath targetPath)
    parameters:
    - id: targetPath
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The target path.
    content.vb: Public Sub UpdateTargetNodeTypesInDictionary(targetPath As VirtualPath)
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.UpdateTargetNodeTypesInDictionary*
  nameWithType.vb: VirtualStorage(Of T).UpdateTargetNodeTypesInDictionary(VirtualPath)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).UpdateTargetNodeTypesInDictionary(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.UpdateAllTargetNodeTypesInDictionary
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.UpdateAllTargetNodeTypesInDictionary
  id: UpdateAllTargetNodeTypesInDictionary
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: UpdateAllTargetNodeTypesInDictionary()
  nameWithType: VirtualStorage<T>.UpdateAllTargetNodeTypesInDictionary()
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.UpdateAllTargetNodeTypesInDictionary()
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.LinkManagement.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: UpdateAllTargetNodeTypesInDictionary
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.LinkManagement.cs
    startLine: 72
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Updates all target node types in the link dictionary.
  example: []
  syntax:
    content: public void UpdateAllTargetNodeTypesInDictionary()
    content.vb: Public Sub UpdateAllTargetNodeTypesInDictionary()
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.UpdateAllTargetNodeTypesInDictionary*
  nameWithType.vb: VirtualStorage(Of T).UpdateAllTargetNodeTypesInDictionary()
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).UpdateAllTargetNodeTypesInDictionary()
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.RemoveLinkFromDictionary(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.RemoveLinkFromDictionary(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  id: RemoveLinkFromDictionary(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: RemoveLinkFromDictionary(VirtualPath, VirtualPath)
  nameWithType: VirtualStorage<T>.RemoveLinkFromDictionary(VirtualPath, VirtualPath)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.RemoveLinkFromDictionary(AkiraNetwork.VirtualStorageLibrary.VirtualPath, AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.LinkManagement.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: RemoveLinkFromDictionary
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.LinkManagement.cs
    startLine: 85
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Removes a link from the link dictionary.
  example: []
  syntax:
    content: public void RemoveLinkFromDictionary(VirtualPath targetPath, VirtualPath linkPath)
    parameters:
    - id: targetPath
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The target path.
    - id: linkPath
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The path of the link.
    content.vb: Public Sub RemoveLinkFromDictionary(targetPath As VirtualPath, linkPath As VirtualPath)
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.RemoveLinkFromDictionary*
  nameWithType.vb: VirtualStorage(Of T).RemoveLinkFromDictionary(VirtualPath, VirtualPath)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).RemoveLinkFromDictionary(AkiraNetwork.VirtualStorageLibrary.VirtualPath, AkiraNetwork.VirtualStorageLibrary.VirtualPath)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetLinksFromDictionary(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetLinksFromDictionary(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  id: GetLinksFromDictionary(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: GetLinksFromDictionary(VirtualPath)
  nameWithType: VirtualStorage<T>.GetLinksFromDictionary(VirtualPath)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.GetLinksFromDictionary(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.LinkManagement.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: GetLinksFromDictionary
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.LinkManagement.cs
    startLine: 106
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Retrieves all link paths associated with the specified target path from the link dictionary.
  example: []
  syntax:
    content: public HashSet<VirtualPath> GetLinksFromDictionary(VirtualPath targetPath)
    parameters:
    - id: targetPath
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The target path.
    return:
      type: System.Collections.Generic.HashSet{AkiraNetwork.VirtualStorageLibrary.VirtualPath}
      description: A set of link paths.
    content.vb: Public Function GetLinksFromDictionary(targetPath As VirtualPath) As HashSet(Of VirtualPath)
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetLinksFromDictionary*
  nameWithType.vb: VirtualStorage(Of T).GetLinksFromDictionary(VirtualPath)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).GetLinksFromDictionary(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.SetLinkTargetNodeType(System.Collections.Generic.HashSet{AkiraNetwork.VirtualStorageLibrary.VirtualPath},AkiraNetwork.VirtualStorageLibrary.VirtualNodeType)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.SetLinkTargetNodeType(System.Collections.Generic.HashSet{AkiraNetwork.VirtualStorageLibrary.VirtualPath},AkiraNetwork.VirtualStorageLibrary.VirtualNodeType)
  id: SetLinkTargetNodeType(System.Collections.Generic.HashSet{AkiraNetwork.VirtualStorageLibrary.VirtualPath},AkiraNetwork.VirtualStorageLibrary.VirtualNodeType)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: SetLinkTargetNodeType(HashSet<VirtualPath>, VirtualNodeType)
  nameWithType: VirtualStorage<T>.SetLinkTargetNodeType(HashSet<VirtualPath>, VirtualNodeType)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.SetLinkTargetNodeType(System.Collections.Generic.HashSet<AkiraNetwork.VirtualStorageLibrary.VirtualPath>, AkiraNetwork.VirtualStorageLibrary.VirtualNodeType)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.LinkManagement.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: SetLinkTargetNodeType
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.LinkManagement.cs
    startLine: 120
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Sets the target node type for all symbolic links in the specified list of link paths.
  example: []
  syntax:
    content: public void SetLinkTargetNodeType(HashSet<VirtualPath> linkPathSet, VirtualNodeType nodeType)
    parameters:
    - id: linkPathSet
      type: System.Collections.Generic.HashSet{AkiraNetwork.VirtualStorageLibrary.VirtualPath}
      description: A set of link paths.
    - id: nodeType
      type: AkiraNetwork.VirtualStorageLibrary.VirtualNodeType
      description: The target node type.
    content.vb: Public Sub SetLinkTargetNodeType(linkPathSet As HashSet(Of VirtualPath), nodeType As VirtualNodeType)
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.SetLinkTargetNodeType*
  nameWithType.vb: VirtualStorage(Of T).SetLinkTargetNodeType(HashSet(Of VirtualPath), VirtualNodeType)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).SetLinkTargetNodeType(System.Collections.Generic.HashSet(Of AkiraNetwork.VirtualStorageLibrary.VirtualPath), AkiraNetwork.VirtualStorageLibrary.VirtualNodeType)
  name.vb: SetLinkTargetNodeType(HashSet(Of VirtualPath), VirtualNodeType)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.UpdateLinkInDictionary(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.UpdateLinkInDictionary(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  id: UpdateLinkInDictionary(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: UpdateLinkInDictionary(VirtualPath, VirtualPath)
  nameWithType: VirtualStorage<T>.UpdateLinkInDictionary(VirtualPath, VirtualPath)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.UpdateLinkInDictionary(AkiraNetwork.VirtualStorageLibrary.VirtualPath, AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.LinkManagement.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: UpdateLinkInDictionary
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.LinkManagement.cs
    startLine: 137
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Updates the target path of a specific symbolic link to a new target path.
  example: []
  syntax:
    content: public void UpdateLinkInDictionary(VirtualPath linkPath, VirtualPath newTargetPath)
    parameters:
    - id: linkPath
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The path of the link.
    - id: newTargetPath
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The new target path.
    content.vb: Public Sub UpdateLinkInDictionary(linkPath As VirtualPath, newTargetPath As VirtualPath)
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.UpdateLinkInDictionary*
  nameWithType.vb: VirtualStorage(Of T).UpdateLinkInDictionary(VirtualPath, VirtualPath)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).UpdateLinkInDictionary(AkiraNetwork.VirtualStorageLibrary.VirtualPath, AkiraNetwork.VirtualStorageLibrary.VirtualPath)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.UpdateLinksToTarget(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.UpdateLinksToTarget(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  id: UpdateLinksToTarget(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: UpdateLinksToTarget(VirtualPath, VirtualPath)
  nameWithType: VirtualStorage<T>.UpdateLinksToTarget(VirtualPath, VirtualPath)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.UpdateLinksToTarget(AkiraNetwork.VirtualStorageLibrary.VirtualPath, AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.LinkManagement.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: UpdateLinksToTarget
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.LinkManagement.cs
    startLine: 163
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Updates the target path of links with a specific target path to a new target path.
  example: []
  syntax:
    content: public void UpdateLinksToTarget(VirtualPath oldTargetPath, VirtualPath newTargetPath)
    parameters:
    - id: oldTargetPath
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The old target path.
    - id: newTargetPath
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The new target path.
    content.vb: Public Sub UpdateLinksToTarget(oldTargetPath As VirtualPath, newTargetPath As VirtualPath)
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.UpdateLinksToTarget*
  nameWithType.vb: VirtualStorage(Of T).UpdateLinksToTarget(VirtualPath, VirtualPath)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).UpdateLinksToTarget(AkiraNetwork.VirtualStorageLibrary.VirtualPath, AkiraNetwork.VirtualStorageLibrary.VirtualPath)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.RemoveLinkByLinkPath(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.RemoveLinkByLinkPath(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  id: RemoveLinkByLinkPath(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: RemoveLinkByLinkPath(VirtualPath)
  nameWithType: VirtualStorage<T>.RemoveLinkByLinkPath(VirtualPath)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.RemoveLinkByLinkPath(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.LinkManagement.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: RemoveLinkByLinkPath
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.LinkManagement.cs
    startLine: 201
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Removes the link with the specified link path from the link dictionary.
  example: []
  syntax:
    content: public void RemoveLinkByLinkPath(VirtualPath linkPath)
    parameters:
    - id: linkPath
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The link path.
    content.vb: Public Sub RemoveLinkByLinkPath(linkPath As VirtualPath)
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.RemoveLinkByLinkPath*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if the link path is not an absolute path.
  nameWithType.vb: VirtualStorage(Of T).RemoveLinkByLinkPath(VirtualPath)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).RemoveLinkByLinkPath(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.MoveNode(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean,System.Boolean)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.MoveNode(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean,System.Boolean)
  id: MoveNode(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean,System.Boolean)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: MoveNode(VirtualPath, VirtualPath, bool, bool)
  nameWithType: VirtualStorage<T>.MoveNode(VirtualPath, VirtualPath, bool, bool)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.MoveNode(AkiraNetwork.VirtualStorageLibrary.VirtualPath, AkiraNetwork.VirtualStorageLibrary.VirtualPath, bool, bool)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.MoveTask.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: MoveNode
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.MoveTask.cs
    startLine: 41
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Moves the node at the specified path to a new location.
  remarks: >-
    <p>

    resolveLinks indicates whether to resolve links when non-terminal nodes 

    (from the top node to the parent of the terminal node) in the path are symbolic links.

    </p>
  example: []
  syntax:
    content: public void MoveNode(VirtualPath sourcePath, VirtualPath destinationPath, bool overwrite = false, bool resolveLinks = true)
    parameters:
    - id: sourcePath
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The source path of the node.
    - id: destinationPath
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The destination path for the node.
    - id: overwrite
      type: System.Boolean
      description: Whether to overwrite existing nodes.
    - id: resolveLinks
      type: System.Boolean
      description: Whether to resolve symbolic links.
    content.vb: Public Sub MoveNode(sourcePath As VirtualPath, destinationPath As VirtualPath, overwrite As Boolean = False, resolveLinks As Boolean = True)
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.MoveNode*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >-
      Thrown if the source and destination paths are the same, if attempting to 

      move the root directory, or if the destination is a subdirectory of the source.
  - type: AkiraNetwork.VirtualStorageLibrary.VirtualNodeNotFoundException
    commentId: T:AkiraNetwork.VirtualStorageLibrary.VirtualNodeNotFoundException
    description: Thrown if the source node is not found.
  nameWithType.vb: VirtualStorage(Of T).MoveNode(VirtualPath, VirtualPath, Boolean, Boolean)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).MoveNode(AkiraNetwork.VirtualStorageLibrary.VirtualPath, AkiraNetwork.VirtualStorageLibrary.VirtualPath, Boolean, Boolean)
  name.vb: MoveNode(VirtualPath, VirtualPath, Boolean, Boolean)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.ChangeDirectory(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.ChangeDirectory(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  id: ChangeDirectory(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: ChangeDirectory(VirtualPath)
  nameWithType: VirtualStorage<T>.ChangeDirectory(VirtualPath)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.ChangeDirectory(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.Operations.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: ChangeDirectory
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.Operations.cs
    startLine: 25
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Changes the current working directory.
  example: []
  syntax:
    content: public void ChangeDirectory(VirtualPath path)
    parameters:
    - id: path
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The path of the new working directory
    content.vb: Public Sub ChangeDirectory(path As VirtualPath)
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.ChangeDirectory*
  nameWithType.vb: VirtualStorage(Of T).ChangeDirectory(VirtualPath)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).ChangeDirectory(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.SetNode(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualNode)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.SetNode(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualNode)
  id: SetNode(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualNode)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: SetNode(VirtualPath, VirtualNode)
  nameWithType: VirtualStorage<T>.SetNode(VirtualPath, VirtualNode)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.SetNode(AkiraNetwork.VirtualStorageLibrary.VirtualPath, AkiraNetwork.VirtualStorageLibrary.VirtualNode)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.Operations.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: SetNode
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.Operations.cs
    startLine: 39
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Sets a node at the specified path.
  example: []
  syntax:
    content: public void SetNode(VirtualPath destinationPath, VirtualNode node)
    parameters:
    - id: destinationPath
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The path where the node is set
    - id: node
      type: AkiraNetwork.VirtualStorageLibrary.VirtualNode
      description: The <xref href="AkiraNetwork.VirtualStorageLibrary.VirtualNode" data-throw-if-not-resolved="false"></xref> to set
    content.vb: Public Sub SetNode(destinationPath As VirtualPath, node As VirtualNode)
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.SetNode*
  nameWithType.vb: VirtualStorage(Of T).SetNode(VirtualPath, VirtualNode)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).SetNode(AkiraNetwork.VirtualStorageLibrary.VirtualPath, AkiraNetwork.VirtualStorageLibrary.VirtualNode)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.UpdateItem(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualItem{`0})
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.UpdateItem(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualItem{`0})
  id: UpdateItem(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualItem{`0})
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: UpdateItem(VirtualPath, VirtualItem<T>)
  nameWithType: VirtualStorage<T>.UpdateItem(VirtualPath, VirtualItem<T>)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.UpdateItem(AkiraNetwork.VirtualStorageLibrary.VirtualPath, AkiraNetwork.VirtualStorageLibrary.VirtualItem<T>)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.Operations.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: UpdateItem
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.Operations.cs
    startLine: 64
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Updates an item.
  example: []
  syntax:
    content: public void UpdateItem(VirtualPath itemPath, VirtualItem<T> newItem)
    parameters:
    - id: itemPath
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The path of the item to update
    - id: newItem
      type: AkiraNetwork.VirtualStorageLibrary.VirtualItem{{T}}
      description: The new data for the item
    content.vb: Public Sub UpdateItem(itemPath As VirtualPath, newItem As VirtualItem(Of T))
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.UpdateItem*
  nameWithType.vb: VirtualStorage(Of T).UpdateItem(VirtualPath, VirtualItem(Of T))
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).UpdateItem(AkiraNetwork.VirtualStorageLibrary.VirtualPath, AkiraNetwork.VirtualStorageLibrary.VirtualItem(Of T))
  name.vb: UpdateItem(VirtualPath, VirtualItem(Of T))
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.UpdateDirectory(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualDirectory)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.UpdateDirectory(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualDirectory)
  id: UpdateDirectory(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualDirectory)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: UpdateDirectory(VirtualPath, VirtualDirectory)
  nameWithType: VirtualStorage<T>.UpdateDirectory(VirtualPath, VirtualDirectory)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.UpdateDirectory(AkiraNetwork.VirtualStorageLibrary.VirtualPath, AkiraNetwork.VirtualStorageLibrary.VirtualDirectory)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.Operations.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: UpdateDirectory
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.Operations.cs
    startLine: 81
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Updates a directory.
  example: []
  syntax:
    content: public void UpdateDirectory(VirtualPath directoryPath, VirtualDirectory newDirectory)
    parameters:
    - id: directoryPath
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The path of the directory to update
    - id: newDirectory
      type: AkiraNetwork.VirtualStorageLibrary.VirtualDirectory
      description: The new data for the directory
    content.vb: Public Sub UpdateDirectory(directoryPath As VirtualPath, newDirectory As VirtualDirectory)
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.UpdateDirectory*
  nameWithType.vb: VirtualStorage(Of T).UpdateDirectory(VirtualPath, VirtualDirectory)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).UpdateDirectory(AkiraNetwork.VirtualStorageLibrary.VirtualPath, AkiraNetwork.VirtualStorageLibrary.VirtualDirectory)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.UpdateSymbolicLInk(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualSymbolicLink)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.UpdateSymbolicLInk(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualSymbolicLink)
  id: UpdateSymbolicLInk(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualSymbolicLink)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: UpdateSymbolicLInk(VirtualPath, VirtualSymbolicLink)
  nameWithType: VirtualStorage<T>.UpdateSymbolicLInk(VirtualPath, VirtualSymbolicLink)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.UpdateSymbolicLInk(AkiraNetwork.VirtualStorageLibrary.VirtualPath, AkiraNetwork.VirtualStorageLibrary.VirtualSymbolicLink)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.Operations.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: UpdateSymbolicLInk
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.Operations.cs
    startLine: 98
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Updates a symbolic link.
  example: []
  syntax:
    content: public void UpdateSymbolicLInk(VirtualPath linkPath, VirtualSymbolicLink newLink)
    parameters:
    - id: linkPath
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The path of the symbolic link to update
    - id: newLink
      type: AkiraNetwork.VirtualStorageLibrary.VirtualSymbolicLink
      description: The new data for the symbolic link
    content.vb: Public Sub UpdateSymbolicLInk(linkPath As VirtualPath, newLink As VirtualSymbolicLink)
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.UpdateSymbolicLInk*
  nameWithType.vb: VirtualStorage(Of T).UpdateSymbolicLInk(VirtualPath, VirtualSymbolicLink)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).UpdateSymbolicLInk(AkiraNetwork.VirtualStorageLibrary.VirtualPath, AkiraNetwork.VirtualStorageLibrary.VirtualSymbolicLink)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AddNode(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualNode,System.Boolean)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AddNode(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualNode,System.Boolean)
  id: AddNode(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualNode,System.Boolean)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: AddNode(VirtualPath, VirtualNode, bool)
  nameWithType: VirtualStorage<T>.AddNode(VirtualPath, VirtualNode, bool)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.AddNode(AkiraNetwork.VirtualStorageLibrary.VirtualPath, AkiraNetwork.VirtualStorageLibrary.VirtualNode, bool)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.Operations.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: AddNode
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.Operations.cs
    startLine: 117
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Adds a node to the specified directory.
  example: []
  syntax:
    content: public void AddNode(VirtualPath nodeDirectoryPath, VirtualNode node, bool overwrite = false)
    parameters:
    - id: nodeDirectoryPath
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The path of the directory to add the node to
    - id: node
      type: AkiraNetwork.VirtualStorageLibrary.VirtualNode
      description: The <xref href="AkiraNetwork.VirtualStorageLibrary.VirtualNode" data-throw-if-not-resolved="false"></xref> to add
    - id: overwrite
      type: System.Boolean
      description: Indicates whether to overwrite an existing node
    content.vb: Public Sub AddNode(nodeDirectoryPath As VirtualPath, node As VirtualNode, overwrite As Boolean = False)
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AddNode*
  nameWithType.vb: VirtualStorage(Of T).AddNode(VirtualPath, VirtualNode, Boolean)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).AddNode(AkiraNetwork.VirtualStorageLibrary.VirtualPath, AkiraNetwork.VirtualStorageLibrary.VirtualNode, Boolean)
  name.vb: AddNode(VirtualPath, VirtualNode, Boolean)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AddDirectory(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualDirectory,System.Boolean)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AddDirectory(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualDirectory,System.Boolean)
  id: AddDirectory(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualDirectory,System.Boolean)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: AddDirectory(VirtualPath, VirtualDirectory, bool)
  nameWithType: VirtualStorage<T>.AddDirectory(VirtualPath, VirtualDirectory, bool)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.AddDirectory(AkiraNetwork.VirtualStorageLibrary.VirtualPath, AkiraNetwork.VirtualStorageLibrary.VirtualDirectory, bool)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.Operations.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: AddDirectory
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.Operations.cs
    startLine: 143
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Adds a directory.
  example: []
  syntax:
    content: public void AddDirectory(VirtualPath directoryPath, VirtualDirectory directory, bool createSubdirectories = false)
    parameters:
    - id: directoryPath
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The path of the directory to add
    - id: directory
      type: AkiraNetwork.VirtualStorageLibrary.VirtualDirectory
      description: The <xref href="AkiraNetwork.VirtualStorageLibrary.VirtualDirectory" data-throw-if-not-resolved="false"></xref> to add
    - id: createSubdirectories
      type: System.Boolean
      description: Indicates whether to create intermediate directories
    content.vb: Public Sub AddDirectory(directoryPath As VirtualPath, directory As VirtualDirectory, createSubdirectories As Boolean = False)
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AddDirectory*
  nameWithType.vb: VirtualStorage(Of T).AddDirectory(VirtualPath, VirtualDirectory, Boolean)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).AddDirectory(AkiraNetwork.VirtualStorageLibrary.VirtualPath, AkiraNetwork.VirtualStorageLibrary.VirtualDirectory, Boolean)
  name.vb: AddDirectory(VirtualPath, VirtualDirectory, Boolean)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AddDirectory(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AddDirectory(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  id: AddDirectory(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: AddDirectory(VirtualPath, bool)
  nameWithType: VirtualStorage<T>.AddDirectory(VirtualPath, bool)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.AddDirectory(AkiraNetwork.VirtualStorageLibrary.VirtualPath, bool)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.Operations.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: AddDirectory
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.Operations.cs
    startLine: 184
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Adds a directory.
  example: []
  syntax:
    content: public void AddDirectory(VirtualPath path, bool createSubdirectories = false)
    parameters:
    - id: path
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The path of the directory to add
    - id: createSubdirectories
      type: System.Boolean
      description: Indicates whether to create intermediate directories
    content.vb: Public Sub AddDirectory(path As VirtualPath, createSubdirectories As Boolean = False)
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AddDirectory*
  nameWithType.vb: VirtualStorage(Of T).AddDirectory(VirtualPath, Boolean)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).AddDirectory(AkiraNetwork.VirtualStorageLibrary.VirtualPath, Boolean)
  name.vb: AddDirectory(VirtualPath, Boolean)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AddItem(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualItem{`0},System.Boolean)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AddItem(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualItem{`0},System.Boolean)
  id: AddItem(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualItem{`0},System.Boolean)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: AddItem(VirtualPath, VirtualItem<T>, bool)
  nameWithType: VirtualStorage<T>.AddItem(VirtualPath, VirtualItem<T>, bool)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.AddItem(AkiraNetwork.VirtualStorageLibrary.VirtualPath, AkiraNetwork.VirtualStorageLibrary.VirtualItem<T>, bool)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.Operations.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: AddItem
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.Operations.cs
    startLine: 226
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Adds an item.
  example: []
  syntax:
    content: public void AddItem(VirtualPath itemDirectoryPath, VirtualItem<T> item, bool overwrite = false)
    parameters:
    - id: itemDirectoryPath
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The path of the directory to add the item to
    - id: item
      type: AkiraNetwork.VirtualStorageLibrary.VirtualItem{{T}}
      description: The <xref href="AkiraNetwork.VirtualStorageLibrary.VirtualItem%601" data-throw-if-not-resolved="false"></xref> to add
    - id: overwrite
      type: System.Boolean
      description: Indicates whether to overwrite an existing node
    content.vb: Public Sub AddItem(itemDirectoryPath As VirtualPath, item As VirtualItem(Of T), overwrite As Boolean = False)
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AddItem*
  nameWithType.vb: VirtualStorage(Of T).AddItem(VirtualPath, VirtualItem(Of T), Boolean)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).AddItem(AkiraNetwork.VirtualStorageLibrary.VirtualPath, AkiraNetwork.VirtualStorageLibrary.VirtualItem(Of T), Boolean)
  name.vb: AddItem(VirtualPath, VirtualItem(Of T), Boolean)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AddItem(AkiraNetwork.VirtualStorageLibrary.VirtualPath,`0,System.Boolean)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AddItem(AkiraNetwork.VirtualStorageLibrary.VirtualPath,`0,System.Boolean)
  id: AddItem(AkiraNetwork.VirtualStorageLibrary.VirtualPath,`0,System.Boolean)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: AddItem(VirtualPath, T?, bool)
  nameWithType: VirtualStorage<T>.AddItem(VirtualPath, T?, bool)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.AddItem(AkiraNetwork.VirtualStorageLibrary.VirtualPath, T?, bool)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.Operations.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: AddItem
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.Operations.cs
    startLine: 266
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Adds an item.
  example: []
  syntax:
    content: public void AddItem(VirtualPath itemPath, T? data = default, bool overwrite = false)
    parameters:
    - id: itemPath
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The path of the item to add
    - id: data
      type: '{T}'
      description: The data for the item
    - id: overwrite
      type: System.Boolean
      description: Indicates whether to overwrite an existing node
    content.vb: Public Sub AddItem(itemPath As VirtualPath, data As T = Nothing, overwrite As Boolean = False)
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AddItem*
  nameWithType.vb: VirtualStorage(Of T).AddItem(VirtualPath, T, Boolean)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).AddItem(AkiraNetwork.VirtualStorageLibrary.VirtualPath, T, Boolean)
  name.vb: AddItem(VirtualPath, T, Boolean)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AddSymbolicLink(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualSymbolicLink,System.Boolean)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AddSymbolicLink(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualSymbolicLink,System.Boolean)
  id: AddSymbolicLink(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualSymbolicLink,System.Boolean)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: AddSymbolicLink(VirtualPath, VirtualSymbolicLink, bool)
  nameWithType: VirtualStorage<T>.AddSymbolicLink(VirtualPath, VirtualSymbolicLink, bool)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.AddSymbolicLink(AkiraNetwork.VirtualStorageLibrary.VirtualPath, AkiraNetwork.VirtualStorageLibrary.VirtualSymbolicLink, bool)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.Operations.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: AddSymbolicLink
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.Operations.cs
    startLine: 288
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Adds a symbolic link.
  example: []
  syntax:
    content: public void AddSymbolicLink(VirtualPath linkDirectoryPath, VirtualSymbolicLink link, bool overwrite = false)
    parameters:
    - id: linkDirectoryPath
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The path of the directory to add the symbolic link to
    - id: link
      type: AkiraNetwork.VirtualStorageLibrary.VirtualSymbolicLink
      description: The <xref href="AkiraNetwork.VirtualStorageLibrary.VirtualSymbolicLink" data-throw-if-not-resolved="false"></xref> to add
    - id: overwrite
      type: System.Boolean
      description: Indicates whether to overwrite an existing node
    content.vb: Public Sub AddSymbolicLink(linkDirectoryPath As VirtualPath, link As VirtualSymbolicLink, overwrite As Boolean = False)
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AddSymbolicLink*
  nameWithType.vb: VirtualStorage(Of T).AddSymbolicLink(VirtualPath, VirtualSymbolicLink, Boolean)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).AddSymbolicLink(AkiraNetwork.VirtualStorageLibrary.VirtualPath, AkiraNetwork.VirtualStorageLibrary.VirtualSymbolicLink, Boolean)
  name.vb: AddSymbolicLink(VirtualPath, VirtualSymbolicLink, Boolean)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AddSymbolicLink(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AddSymbolicLink(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  id: AddSymbolicLink(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: AddSymbolicLink(VirtualPath, VirtualPath?, bool)
  nameWithType: VirtualStorage<T>.AddSymbolicLink(VirtualPath, VirtualPath?, bool)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.AddSymbolicLink(AkiraNetwork.VirtualStorageLibrary.VirtualPath, AkiraNetwork.VirtualStorageLibrary.VirtualPath?, bool)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.Operations.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: AddSymbolicLink
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.Operations.cs
    startLine: 337
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Adds a symbolic link.
  example: []
  syntax:
    content: public void AddSymbolicLink(VirtualPath linkPath, VirtualPath? targetPath = null, bool overwrite = false)
    parameters:
    - id: linkPath
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The path of the symbolic link
    - id: targetPath
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The path of the target
    - id: overwrite
      type: System.Boolean
      description: Indicates whether to overwrite an existing node
    content.vb: Public Sub AddSymbolicLink(linkPath As VirtualPath, targetPath As VirtualPath = Nothing, overwrite As Boolean = False)
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AddSymbolicLink*
  nameWithType.vb: VirtualStorage(Of T).AddSymbolicLink(VirtualPath, VirtualPath, Boolean)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).AddSymbolicLink(AkiraNetwork.VirtualStorageLibrary.VirtualPath, AkiraNetwork.VirtualStorageLibrary.VirtualPath, Boolean)
  name.vb: AddSymbolicLink(VirtualPath, VirtualPath, Boolean)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.SetNodeName(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualNodeName,System.Boolean)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.SetNodeName(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualNodeName,System.Boolean)
  id: SetNodeName(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualNodeName,System.Boolean)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: SetNodeName(VirtualPath, VirtualNodeName, bool)
  nameWithType: VirtualStorage<T>.SetNodeName(VirtualPath, VirtualNodeName, bool)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.SetNodeName(AkiraNetwork.VirtualStorageLibrary.VirtualPath, AkiraNetwork.VirtualStorageLibrary.VirtualNodeName, bool)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.Operations.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: SetNodeName
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.Operations.cs
    startLine: 359
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Changes the name of a node.
  example: []
  syntax:
    content: public void SetNodeName(VirtualPath nodePath, VirtualNodeName newName, bool resolveLinks = true)
    parameters:
    - id: nodePath
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The path of the node to rename
    - id: newName
      type: AkiraNetwork.VirtualStorageLibrary.VirtualNodeName
      description: The new name
    - id: resolveLinks
      type: System.Boolean
      description: Indicates whether to resolve symbolic links
    content.vb: Public Sub SetNodeName(nodePath As VirtualPath, newName As VirtualNodeName, resolveLinks As Boolean = True)
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.SetNodeName*
  nameWithType.vb: VirtualStorage(Of T).SetNodeName(VirtualPath, VirtualNodeName, Boolean)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).SetNodeName(AkiraNetwork.VirtualStorageLibrary.VirtualPath, AkiraNetwork.VirtualStorageLibrary.VirtualNodeName, Boolean)
  name.vb: SetNodeName(VirtualPath, VirtualNodeName, Boolean)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.ConvertToAbsolutePath(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.ConvertToAbsolutePath(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  id: ConvertToAbsolutePath(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: ConvertToAbsolutePath(VirtualPath?, VirtualPath?)
  nameWithType: VirtualStorage<T>.ConvertToAbsolutePath(VirtualPath?, VirtualPath?)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.ConvertToAbsolutePath(AkiraNetwork.VirtualStorageLibrary.VirtualPath?, AkiraNetwork.VirtualStorageLibrary.VirtualPath?)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.References.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: ConvertToAbsolutePath
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.References.cs
    startLine: 28
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Converts a relative path to an absolute path.
  example: []
  syntax:
    content: public VirtualPath ConvertToAbsolutePath(VirtualPath? relativePath, VirtualPath? basePath = null)
    parameters:
    - id: relativePath
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The relative path.
    - id: basePath
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The base path. If not specified, CurrentPath is used.
    return:
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The absolute path represented by <xref href="AkiraNetwork.VirtualStorageLibrary.VirtualPath" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function ConvertToAbsolutePath(relativePath As VirtualPath, basePath As VirtualPath = Nothing) As VirtualPath
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.ConvertToAbsolutePath*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if relativePath is null or an empty string.
  nameWithType.vb: VirtualStorage(Of T).ConvertToAbsolutePath(VirtualPath, VirtualPath)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).ConvertToAbsolutePath(AkiraNetwork.VirtualStorageLibrary.VirtualPath, AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  name.vb: ConvertToAbsolutePath(VirtualPath, VirtualPath)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetNode(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetNode(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  id: GetNode(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: GetNode(VirtualPath, bool)
  nameWithType: VirtualStorage<T>.GetNode(VirtualPath, bool)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.GetNode(AkiraNetwork.VirtualStorageLibrary.VirtualPath, bool)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.References.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: GetNode
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.References.cs
    startLine: 63
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Gets the node at the specified path.
  example: []
  syntax:
    content: public VirtualNode GetNode(VirtualPath path, bool followLinks = false)
    parameters:
    - id: path
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The node's path.
    - id: followLinks
      type: System.Boolean
      description: Whether to follow symbolic links.
    return:
      type: AkiraNetwork.VirtualStorageLibrary.VirtualNode
      description: The <xref href="AkiraNetwork.VirtualStorageLibrary.VirtualNode" data-throw-if-not-resolved="false"></xref> at the specified path.
    content.vb: Public Function GetNode(path As VirtualPath, followLinks As Boolean = False) As VirtualNode
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetNode*
  exceptions:
  - type: AkiraNetwork.VirtualStorageLibrary.VirtualNodeNotFoundException
    commentId: T:AkiraNetwork.VirtualStorageLibrary.VirtualNodeNotFoundException
    description: Thrown if the node cannot be found.
  nameWithType.vb: VirtualStorage(Of T).GetNode(VirtualPath, Boolean)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).GetNode(AkiraNetwork.VirtualStorageLibrary.VirtualPath, Boolean)
  name.vb: GetNode(VirtualPath, Boolean)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.TryGetNode(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.TryGetNode(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  id: TryGetNode(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: TryGetNode(VirtualPath, bool)
  nameWithType: VirtualStorage<T>.TryGetNode(VirtualPath, bool)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.TryGetNode(AkiraNetwork.VirtualStorageLibrary.VirtualPath, bool)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.References.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: TryGetNode
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.References.cs
    startLine: 76
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Tries to get the node at the specified path.
  example: []
  syntax:
    content: public VirtualNode? TryGetNode(VirtualPath path, bool followLinks = false)
    parameters:
    - id: path
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The node's path.
    - id: followLinks
      type: System.Boolean
      description: Whether to follow symbolic links.
    return:
      type: AkiraNetwork.VirtualStorageLibrary.VirtualNode
      description: The found <xref href="AkiraNetwork.VirtualStorageLibrary.VirtualNode" data-throw-if-not-resolved="false"></xref>, or null if not found.
    content.vb: Public Function TryGetNode(path As VirtualPath, followLinks As Boolean = False) As VirtualNode
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.TryGetNode*
  nameWithType.vb: VirtualStorage(Of T).TryGetNode(VirtualPath, Boolean)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).TryGetNode(AkiraNetwork.VirtualStorageLibrary.VirtualPath, Boolean)
  name.vb: TryGetNode(VirtualPath, Boolean)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.ResolveLinkTarget(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.ResolveLinkTarget(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  id: ResolveLinkTarget(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: ResolveLinkTarget(VirtualPath)
  nameWithType: VirtualStorage<T>.ResolveLinkTarget(VirtualPath)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.ResolveLinkTarget(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.References.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: ResolveLinkTarget
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.References.cs
    startLine: 96
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Resolves the target of the symbolic link at the specified path.
  example: []
  syntax:
    content: public VirtualPath ResolveLinkTarget(VirtualPath path)
    parameters:
    - id: path
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The path of the symbolic link.
    return:
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The target path.
    content.vb: Public Function ResolveLinkTarget(path As VirtualPath) As VirtualPath
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.ResolveLinkTarget*
  exceptions:
  - type: AkiraNetwork.VirtualStorageLibrary.VirtualNodeNotFoundException
    commentId: T:AkiraNetwork.VirtualStorageLibrary.VirtualNodeNotFoundException
    description: Thrown if the node cannot be found.
  nameWithType.vb: VirtualStorage(Of T).ResolveLinkTarget(VirtualPath)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).ResolveLinkTarget(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.TryResolveLinkTarget(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.TryResolveLinkTarget(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  id: TryResolveLinkTarget(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: TryResolveLinkTarget(VirtualPath)
  nameWithType: VirtualStorage<T>.TryResolveLinkTarget(VirtualPath)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.TryResolveLinkTarget(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.References.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: TryResolveLinkTarget
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.References.cs
    startLine: 108
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Tries to resolve the target of the symbolic link at the specified path.
  example: []
  syntax:
    content: public VirtualPath? TryResolveLinkTarget(VirtualPath path)
    parameters:
    - id: path
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The path of the symbolic link.
    return:
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The target path, or null if the node cannot be found.
    content.vb: Public Function TryResolveLinkTarget(path As VirtualPath) As VirtualPath
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.TryResolveLinkTarget*
  nameWithType.vb: VirtualStorage(Of T).TryResolveLinkTarget(VirtualPath)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).TryResolveLinkTarget(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetDirectory(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetDirectory(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  id: GetDirectory(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: GetDirectory(VirtualPath, bool)
  nameWithType: VirtualStorage<T>.GetDirectory(VirtualPath, bool)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.GetDirectory(AkiraNetwork.VirtualStorageLibrary.VirtualPath, bool)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.References.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: GetDirectory
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.References.cs
    startLine: 127
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Gets the directory at the specified path.
  example: []
  syntax:
    content: public VirtualDirectory GetDirectory(VirtualPath path, bool followLinks = false)
    parameters:
    - id: path
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The path of the directory.
    - id: followLinks
      type: System.Boolean
      description: Whether to follow symbolic links.
    return:
      type: AkiraNetwork.VirtualStorageLibrary.VirtualDirectory
      description: The <xref href="AkiraNetwork.VirtualStorageLibrary.VirtualDirectory" data-throw-if-not-resolved="false"></xref> at the specified path.
    content.vb: Public Function GetDirectory(path As VirtualPath, followLinks As Boolean = False) As VirtualDirectory
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetDirectory*
  exceptions:
  - type: AkiraNetwork.VirtualStorageLibrary.VirtualNodeNotFoundException
    commentId: T:AkiraNetwork.VirtualStorageLibrary.VirtualNodeNotFoundException
    description: Thrown if the node cannot be found.
  nameWithType.vb: VirtualStorage(Of T).GetDirectory(VirtualPath, Boolean)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).GetDirectory(AkiraNetwork.VirtualStorageLibrary.VirtualPath, Boolean)
  name.vb: GetDirectory(VirtualPath, Boolean)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.TryGetDirectory(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.TryGetDirectory(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  id: TryGetDirectory(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: TryGetDirectory(VirtualPath, bool)
  nameWithType: VirtualStorage<T>.TryGetDirectory(VirtualPath, bool)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.TryGetDirectory(AkiraNetwork.VirtualStorageLibrary.VirtualPath, bool)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.References.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: TryGetDirectory
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.References.cs
    startLine: 148
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Tries to get the directory at the specified path.
  example: []
  syntax:
    content: public VirtualDirectory? TryGetDirectory(VirtualPath path, bool followLinks = false)
    parameters:
    - id: path
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The path of the directory.
    - id: followLinks
      type: System.Boolean
      description: Whether to follow symbolic links.
    return:
      type: AkiraNetwork.VirtualStorageLibrary.VirtualDirectory
      description: The found <xref href="AkiraNetwork.VirtualStorageLibrary.VirtualDirectory" data-throw-if-not-resolved="false"></xref>, or null if not found.
    content.vb: Public Function TryGetDirectory(path As VirtualPath, followLinks As Boolean = False) As VirtualDirectory
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.TryGetDirectory*
  nameWithType.vb: VirtualStorage(Of T).TryGetDirectory(VirtualPath, Boolean)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).TryGetDirectory(AkiraNetwork.VirtualStorageLibrary.VirtualPath, Boolean)
  name.vb: TryGetDirectory(VirtualPath, Boolean)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetItem(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetItem(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  id: GetItem(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: GetItem(VirtualPath, bool)
  nameWithType: VirtualStorage<T>.GetItem(VirtualPath, bool)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.GetItem(AkiraNetwork.VirtualStorageLibrary.VirtualPath, bool)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.References.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: GetItem
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.References.cs
    startLine: 167
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Gets the item at the specified path.
  example: []
  syntax:
    content: public VirtualItem<T> GetItem(VirtualPath path, bool followLinks = false)
    parameters:
    - id: path
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The path of the item.
    - id: followLinks
      type: System.Boolean
      description: Whether to follow symbolic links.
    return:
      type: AkiraNetwork.VirtualStorageLibrary.VirtualItem{{T}}
      description: The <xref href="AkiraNetwork.VirtualStorageLibrary.VirtualItem%601" data-throw-if-not-resolved="false"></xref> at the specified path.
    content.vb: Public Function GetItem(path As VirtualPath, followLinks As Boolean = False) As VirtualItem(Of T)
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetItem*
  exceptions:
  - type: AkiraNetwork.VirtualStorageLibrary.VirtualNodeNotFoundException
    commentId: T:AkiraNetwork.VirtualStorageLibrary.VirtualNodeNotFoundException
    description: Thrown if the node cannot be found.
  nameWithType.vb: VirtualStorage(Of T).GetItem(VirtualPath, Boolean)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).GetItem(AkiraNetwork.VirtualStorageLibrary.VirtualPath, Boolean)
  name.vb: GetItem(VirtualPath, Boolean)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.TryGetItem(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.TryGetItem(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  id: TryGetItem(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: TryGetItem(VirtualPath, bool)
  nameWithType: VirtualStorage<T>.TryGetItem(VirtualPath, bool)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.TryGetItem(AkiraNetwork.VirtualStorageLibrary.VirtualPath, bool)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.References.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: TryGetItem
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.References.cs
    startLine: 188
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Tries to get the item at the specified path.
  example: []
  syntax:
    content: public VirtualItem<T>? TryGetItem(VirtualPath path, bool followLinks = false)
    parameters:
    - id: path
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The path of the item.
    - id: followLinks
      type: System.Boolean
      description: Whether to follow symbolic links.
    return:
      type: AkiraNetwork.VirtualStorageLibrary.VirtualItem{{T}}
      description: The found <xref href="AkiraNetwork.VirtualStorageLibrary.VirtualItem%601" data-throw-if-not-resolved="false"></xref>, or null if not found.
    content.vb: Public Function TryGetItem(path As VirtualPath, followLinks As Boolean = False) As VirtualItem(Of T)
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.TryGetItem*
  nameWithType.vb: VirtualStorage(Of T).TryGetItem(VirtualPath, Boolean)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).TryGetItem(AkiraNetwork.VirtualStorageLibrary.VirtualPath, Boolean)
  name.vb: TryGetItem(VirtualPath, Boolean)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetSymbolicLink(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetSymbolicLink(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  id: GetSymbolicLink(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: GetSymbolicLink(VirtualPath)
  nameWithType: VirtualStorage<T>.GetSymbolicLink(VirtualPath)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.GetSymbolicLink(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.References.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: GetSymbolicLink
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.References.cs
    startLine: 207
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Gets the symbolic link at the specified path.
  remarks: This method does not have a followLinks parameter because it retrieves the symbolic link itself.
  example: []
  syntax:
    content: public VirtualSymbolicLink GetSymbolicLink(VirtualPath path)
    parameters:
    - id: path
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The path of the symbolic link.
    return:
      type: AkiraNetwork.VirtualStorageLibrary.VirtualSymbolicLink
      description: The <xref href="AkiraNetwork.VirtualStorageLibrary.VirtualSymbolicLink" data-throw-if-not-resolved="false"></xref> at the specified path.
    content.vb: Public Function GetSymbolicLink(path As VirtualPath) As VirtualSymbolicLink
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetSymbolicLink*
  exceptions:
  - type: AkiraNetwork.VirtualStorageLibrary.VirtualNodeNotFoundException
    commentId: T:AkiraNetwork.VirtualStorageLibrary.VirtualNodeNotFoundException
    description: Thrown if the node cannot be found.
  nameWithType.vb: VirtualStorage(Of T).GetSymbolicLink(VirtualPath)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).GetSymbolicLink(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.TryGetSymbolicLink(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.TryGetSymbolicLink(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  id: TryGetSymbolicLink(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: TryGetSymbolicLink(VirtualPath)
  nameWithType: VirtualStorage<T>.TryGetSymbolicLink(VirtualPath)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.TryGetSymbolicLink(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.References.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: TryGetSymbolicLink
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.References.cs
    startLine: 234
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Tries to get the symbolic link at the specified path.
  remarks: This method does not have a followLinks parameter because it retrieves the symbolic link itself.
  example: []
  syntax:
    content: public VirtualSymbolicLink? TryGetSymbolicLink(VirtualPath path)
    parameters:
    - id: path
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The path of the symbolic link.
    return:
      type: AkiraNetwork.VirtualStorageLibrary.VirtualSymbolicLink
      description: The found <xref href="AkiraNetwork.VirtualStorageLibrary.VirtualSymbolicLink" data-throw-if-not-resolved="false"></xref>, or null if not found.
    content.vb: Public Function TryGetSymbolicLink(path As VirtualPath) As VirtualSymbolicLink
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.TryGetSymbolicLink*
  nameWithType.vb: VirtualStorage(Of T).TryGetSymbolicLink(VirtualPath)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).TryGetSymbolicLink(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetNodeType(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetNodeType(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  id: GetNodeType(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: GetNodeType(VirtualPath, bool)
  nameWithType: VirtualStorage<T>.GetNodeType(VirtualPath, bool)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.GetNodeType(AkiraNetwork.VirtualStorageLibrary.VirtualPath, bool)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.References.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: GetNodeType
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.References.cs
    startLine: 252
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Gets the node type at the specified path.
  example: []
  syntax:
    content: public VirtualNodeType GetNodeType(VirtualPath path, bool followLinks = false)
    parameters:
    - id: path
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The node's path.
    - id: followLinks
      type: System.Boolean
      description: Whether to follow symbolic links.
    return:
      type: AkiraNetwork.VirtualStorageLibrary.VirtualNodeType
      description: The <xref href="AkiraNetwork.VirtualStorageLibrary.VirtualNodeType" data-throw-if-not-resolved="false"></xref> of the node.
    content.vb: Public Function GetNodeType(path As VirtualPath, followLinks As Boolean = False) As VirtualNodeType
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetNodeType*
  nameWithType.vb: VirtualStorage(Of T).GetNodeType(VirtualPath, Boolean)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).GetNodeType(AkiraNetwork.VirtualStorageLibrary.VirtualPath, Boolean)
  name.vb: GetNodeType(VirtualPath, Boolean)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetNodes(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter,System.Boolean,System.Boolean)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetNodes(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter,System.Boolean,System.Boolean)
  id: GetNodes(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter,System.Boolean,System.Boolean)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: GetNodes(VirtualPath, VirtualNodeTypeFilter, bool, bool)
  nameWithType: VirtualStorage<T>.GetNodes(VirtualPath, VirtualNodeTypeFilter, bool, bool)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.GetNodes(AkiraNetwork.VirtualStorageLibrary.VirtualPath, AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter, bool, bool)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.References.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: GetNodes
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.References.cs
    startLine: 269
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Gets the nodes in the path tree starting from the specified path.
  remarks: This method may be integrated, reorganized, or deprecated in the near future.
  example: []
  syntax:
    content: public IEnumerable<VirtualNode> GetNodes(VirtualPath basePath, VirtualNodeTypeFilter nodeType = VirtualNodeTypeFilter.All, bool recursive = false, bool followLinks = false)
    parameters:
    - id: basePath
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The base path.
    - id: nodeType
      type: AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter
      description: The node type filter.
    - id: recursive
      type: System.Boolean
      description: Whether to retrieve nodes recursively.
    - id: followLinks
      type: System.Boolean
      description: Whether to follow symbolic links.
    return:
      type: System.Collections.Generic.IEnumerable{AkiraNetwork.VirtualStorageLibrary.VirtualNode}
      description: The nodes in the path tree starting from the specified path <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function GetNodes(basePath As VirtualPath, nodeType As VirtualNodeTypeFilter = VirtualNodeTypeFilter.All, recursive As Boolean = False, followLinks As Boolean = False) As IEnumerable(Of VirtualNode)
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetNodes*
  nameWithType.vb: VirtualStorage(Of T).GetNodes(VirtualPath, VirtualNodeTypeFilter, Boolean, Boolean)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).GetNodes(AkiraNetwork.VirtualStorageLibrary.VirtualPath, AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter, Boolean, Boolean)
  name.vb: GetNodes(VirtualPath, VirtualNodeTypeFilter, Boolean, Boolean)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetNodes(AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter,System.Boolean,System.Boolean)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetNodes(AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter,System.Boolean,System.Boolean)
  id: GetNodes(AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter,System.Boolean,System.Boolean)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: GetNodes(VirtualNodeTypeFilter, bool, bool)
  nameWithType: VirtualStorage<T>.GetNodes(VirtualNodeTypeFilter, bool, bool)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.GetNodes(AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter, bool, bool)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.References.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: GetNodes
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.References.cs
    startLine: 284
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Gets the nodes in the path tree starting from the current path.
  remarks: This method may be integrated, reorganized, or deprecated in the near future.
  example: []
  syntax:
    content: public IEnumerable<VirtualNode> GetNodes(VirtualNodeTypeFilter nodeType = VirtualNodeTypeFilter.All, bool recursive = false, bool followLinks = false)
    parameters:
    - id: nodeType
      type: AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter
      description: The node type filter.
    - id: recursive
      type: System.Boolean
      description: Whether to retrieve nodes recursively.
    - id: followLinks
      type: System.Boolean
      description: Whether to follow symbolic links.
    return:
      type: System.Collections.Generic.IEnumerable{AkiraNetwork.VirtualStorageLibrary.VirtualNode}
      description: The nodes in the path tree starting from the current path <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function GetNodes(nodeType As VirtualNodeTypeFilter = VirtualNodeTypeFilter.All, recursive As Boolean = False, followLinks As Boolean = False) As IEnumerable(Of VirtualNode)
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetNodes*
  nameWithType.vb: VirtualStorage(Of T).GetNodes(VirtualNodeTypeFilter, Boolean, Boolean)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).GetNodes(AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter, Boolean, Boolean)
  name.vb: GetNodes(VirtualNodeTypeFilter, Boolean, Boolean)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetNodesWithPaths(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter,System.Boolean,System.Boolean)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetNodesWithPaths(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter,System.Boolean,System.Boolean)
  id: GetNodesWithPaths(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter,System.Boolean,System.Boolean)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: GetNodesWithPaths(VirtualPath, VirtualNodeTypeFilter, bool, bool)
  nameWithType: VirtualStorage<T>.GetNodesWithPaths(VirtualPath, VirtualNodeTypeFilter, bool, bool)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.GetNodesWithPaths(AkiraNetwork.VirtualStorageLibrary.VirtualPath, AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter, bool, bool)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.References.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: GetNodesWithPaths
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.References.cs
    startLine: 300
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Gets the paths in the path tree starting from the specified path.
  remarks: This method may be integrated, reorganized, or deprecated in the near future.
  example: []
  syntax:
    content: public IEnumerable<VirtualPath> GetNodesWithPaths(VirtualPath basePath, VirtualNodeTypeFilter nodeType = VirtualNodeTypeFilter.All, bool recursive = false, bool followLinks = false)
    parameters:
    - id: basePath
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The base path.
    - id: nodeType
      type: AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter
      description: The node type filter.
    - id: recursive
      type: System.Boolean
      description: Whether to retrieve paths recursively.
    - id: followLinks
      type: System.Boolean
      description: Whether to follow symbolic links.
    return:
      type: System.Collections.Generic.IEnumerable{AkiraNetwork.VirtualStorageLibrary.VirtualPath}
      description: The paths in the path tree starting from the specified path <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function GetNodesWithPaths(basePath As VirtualPath, nodeType As VirtualNodeTypeFilter = VirtualNodeTypeFilter.All, recursive As Boolean = False, followLinks As Boolean = False) As IEnumerable(Of VirtualPath)
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetNodesWithPaths*
  nameWithType.vb: VirtualStorage(Of T).GetNodesWithPaths(VirtualPath, VirtualNodeTypeFilter, Boolean, Boolean)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).GetNodesWithPaths(AkiraNetwork.VirtualStorageLibrary.VirtualPath, AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter, Boolean, Boolean)
  name.vb: GetNodesWithPaths(VirtualPath, VirtualNodeTypeFilter, Boolean, Boolean)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetNodesWithPaths(AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter,System.Boolean,System.Boolean)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetNodesWithPaths(AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter,System.Boolean,System.Boolean)
  id: GetNodesWithPaths(AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter,System.Boolean,System.Boolean)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: GetNodesWithPaths(VirtualNodeTypeFilter, bool, bool)
  nameWithType: VirtualStorage<T>.GetNodesWithPaths(VirtualNodeTypeFilter, bool, bool)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.GetNodesWithPaths(AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter, bool, bool)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.References.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: GetNodesWithPaths
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.References.cs
    startLine: 315
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Gets the paths in the path tree starting from the current path.
  remarks: This method may be integrated, reorganized, or deprecated in the near future.
  example: []
  syntax:
    content: public IEnumerable<VirtualPath> GetNodesWithPaths(VirtualNodeTypeFilter nodeType = VirtualNodeTypeFilter.All, bool recursive = false, bool followLinks = false)
    parameters:
    - id: nodeType
      type: AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter
      description: The node type filter.
    - id: recursive
      type: System.Boolean
      description: Whether to retrieve paths recursively.
    - id: followLinks
      type: System.Boolean
      description: Whether to follow symbolic links.
    return:
      type: System.Collections.Generic.IEnumerable{AkiraNetwork.VirtualStorageLibrary.VirtualPath}
      description: The paths in the path tree starting from the current path <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function GetNodesWithPaths(nodeType As VirtualNodeTypeFilter = VirtualNodeTypeFilter.All, recursive As Boolean = False, followLinks As Boolean = False) As IEnumerable(Of VirtualPath)
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetNodesWithPaths*
  nameWithType.vb: VirtualStorage(Of T).GetNodesWithPaths(VirtualNodeTypeFilter, Boolean, Boolean)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).GetNodesWithPaths(AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter, Boolean, Boolean)
  name.vb: GetNodesWithPaths(VirtualNodeTypeFilter, Boolean, Boolean)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.ExpandPath(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter,System.Boolean,System.Boolean)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.ExpandPath(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter,System.Boolean,System.Boolean)
  id: ExpandPath(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter,System.Boolean,System.Boolean)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: ExpandPath(VirtualPath, VirtualNodeTypeFilter, bool, bool)
  nameWithType: VirtualStorage<T>.ExpandPath(VirtualPath, VirtualNodeTypeFilter, bool, bool)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.ExpandPath(AkiraNetwork.VirtualStorageLibrary.VirtualPath, AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter, bool, bool)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.References.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: ExpandPath
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.References.cs
    startLine: 334
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Expands a path that contains wildcards.
  remarks: >-
    <p>followLinks indicates whether to follow links during the recursive traversal of nodes when the terminal node of the path is a symbolic link.</p>

    <p>resolveLinks indicates whether to resolve links when non-terminal nodes of the path are symbolic links.</p>
  example: []
  syntax:
    content: public IEnumerable<VirtualPath> ExpandPath(VirtualPath path, VirtualNodeTypeFilter filter = VirtualNodeTypeFilter.All, bool followLinks = true, bool resolveLinks = true)
    parameters:
    - id: path
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The path.
    - id: filter
      type: AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter
      description: The node type filter.
    - id: followLinks
      type: System.Boolean
      description: Whether to follow symbolic links.
    - id: resolveLinks
      type: System.Boolean
      description: Whether to resolve symbolic links.
    return:
      type: System.Collections.Generic.IEnumerable{AkiraNetwork.VirtualStorageLibrary.VirtualPath}
      description: The expanded paths <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function ExpandPath(path As VirtualPath, filter As VirtualNodeTypeFilter = VirtualNodeTypeFilter.All, followLinks As Boolean = True, resolveLinks As Boolean = True) As IEnumerable(Of VirtualPath)
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.ExpandPath*
  nameWithType.vb: VirtualStorage(Of T).ExpandPath(VirtualPath, VirtualNodeTypeFilter, Boolean, Boolean)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).ExpandPath(AkiraNetwork.VirtualStorageLibrary.VirtualPath, AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter, Boolean, Boolean)
  name.vb: ExpandPath(VirtualPath, VirtualNodeTypeFilter, Boolean, Boolean)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.NodeExists(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.NodeExists(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  id: NodeExists(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: NodeExists(VirtualPath, bool)
  nameWithType: VirtualStorage<T>.NodeExists(VirtualPath, bool)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.NodeExists(AkiraNetwork.VirtualStorageLibrary.VirtualPath, bool)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.References.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: NodeExists
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.References.cs
    startLine: 350
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Checks if a node exists at the specified path.
  example: []
  syntax:
    content: public bool NodeExists(VirtualPath path, bool followLinks = false)
    parameters:
    - id: path
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The node's path.
    - id: followLinks
      type: System.Boolean
      description: Whether to follow symbolic links.
    return:
      type: System.Boolean
      description: True if the node exists; otherwise, false.
    content.vb: Public Function NodeExists(path As VirtualPath, followLinks As Boolean = False) As Boolean
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.NodeExists*
  nameWithType.vb: VirtualStorage(Of T).NodeExists(VirtualPath, Boolean)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).NodeExists(AkiraNetwork.VirtualStorageLibrary.VirtualPath, Boolean)
  name.vb: NodeExists(VirtualPath, Boolean)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.DirectoryExists(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.DirectoryExists(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  id: DirectoryExists(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: DirectoryExists(VirtualPath, bool)
  nameWithType: VirtualStorage<T>.DirectoryExists(VirtualPath, bool)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.DirectoryExists(AkiraNetwork.VirtualStorageLibrary.VirtualPath, bool)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.References.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: DirectoryExists
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.References.cs
    startLine: 363
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Checks if a directory exists at the specified path.
  example: []
  syntax:
    content: public bool DirectoryExists(VirtualPath path, bool followLinks = false)
    parameters:
    - id: path
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The directory's path.
    - id: followLinks
      type: System.Boolean
      description: Whether to follow symbolic links.
    return:
      type: System.Boolean
      description: True if the directory exists; otherwise, false.
    content.vb: Public Function DirectoryExists(path As VirtualPath, followLinks As Boolean = False) As Boolean
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.DirectoryExists*
  nameWithType.vb: VirtualStorage(Of T).DirectoryExists(VirtualPath, Boolean)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).DirectoryExists(AkiraNetwork.VirtualStorageLibrary.VirtualPath, Boolean)
  name.vb: DirectoryExists(VirtualPath, Boolean)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.ItemExists(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.ItemExists(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  id: ItemExists(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: ItemExists(VirtualPath, bool)
  nameWithType: VirtualStorage<T>.ItemExists(VirtualPath, bool)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.ItemExists(AkiraNetwork.VirtualStorageLibrary.VirtualPath, bool)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.References.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: ItemExists
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.References.cs
    startLine: 381
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Checks if an item exists at the specified path.
  example: []
  syntax:
    content: public bool ItemExists(VirtualPath path, bool followLinks = false)
    parameters:
    - id: path
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The item's path.
    - id: followLinks
      type: System.Boolean
      description: Whether to follow symbolic links.
    return:
      type: System.Boolean
      description: True if the item exists; otherwise, false.
    content.vb: Public Function ItemExists(path As VirtualPath, followLinks As Boolean = False) As Boolean
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.ItemExists*
  nameWithType.vb: VirtualStorage(Of T).ItemExists(VirtualPath, Boolean)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).ItemExists(AkiraNetwork.VirtualStorageLibrary.VirtualPath, Boolean)
  name.vb: ItemExists(VirtualPath, Boolean)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.SymbolicLinkExists(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.SymbolicLinkExists(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  id: SymbolicLinkExists(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: SymbolicLinkExists(VirtualPath)
  nameWithType: VirtualStorage<T>.SymbolicLinkExists(VirtualPath)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.SymbolicLinkExists(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.References.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: SymbolicLinkExists
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.References.cs
    startLine: 395
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Checks if a symbolic link exists at the specified path.
  example: []
  syntax:
    content: public bool SymbolicLinkExists(VirtualPath path)
    parameters:
    - id: path
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The symbolic link's path.
    return:
      type: System.Boolean
      description: True if the symbolic link exists; otherwise, false.
    content.vb: Public Function SymbolicLinkExists(path As VirtualPath) As Boolean
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.SymbolicLinkExists*
  nameWithType.vb: VirtualStorage(Of T).SymbolicLinkExists(VirtualPath)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).SymbolicLinkExists(AkiraNetwork.VirtualStorageLibrary.VirtualPath)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.RemoveNode(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.RemoveNode(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean,System.Boolean,System.Boolean)
  id: RemoveNode(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean,System.Boolean,System.Boolean)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: RemoveNode(VirtualPath, bool, bool, bool)
  nameWithType: VirtualStorage<T>.RemoveNode(VirtualPath, bool, bool, bool)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.RemoveNode(AkiraNetwork.VirtualStorageLibrary.VirtualPath, bool, bool, bool)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.RemoveTask.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: RemoveNode
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.RemoveTask.cs
    startLine: 44
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Removes the node at the specified path.
  remarks: >-
    <p>

    If followLinks is true and the terminal node in the path is a 

    symbolic link, the path tree after resolving the path will be 

    removed, and the symbolic link will also be removed. If false, 

    only the symbolic link itself is removed.

    </p>

    <p>

    resolveLinks indicates whether to resolve links when 

    non-terminal nodes (from the top node to the parent of the 

    terminal node) in the path are symbolic links.

    </p>
  example: []
  syntax:
    content: public void RemoveNode(VirtualPath nodePath, bool recursive = false, bool followLinks = false, bool resolveLinks = true)
    parameters:
    - id: nodePath
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The path of the node to remove.
    - id: recursive
      type: System.Boolean
      description: Whether to remove recursively.
    - id: followLinks
      type: System.Boolean
      description: Whether to follow symbolic links.
    - id: resolveLinks
      type: System.Boolean
      description: Whether to resolve link targets.
    content.vb: Public Sub RemoveNode(nodePath As VirtualPath, recursive As Boolean = False, followLinks As Boolean = False, resolveLinks As Boolean = True)
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.RemoveNode*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown when trying to remove the root node or a non-empty directory.
  nameWithType.vb: VirtualStorage(Of T).RemoveNode(VirtualPath, Boolean, Boolean, Boolean)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).RemoveNode(AkiraNetwork.VirtualStorageLibrary.VirtualPath, Boolean, Boolean, Boolean)
  name.vb: RemoveNode(VirtualPath, Boolean, Boolean, Boolean)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.WalkPathToTarget(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.NotifyNodeDelegate,AkiraNetwork.VirtualStorageLibrary.ActionNodeDelegate,System.Boolean,System.Boolean)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.WalkPathToTarget(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.NotifyNodeDelegate,AkiraNetwork.VirtualStorageLibrary.ActionNodeDelegate,System.Boolean,System.Boolean)
  id: WalkPathToTarget(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.NotifyNodeDelegate,AkiraNetwork.VirtualStorageLibrary.ActionNodeDelegate,System.Boolean,System.Boolean)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: WalkPathToTarget(VirtualPath, NotifyNodeDelegate?, ActionNodeDelegate?, bool, bool)
  nameWithType: VirtualStorage<T>.WalkPathToTarget(VirtualPath, NotifyNodeDelegate?, ActionNodeDelegate?, bool, bool)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.WalkPathToTarget(AkiraNetwork.VirtualStorageLibrary.VirtualPath, AkiraNetwork.VirtualStorageLibrary.NotifyNodeDelegate?, AkiraNetwork.VirtualStorageLibrary.ActionNodeDelegate?, bool, bool)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.WalkPathToTarget.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: WalkPathToTarget
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.WalkPathToTarget.cs
    startLine: 30
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Traverses the path to the target node specified by the virtual path.
  example: []
  syntax:
    content: public VirtualNodeContext WalkPathToTarget(VirtualPath targetPath, NotifyNodeDelegate? notifyNode = null, ActionNodeDelegate? actionNode = null, bool followLinks = true, bool exceptionEnabled = true)
    parameters:
    - id: targetPath
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The target virtual path
    - id: notifyNode
      type: AkiraNetwork.VirtualStorageLibrary.NotifyNodeDelegate
      description: A delegate to notify information about the node when each node is reached
    - id: actionNode
      type: AkiraNetwork.VirtualStorageLibrary.ActionNodeDelegate
      description: A delegate to perform actions when each node is reached
    - id: followLinks
      type: System.Boolean
      description: A flag indicating whether to follow symbolic links
    - id: exceptionEnabled
      type: System.Boolean
      description: A flag indicating whether to enable exceptions. If true, exceptions are thrown; if false, the Node in <xref href="AkiraNetwork.VirtualStorageLibrary.VirtualNodeContext" data-throw-if-not-resolved="false"></xref> will be returned as null.
    return:
      type: AkiraNetwork.VirtualStorageLibrary.VirtualNodeContext
      description: An instance of <xref href="AkiraNetwork.VirtualStorageLibrary.VirtualNodeContext" data-throw-if-not-resolved="false"></xref> containing information about the target node
    content.vb: Public Function WalkPathToTarget(targetPath As VirtualPath, notifyNode As NotifyNodeDelegate = Nothing, actionNode As ActionNodeDelegate = Nothing, followLinks As Boolean = True, exceptionEnabled As Boolean = True) As VirtualNodeContext
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.WalkPathToTarget*
  nameWithType.vb: VirtualStorage(Of T).WalkPathToTarget(VirtualPath, NotifyNodeDelegate, ActionNodeDelegate, Boolean, Boolean)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).WalkPathToTarget(AkiraNetwork.VirtualStorageLibrary.VirtualPath, AkiraNetwork.VirtualStorageLibrary.NotifyNodeDelegate, AkiraNetwork.VirtualStorageLibrary.ActionNodeDelegate, Boolean, Boolean)
  name.vb: WalkPathToTarget(VirtualPath, NotifyNodeDelegate, ActionNodeDelegate, Boolean, Boolean)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.ExpandPathTree(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter,System.Boolean,System.Boolean)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.ExpandPathTree(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter,System.Boolean,System.Boolean)
  id: ExpandPathTree(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter,System.Boolean,System.Boolean)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: ExpandPathTree(VirtualPath, VirtualNodeTypeFilter, bool, bool)
  nameWithType: VirtualStorage<T>.ExpandPathTree(VirtualPath, VirtualNodeTypeFilter, bool, bool)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.ExpandPathTree(AkiraNetwork.VirtualStorageLibrary.VirtualPath, AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter, bool, bool)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.WalkPathTree.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: ExpandPathTree
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.WalkPathTree.cs
    startLine: 40
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Expands the virtual path containing wildcards.
  remarks: >-
    <p>followLinks indicates whether to follow links during the

    recursive traversal process when the terminal node in the virtual

    path is a symbolic link.</p>

    <p>resolveLinks indicates whether to resolve links when nodes

    other than the terminal node in the virtual path are symbolic links.

    </p>
  example: []
  syntax:
    content: public IEnumerable<VirtualNodeContext> ExpandPathTree(VirtualPath path, VirtualNodeTypeFilter filter = VirtualNodeTypeFilter.All, bool followLinks = true, bool resolveLinks = true)
    parameters:
    - id: path
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The virtual path containing wildcards
    - id: filter
      type: AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter
      description: The filter to apply for node types
    - id: followLinks
      type: System.Boolean
      description: >-
        A flag indicating whether to follow
            symbolic links
    - id: resolveLinks
      type: System.Boolean
      description: >-
        A flag indicating whether to resolve
            symbolic links
    return:
      type: System.Collections.Generic.IEnumerable{AkiraNetwork.VirtualStorageLibrary.VirtualNodeContext}
      description: >-
        An enumerable of <xref href="AkiraNetwork.VirtualStorageLibrary.VirtualNodeContext" data-throw-if-not-resolved="false"></xref> containing
            information about the expanded nodes
    content.vb: Public Function ExpandPathTree(path As VirtualPath, filter As VirtualNodeTypeFilter = VirtualNodeTypeFilter.All, followLinks As Boolean = True, resolveLinks As Boolean = True) As IEnumerable(Of VirtualNodeContext)
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.ExpandPathTree*
  nameWithType.vb: VirtualStorage(Of T).ExpandPathTree(VirtualPath, VirtualNodeTypeFilter, Boolean, Boolean)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).ExpandPathTree(AkiraNetwork.VirtualStorageLibrary.VirtualPath, AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter, Boolean, Boolean)
  name.vb: ExpandPathTree(VirtualPath, VirtualNodeTypeFilter, Boolean, Boolean)
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.WalkPathTree(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.WalkPathTree(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter,System.Boolean,System.Boolean,System.Boolean)
  id: WalkPathTree(AkiraNetwork.VirtualStorageLibrary.VirtualPath,AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter,System.Boolean,System.Boolean,System.Boolean)
  parent: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
  langs:
  - csharp
  - vb
  name: WalkPathTree(VirtualPath, VirtualNodeTypeFilter, bool, bool, bool)
  nameWithType: VirtualStorage<T>.WalkPathTree(VirtualPath, VirtualNodeTypeFilter, bool, bool, bool)
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.WalkPathTree(AkiraNetwork.VirtualStorageLibrary.VirtualPath, AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter, bool, bool, bool)
  type: Method
  source:
    remote:
      path: AkiraNetwork/VirtualStorageLibrary/VS.WalkPathTree.cs
      branch: gh-pages
      repo: https://github.com/shimodateakira/VirtualStorageLibrary
    id: WalkPathTree
    path: ../AkiraNetwork/VirtualStorageLibrary/VS.WalkPathTree.cs
    startLine: 97
  assemblies:
  - VirtualStorageLibrary
  namespace: AkiraNetwork.VirtualStorageLibrary
  summary: Traverses the path tree starting from the specified path.
  remarks: >-
    <p>followLinks indicates whether to follow links during the

    recursive traversal process when the terminal node in the virtual

    path is a symbolic link.</p>

    <p>resolveLinks indicates whether to resolve links when nodes

    other than the terminal node in the virtual path are symbolic links.

    </p>
  example: []
  syntax:
    content: public IEnumerable<VirtualNodeContext> WalkPathTree(VirtualPath basePath, VirtualNodeTypeFilter filter = VirtualNodeTypeFilter.All, bool recursive = true, bool followLinks = true, bool resolveLinks = true)
    parameters:
    - id: basePath
      type: AkiraNetwork.VirtualStorageLibrary.VirtualPath
      description: The base virtual path
    - id: filter
      type: AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter
      description: The filter to apply for node types
    - id: recursive
      type: System.Boolean
      description: >-
        A flag indicating whether to traverse
            recursively
    - id: followLinks
      type: System.Boolean
      description: >-
        A flag indicating whether to follow
            symbolic links
    - id: resolveLinks
      type: System.Boolean
      description: >-
        A flag indicating whether to resolve
            symbolic links
    return:
      type: System.Collections.Generic.IEnumerable{AkiraNetwork.VirtualStorageLibrary.VirtualNodeContext}
      description: >-
        An enumerable of <xref href="AkiraNetwork.VirtualStorageLibrary.VirtualNodeContext" data-throw-if-not-resolved="false"></xref> containing
            information about the traversed nodes
    content.vb: Public Function WalkPathTree(basePath As VirtualPath, filter As VirtualNodeTypeFilter = VirtualNodeTypeFilter.All, recursive As Boolean = True, followLinks As Boolean = True, resolveLinks As Boolean = True) As IEnumerable(Of VirtualNodeContext)
  overload: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.WalkPathTree*
  nameWithType.vb: VirtualStorage(Of T).WalkPathTree(VirtualPath, VirtualNodeTypeFilter, Boolean, Boolean, Boolean)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).WalkPathTree(AkiraNetwork.VirtualStorageLibrary.VirtualPath, AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter, Boolean, Boolean, Boolean)
  name.vb: WalkPathTree(VirtualPath, VirtualNodeTypeFilter, Boolean, Boolean, Boolean)
references:
- uid: AkiraNetwork.VirtualStorageLibrary
  commentId: N:AkiraNetwork.VirtualStorageLibrary
  href: AkiraNetwork.html
  name: AkiraNetwork.VirtualStorageLibrary
  nameWithType: AkiraNetwork.VirtualStorageLibrary
  fullName: AkiraNetwork.VirtualStorageLibrary
  spec.csharp:
  - uid: AkiraNetwork
    name: AkiraNetwork
    href: AkiraNetwork.html
  - name: .
  - uid: AkiraNetwork.VirtualStorageLibrary
    name: VirtualStorageLibrary
    href: AkiraNetwork.VirtualStorageLibrary.html
  spec.vb:
  - uid: AkiraNetwork
    name: AkiraNetwork
    href: AkiraNetwork.html
  - name: .
  - uid: AkiraNetwork.VirtualStorageLibrary
    name: VirtualStorageLibrary
    href: AkiraNetwork.VirtualStorageLibrary.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.GenerateLinkTableDebugText``1
  commentId: M:AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.GenerateLinkTableDebugText``1(AkiraNetwork.VirtualStorageLibrary.VirtualStorage{``0})
  parent: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter
  definition: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.GenerateLinkTableDebugText``1(AkiraNetwork.VirtualStorageLibrary.VirtualStorage{``0})
  href: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.html#AkiraNetwork_VirtualStorageLibrary_Utilities_VirtualTextFormatter_GenerateLinkTableDebugText__1_AkiraNetwork_VirtualStorageLibrary_VirtualStorage___0__
  name: GenerateLinkTableDebugText<T>(VirtualStorage<T>)
  nameWithType: VirtualTextFormatter.GenerateLinkTableDebugText<T>(VirtualStorage<T>)
  fullName: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.GenerateLinkTableDebugText<T>(AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>)
  nameWithType.vb: VirtualTextFormatter.GenerateLinkTableDebugText(Of T)(VirtualStorage(Of T))
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.GenerateLinkTableDebugText(Of T)(AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T))
  name.vb: GenerateLinkTableDebugText(Of T)(VirtualStorage(Of T))
  spec.csharp:
  - uid: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.GenerateLinkTableDebugText``1(AkiraNetwork.VirtualStorageLibrary.VirtualStorage{`0})
    name: GenerateLinkTableDebugText
    href: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.html#AkiraNetwork_VirtualStorageLibrary_Utilities_VirtualTextFormatter_GenerateLinkTableDebugText__1_AkiraNetwork_VirtualStorageLibrary_VirtualStorage___0__
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
    name: VirtualStorage
    href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.GenerateLinkTableDebugText``1(AkiraNetwork.VirtualStorageLibrary.VirtualStorage{`0})
    name: GenerateLinkTableDebugText
    href: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.html#AkiraNetwork_VirtualStorageLibrary_Utilities_VirtualTextFormatter_GenerateLinkTableDebugText__1_AkiraNetwork_VirtualStorageLibrary_VirtualStorage___0__
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
    name: VirtualStorage
    href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.GenerateSingleTableDebugText``1
  commentId: M:AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.GenerateSingleTableDebugText``1(``0)
  parent: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter
  definition: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.GenerateSingleTableDebugText``1(``0)
  href: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.html#AkiraNetwork_VirtualStorageLibrary_Utilities_VirtualTextFormatter_GenerateSingleTableDebugText__1___0_
  name: GenerateSingleTableDebugText<VirtualStorage<T>>(VirtualStorage<T>)
  nameWithType: VirtualTextFormatter.GenerateSingleTableDebugText<VirtualStorage<T>>(VirtualStorage<T>)
  fullName: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.GenerateSingleTableDebugText<AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>>(AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>)
  nameWithType.vb: VirtualTextFormatter.GenerateSingleTableDebugText(Of VirtualStorage(Of T))(VirtualStorage(Of T))
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.GenerateSingleTableDebugText(Of AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T))(AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T))
  name.vb: GenerateSingleTableDebugText(Of VirtualStorage(Of T))(VirtualStorage(Of T))
  spec.csharp:
  - uid: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.GenerateSingleTableDebugText``1(AkiraNetwork.VirtualStorageLibrary.VirtualStorage{`0})
    name: GenerateSingleTableDebugText
    href: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.html#AkiraNetwork_VirtualStorageLibrary_Utilities_VirtualTextFormatter_GenerateSingleTableDebugText__1___0_
  - name: <
  - uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
    name: VirtualStorage
    href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  - name: (
  - uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
    name: VirtualStorage
    href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.GenerateSingleTableDebugText``1(AkiraNetwork.VirtualStorageLibrary.VirtualStorage{`0})
    name: GenerateSingleTableDebugText
    href: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.html#AkiraNetwork_VirtualStorageLibrary_Utilities_VirtualTextFormatter_GenerateSingleTableDebugText__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
    name: VirtualStorage
    href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
  - name: (
  - uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
    name: VirtualStorage
    href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.GenerateTreeDebugText``1(AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean,System.Boolean)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.GenerateTreeDebugText``1(AkiraNetwork.VirtualStorageLibrary.VirtualStorage{``0},AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean,System.Boolean)
  parent: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter
  definition: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.GenerateTreeDebugText``1(AkiraNetwork.VirtualStorageLibrary.VirtualStorage{``0},AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean,System.Boolean)
  href: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.html#AkiraNetwork_VirtualStorageLibrary_Utilities_VirtualTextFormatter_GenerateTreeDebugText__1_AkiraNetwork_VirtualStorageLibrary_VirtualStorage___0__AkiraNetwork_VirtualStorageLibrary_VirtualPath_System_Boolean_System_Boolean_
  name: GenerateTreeDebugText<T>(VirtualStorage<T>, VirtualPath, bool, bool)
  nameWithType: VirtualTextFormatter.GenerateTreeDebugText<T>(VirtualStorage<T>, VirtualPath, bool, bool)
  fullName: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.GenerateTreeDebugText<T>(AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>, AkiraNetwork.VirtualStorageLibrary.VirtualPath, bool, bool)
  nameWithType.vb: VirtualTextFormatter.GenerateTreeDebugText(Of T)(VirtualStorage(Of T), VirtualPath, Boolean, Boolean)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.GenerateTreeDebugText(Of T)(AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T), AkiraNetwork.VirtualStorageLibrary.VirtualPath, Boolean, Boolean)
  name.vb: GenerateTreeDebugText(Of T)(VirtualStorage(Of T), VirtualPath, Boolean, Boolean)
  spec.csharp:
  - uid: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.GenerateTreeDebugText``1(AkiraNetwork.VirtualStorageLibrary.VirtualStorage{`0},AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean,System.Boolean)
    name: GenerateTreeDebugText
    href: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.html#AkiraNetwork_VirtualStorageLibrary_Utilities_VirtualTextFormatter_GenerateTreeDebugText__1_AkiraNetwork_VirtualStorageLibrary_VirtualStorage___0__AkiraNetwork_VirtualStorageLibrary_VirtualPath_System_Boolean_System_Boolean_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
    name: VirtualStorage
    href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: AkiraNetwork.VirtualStorageLibrary.VirtualPath
    name: VirtualPath
    href: AkiraNetwork.VirtualStorageLibrary.VirtualPath.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.GenerateTreeDebugText``1(AkiraNetwork.VirtualStorageLibrary.VirtualStorage{`0},AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean,System.Boolean)
    name: GenerateTreeDebugText
    href: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.html#AkiraNetwork_VirtualStorageLibrary_Utilities_VirtualTextFormatter_GenerateTreeDebugText__1_AkiraNetwork_VirtualStorageLibrary_VirtualStorage___0__AkiraNetwork_VirtualStorageLibrary_VirtualPath_System_Boolean_System_Boolean_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
    name: VirtualStorage
    href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: AkiraNetwork.VirtualStorageLibrary.VirtualPath
    name: VirtualPath
    href: AkiraNetwork.VirtualStorageLibrary.VirtualPath.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.GenerateLinkTableDebugText``1(AkiraNetwork.VirtualStorageLibrary.VirtualStorage{``0})
  commentId: M:AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.GenerateLinkTableDebugText``1(AkiraNetwork.VirtualStorageLibrary.VirtualStorage{``0})
  href: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.html#AkiraNetwork_VirtualStorageLibrary_Utilities_VirtualTextFormatter_GenerateLinkTableDebugText__1_AkiraNetwork_VirtualStorageLibrary_VirtualStorage___0__
  name: GenerateLinkTableDebugText<T>(VirtualStorage<T>)
  nameWithType: VirtualTextFormatter.GenerateLinkTableDebugText<T>(VirtualStorage<T>)
  fullName: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.GenerateLinkTableDebugText<T>(AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>)
  nameWithType.vb: VirtualTextFormatter.GenerateLinkTableDebugText(Of T)(VirtualStorage(Of T))
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.GenerateLinkTableDebugText(Of T)(AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T))
  name.vb: GenerateLinkTableDebugText(Of T)(VirtualStorage(Of T))
  spec.csharp:
  - uid: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.GenerateLinkTableDebugText``1(AkiraNetwork.VirtualStorageLibrary.VirtualStorage{``0})
    name: GenerateLinkTableDebugText
    href: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.html#AkiraNetwork_VirtualStorageLibrary_Utilities_VirtualTextFormatter_GenerateLinkTableDebugText__1_AkiraNetwork_VirtualStorageLibrary_VirtualStorage___0__
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
    name: VirtualStorage
    href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.GenerateLinkTableDebugText``1(AkiraNetwork.VirtualStorageLibrary.VirtualStorage{``0})
    name: GenerateLinkTableDebugText
    href: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.html#AkiraNetwork_VirtualStorageLibrary_Utilities_VirtualTextFormatter_GenerateLinkTableDebugText__1_AkiraNetwork_VirtualStorageLibrary_VirtualStorage___0__
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
    name: VirtualStorage
    href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter
  commentId: T:AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter
  parent: AkiraNetwork.VirtualStorageLibrary.Utilities
  href: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.html
  name: VirtualTextFormatter
  nameWithType: VirtualTextFormatter
  fullName: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter
- uid: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.GenerateSingleTableDebugText``1(``0)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.GenerateSingleTableDebugText``1(``0)
  href: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.html#AkiraNetwork_VirtualStorageLibrary_Utilities_VirtualTextFormatter_GenerateSingleTableDebugText__1___0_
  name: GenerateSingleTableDebugText<T>(T)
  nameWithType: VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)
  fullName: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.GenerateSingleTableDebugText<T>(T)
  nameWithType.vb: VirtualTextFormatter.GenerateSingleTableDebugText(Of T)(T)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.GenerateSingleTableDebugText(Of T)(T)
  name.vb: GenerateSingleTableDebugText(Of T)(T)
  spec.csharp:
  - uid: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.GenerateSingleTableDebugText``1(``0)
    name: GenerateSingleTableDebugText
    href: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.html#AkiraNetwork_VirtualStorageLibrary_Utilities_VirtualTextFormatter_GenerateSingleTableDebugText__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.GenerateSingleTableDebugText``1(``0)
    name: GenerateSingleTableDebugText
    href: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.html#AkiraNetwork_VirtualStorageLibrary_Utilities_VirtualTextFormatter_GenerateSingleTableDebugText__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.GenerateTreeDebugText``1(AkiraNetwork.VirtualStorageLibrary.VirtualStorage{``0},AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean,System.Boolean)
  commentId: M:AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.GenerateTreeDebugText``1(AkiraNetwork.VirtualStorageLibrary.VirtualStorage{``0},AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean,System.Boolean)
  isExternal: true
  href: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.html#AkiraNetwork_VirtualStorageLibrary_Utilities_VirtualTextFormatter_GenerateTreeDebugText__1_AkiraNetwork_VirtualStorageLibrary_VirtualStorage___0__AkiraNetwork_VirtualStorageLibrary_VirtualPath_System_Boolean_System_Boolean_
  name: GenerateTreeDebugText<T>(VirtualStorage<T>, VirtualPath, bool, bool)
  nameWithType: VirtualTextFormatter.GenerateTreeDebugText<T>(VirtualStorage<T>, VirtualPath, bool, bool)
  fullName: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.GenerateTreeDebugText<T>(AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>, AkiraNetwork.VirtualStorageLibrary.VirtualPath, bool, bool)
  nameWithType.vb: VirtualTextFormatter.GenerateTreeDebugText(Of T)(VirtualStorage(Of T), VirtualPath, Boolean, Boolean)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.GenerateTreeDebugText(Of T)(AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T), AkiraNetwork.VirtualStorageLibrary.VirtualPath, Boolean, Boolean)
  name.vb: GenerateTreeDebugText(Of T)(VirtualStorage(Of T), VirtualPath, Boolean, Boolean)
  spec.csharp:
  - uid: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.GenerateTreeDebugText``1(AkiraNetwork.VirtualStorageLibrary.VirtualStorage{``0},AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean,System.Boolean)
    name: GenerateTreeDebugText
    href: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.html#AkiraNetwork_VirtualStorageLibrary_Utilities_VirtualTextFormatter_GenerateTreeDebugText__1_AkiraNetwork_VirtualStorageLibrary_VirtualStorage___0__AkiraNetwork_VirtualStorageLibrary_VirtualPath_System_Boolean_System_Boolean_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
    name: VirtualStorage
    href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: AkiraNetwork.VirtualStorageLibrary.VirtualPath
    name: VirtualPath
    href: AkiraNetwork.VirtualStorageLibrary.VirtualPath.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.GenerateTreeDebugText``1(AkiraNetwork.VirtualStorageLibrary.VirtualStorage{``0},AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Boolean,System.Boolean)
    name: GenerateTreeDebugText
    href: AkiraNetwork.VirtualStorageLibrary.Utilities.VirtualTextFormatter.html#AkiraNetwork_VirtualStorageLibrary_Utilities_VirtualTextFormatter_GenerateTreeDebugText__1_AkiraNetwork_VirtualStorageLibrary_VirtualStorage___0__AkiraNetwork_VirtualStorageLibrary_VirtualPath_System_Boolean_System_Boolean_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1
    name: VirtualStorage
    href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: AkiraNetwork.VirtualStorageLibrary.VirtualPath
    name: VirtualPath
    href: AkiraNetwork.VirtualStorageLibrary.VirtualPath.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: AkiraNetwork.VirtualStorageLibrary.Utilities
  commentId: N:AkiraNetwork.VirtualStorageLibrary.Utilities
  href: AkiraNetwork.html
  name: AkiraNetwork.VirtualStorageLibrary.Utilities
  nameWithType: AkiraNetwork.VirtualStorageLibrary.Utilities
  fullName: AkiraNetwork.VirtualStorageLibrary.Utilities
  spec.csharp:
  - uid: AkiraNetwork
    name: AkiraNetwork
    href: AkiraNetwork.html
  - name: .
  - uid: AkiraNetwork.VirtualStorageLibrary
    name: VirtualStorageLibrary
    href: AkiraNetwork.VirtualStorageLibrary.html
  - name: .
  - uid: AkiraNetwork.VirtualStorageLibrary.Utilities
    name: Utilities
    href: AkiraNetwork.VirtualStorageLibrary.Utilities.html
  spec.vb:
  - uid: AkiraNetwork
    name: AkiraNetwork
    href: AkiraNetwork.html
  - name: .
  - uid: AkiraNetwork.VirtualStorageLibrary
    name: VirtualStorageLibrary
    href: AkiraNetwork.VirtualStorageLibrary.html
  - name: .
  - uid: AkiraNetwork.VirtualStorageLibrary.Utilities
    name: Utilities
    href: AkiraNetwork.VirtualStorageLibrary.Utilities.html
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.Root*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.Root
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_Root
  name: Root
  nameWithType: VirtualStorage<T>.Root
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.Root
  nameWithType.vb: VirtualStorage(Of T).Root
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).Root
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualDirectory
  commentId: T:AkiraNetwork.VirtualStorageLibrary.VirtualDirectory
  parent: AkiraNetwork.VirtualStorageLibrary
  href: AkiraNetwork.VirtualStorageLibrary.VirtualDirectory.html
  name: VirtualDirectory
  nameWithType: VirtualDirectory
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualDirectory
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.CurrentPath*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.CurrentPath
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_CurrentPath
  name: CurrentPath
  nameWithType: VirtualStorage<T>.CurrentPath
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.CurrentPath
  nameWithType.vb: VirtualStorage(Of T).CurrentPath
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).CurrentPath
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualPath
  commentId: T:AkiraNetwork.VirtualStorageLibrary.VirtualPath
  parent: AkiraNetwork.VirtualStorageLibrary
  href: AkiraNetwork.VirtualStorageLibrary.VirtualPath.html
  name: VirtualPath
  nameWithType: VirtualPath
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualPath
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.CycleDetectorForTarget*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.CycleDetectorForTarget
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_CycleDetectorForTarget
  name: CycleDetectorForTarget
  nameWithType: VirtualStorage<T>.CycleDetectorForTarget
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.CycleDetectorForTarget
  nameWithType.vb: VirtualStorage(Of T).CycleDetectorForTarget
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).CycleDetectorForTarget
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualCycleDetector
  commentId: T:AkiraNetwork.VirtualStorageLibrary.VirtualCycleDetector
  parent: AkiraNetwork.VirtualStorageLibrary
  href: AkiraNetwork.VirtualStorageLibrary.VirtualCycleDetector.html
  name: VirtualCycleDetector
  nameWithType: VirtualCycleDetector
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualCycleDetector
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.CycleDetectorForTree*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.CycleDetectorForTree
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_CycleDetectorForTree
  name: CycleDetectorForTree
  nameWithType: VirtualStorage<T>.CycleDetectorForTree
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.CycleDetectorForTree
  nameWithType.vb: VirtualStorage(Of T).CycleDetectorForTree
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).CycleDetectorForTree
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.#ctor*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.#ctor
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1__ctor
  name: VirtualStorage
  nameWithType: VirtualStorage<T>.VirtualStorage
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.VirtualStorage
  nameWithType.vb: VirtualStorage(Of T).New
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).New
  name.vb: New
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualNodeNotFoundException
  commentId: T:AkiraNetwork.VirtualStorageLibrary.VirtualNodeNotFoundException
  href: AkiraNetwork.VirtualStorageLibrary.VirtualNodeNotFoundException.html
  name: VirtualNodeNotFoundException
  nameWithType: VirtualNodeNotFoundException
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualNodeNotFoundException
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.invalidoperationexception
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.CopyNode*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.CopyNode
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_CopyNode_AkiraNetwork_VirtualStorageLibrary_VirtualPath_AkiraNetwork_VirtualStorageLibrary_VirtualPath_System_Boolean_System_Boolean_System_Boolean_System_Collections_Generic_List_AkiraNetwork_VirtualStorageLibrary_VirtualNodeContext__
  name: CopyNode
  nameWithType: VirtualStorage<T>.CopyNode
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.CopyNode
  nameWithType.vb: VirtualStorage(Of T).CopyNode
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).CopyNode
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Collections.Generic.List{AkiraNetwork.VirtualStorageLibrary.VirtualNodeContext}
  commentId: T:System.Collections.Generic.List{AkiraNetwork.VirtualStorageLibrary.VirtualNodeContext}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<VirtualNodeContext>
  nameWithType: List<VirtualNodeContext>
  fullName: System.Collections.Generic.List<AkiraNetwork.VirtualStorageLibrary.VirtualNodeContext>
  nameWithType.vb: List(Of VirtualNodeContext)
  fullName.vb: System.Collections.Generic.List(Of AkiraNetwork.VirtualStorageLibrary.VirtualNodeContext)
  name.vb: List(Of VirtualNodeContext)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: AkiraNetwork.VirtualStorageLibrary.VirtualNodeContext
    name: VirtualNodeContext
    href: AkiraNetwork.VirtualStorageLibrary.VirtualNodeContext.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: AkiraNetwork.VirtualStorageLibrary.VirtualNodeContext
    name: VirtualNodeContext
    href: AkiraNetwork.VirtualStorageLibrary.VirtualNodeContext.html
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.Indexer*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.Indexer
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_Indexer_AkiraNetwork_VirtualStorageLibrary_VirtualPath_System_Boolean_
  name: this
  nameWithType: VirtualStorage<T>.this
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.this
  nameWithType.vb: VirtualStorage(Of T).this[]
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).this[]
  name.vb: this[]
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.LinkDictionary*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.LinkDictionary
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_LinkDictionary
  name: LinkDictionary
  nameWithType: VirtualStorage<T>.LinkDictionary
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.LinkDictionary
  nameWithType.vb: VirtualStorage(Of T).LinkDictionary
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).LinkDictionary
- uid: System.Collections.Generic.Dictionary{AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Collections.Generic.HashSet{AkiraNetwork.VirtualStorageLibrary.VirtualPath}}
  commentId: T:System.Collections.Generic.Dictionary{AkiraNetwork.VirtualStorageLibrary.VirtualPath,System.Collections.Generic.HashSet{AkiraNetwork.VirtualStorageLibrary.VirtualPath}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<VirtualPath, HashSet<VirtualPath>>
  nameWithType: Dictionary<VirtualPath, HashSet<VirtualPath>>
  fullName: System.Collections.Generic.Dictionary<AkiraNetwork.VirtualStorageLibrary.VirtualPath, System.Collections.Generic.HashSet<AkiraNetwork.VirtualStorageLibrary.VirtualPath>>
  nameWithType.vb: Dictionary(Of VirtualPath, HashSet(Of VirtualPath))
  fullName.vb: System.Collections.Generic.Dictionary(Of AkiraNetwork.VirtualStorageLibrary.VirtualPath, System.Collections.Generic.HashSet(Of AkiraNetwork.VirtualStorageLibrary.VirtualPath))
  name.vb: Dictionary(Of VirtualPath, HashSet(Of VirtualPath))
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: AkiraNetwork.VirtualStorageLibrary.VirtualPath
    name: VirtualPath
    href: AkiraNetwork.VirtualStorageLibrary.VirtualPath.html
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  - name: <
  - uid: AkiraNetwork.VirtualStorageLibrary.VirtualPath
    name: VirtualPath
    href: AkiraNetwork.VirtualStorageLibrary.VirtualPath.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: AkiraNetwork.VirtualStorageLibrary.VirtualPath
    name: VirtualPath
    href: AkiraNetwork.VirtualStorageLibrary.VirtualPath.html
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  - name: (
  - name: Of
  - name: " "
  - uid: AkiraNetwork.VirtualStorageLibrary.VirtualPath
    name: VirtualPath
    href: AkiraNetwork.VirtualStorageLibrary.VirtualPath.html
  - name: )
  - name: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentexception
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AddLinkToDictionary*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AddLinkToDictionary
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_AddLinkToDictionary_AkiraNetwork_VirtualStorageLibrary_VirtualPath_AkiraNetwork_VirtualStorageLibrary_VirtualPath_
  name: AddLinkToDictionary
  nameWithType: VirtualStorage<T>.AddLinkToDictionary
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.AddLinkToDictionary
  nameWithType.vb: VirtualStorage(Of T).AddLinkToDictionary
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).AddLinkToDictionary
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.UpdateTargetNodeTypesInDictionary*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.UpdateTargetNodeTypesInDictionary
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_UpdateTargetNodeTypesInDictionary_AkiraNetwork_VirtualStorageLibrary_VirtualPath_
  name: UpdateTargetNodeTypesInDictionary
  nameWithType: VirtualStorage<T>.UpdateTargetNodeTypesInDictionary
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.UpdateTargetNodeTypesInDictionary
  nameWithType.vb: VirtualStorage(Of T).UpdateTargetNodeTypesInDictionary
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).UpdateTargetNodeTypesInDictionary
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.UpdateAllTargetNodeTypesInDictionary*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.UpdateAllTargetNodeTypesInDictionary
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_UpdateAllTargetNodeTypesInDictionary
  name: UpdateAllTargetNodeTypesInDictionary
  nameWithType: VirtualStorage<T>.UpdateAllTargetNodeTypesInDictionary
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.UpdateAllTargetNodeTypesInDictionary
  nameWithType.vb: VirtualStorage(Of T).UpdateAllTargetNodeTypesInDictionary
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).UpdateAllTargetNodeTypesInDictionary
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.RemoveLinkFromDictionary*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.RemoveLinkFromDictionary
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_RemoveLinkFromDictionary_AkiraNetwork_VirtualStorageLibrary_VirtualPath_AkiraNetwork_VirtualStorageLibrary_VirtualPath_
  name: RemoveLinkFromDictionary
  nameWithType: VirtualStorage<T>.RemoveLinkFromDictionary
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.RemoveLinkFromDictionary
  nameWithType.vb: VirtualStorage(Of T).RemoveLinkFromDictionary
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).RemoveLinkFromDictionary
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetLinksFromDictionary*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetLinksFromDictionary
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_GetLinksFromDictionary_AkiraNetwork_VirtualStorageLibrary_VirtualPath_
  name: GetLinksFromDictionary
  nameWithType: VirtualStorage<T>.GetLinksFromDictionary
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.GetLinksFromDictionary
  nameWithType.vb: VirtualStorage(Of T).GetLinksFromDictionary
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).GetLinksFromDictionary
- uid: System.Collections.Generic.HashSet{AkiraNetwork.VirtualStorageLibrary.VirtualPath}
  commentId: T:System.Collections.Generic.HashSet{AkiraNetwork.VirtualStorageLibrary.VirtualPath}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.HashSet`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  name: HashSet<VirtualPath>
  nameWithType: HashSet<VirtualPath>
  fullName: System.Collections.Generic.HashSet<AkiraNetwork.VirtualStorageLibrary.VirtualPath>
  nameWithType.vb: HashSet(Of VirtualPath)
  fullName.vb: System.Collections.Generic.HashSet(Of AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  name.vb: HashSet(Of VirtualPath)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  - name: <
  - uid: AkiraNetwork.VirtualStorageLibrary.VirtualPath
    name: VirtualPath
    href: AkiraNetwork.VirtualStorageLibrary.VirtualPath.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  - name: (
  - name: Of
  - name: " "
  - uid: AkiraNetwork.VirtualStorageLibrary.VirtualPath
    name: VirtualPath
    href: AkiraNetwork.VirtualStorageLibrary.VirtualPath.html
  - name: )
- uid: System.Collections.Generic.HashSet`1
  commentId: T:System.Collections.Generic.HashSet`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  name: HashSet<T>
  nameWithType: HashSet<T>
  fullName: System.Collections.Generic.HashSet<T>
  nameWithType.vb: HashSet(Of T)
  fullName.vb: System.Collections.Generic.HashSet(Of T)
  name.vb: HashSet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.SetLinkTargetNodeType*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.SetLinkTargetNodeType
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_SetLinkTargetNodeType_System_Collections_Generic_HashSet_AkiraNetwork_VirtualStorageLibrary_VirtualPath__AkiraNetwork_VirtualStorageLibrary_VirtualNodeType_
  name: SetLinkTargetNodeType
  nameWithType: VirtualStorage<T>.SetLinkTargetNodeType
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.SetLinkTargetNodeType
  nameWithType.vb: VirtualStorage(Of T).SetLinkTargetNodeType
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).SetLinkTargetNodeType
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualNodeType
  commentId: T:AkiraNetwork.VirtualStorageLibrary.VirtualNodeType
  parent: AkiraNetwork.VirtualStorageLibrary
  href: AkiraNetwork.VirtualStorageLibrary.VirtualNodeType.html
  name: VirtualNodeType
  nameWithType: VirtualNodeType
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualNodeType
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.UpdateLinkInDictionary*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.UpdateLinkInDictionary
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_UpdateLinkInDictionary_AkiraNetwork_VirtualStorageLibrary_VirtualPath_AkiraNetwork_VirtualStorageLibrary_VirtualPath_
  name: UpdateLinkInDictionary
  nameWithType: VirtualStorage<T>.UpdateLinkInDictionary
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.UpdateLinkInDictionary
  nameWithType.vb: VirtualStorage(Of T).UpdateLinkInDictionary
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).UpdateLinkInDictionary
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.UpdateLinksToTarget*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.UpdateLinksToTarget
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_UpdateLinksToTarget_AkiraNetwork_VirtualStorageLibrary_VirtualPath_AkiraNetwork_VirtualStorageLibrary_VirtualPath_
  name: UpdateLinksToTarget
  nameWithType: VirtualStorage<T>.UpdateLinksToTarget
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.UpdateLinksToTarget
  nameWithType.vb: VirtualStorage(Of T).UpdateLinksToTarget
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).UpdateLinksToTarget
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.RemoveLinkByLinkPath*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.RemoveLinkByLinkPath
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_RemoveLinkByLinkPath_AkiraNetwork_VirtualStorageLibrary_VirtualPath_
  name: RemoveLinkByLinkPath
  nameWithType: VirtualStorage<T>.RemoveLinkByLinkPath
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.RemoveLinkByLinkPath
  nameWithType.vb: VirtualStorage(Of T).RemoveLinkByLinkPath
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).RemoveLinkByLinkPath
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.MoveNode*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.MoveNode
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_MoveNode_AkiraNetwork_VirtualStorageLibrary_VirtualPath_AkiraNetwork_VirtualStorageLibrary_VirtualPath_System_Boolean_System_Boolean_
  name: MoveNode
  nameWithType: VirtualStorage<T>.MoveNode
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.MoveNode
  nameWithType.vb: VirtualStorage(Of T).MoveNode
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).MoveNode
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.ChangeDirectory*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.ChangeDirectory
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_ChangeDirectory_AkiraNetwork_VirtualStorageLibrary_VirtualPath_
  name: ChangeDirectory
  nameWithType: VirtualStorage<T>.ChangeDirectory
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.ChangeDirectory
  nameWithType.vb: VirtualStorage(Of T).ChangeDirectory
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).ChangeDirectory
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualNode
  commentId: T:AkiraNetwork.VirtualStorageLibrary.VirtualNode
  parent: AkiraNetwork.VirtualStorageLibrary
  href: AkiraNetwork.VirtualStorageLibrary.VirtualNode.html
  name: VirtualNode
  nameWithType: VirtualNode
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualNode
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.SetNode*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.SetNode
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_SetNode_AkiraNetwork_VirtualStorageLibrary_VirtualPath_AkiraNetwork_VirtualStorageLibrary_VirtualNode_
  name: SetNode
  nameWithType: VirtualStorage<T>.SetNode
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.SetNode
  nameWithType.vb: VirtualStorage(Of T).SetNode
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).SetNode
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.UpdateItem*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.UpdateItem
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_UpdateItem_AkiraNetwork_VirtualStorageLibrary_VirtualPath_AkiraNetwork_VirtualStorageLibrary_VirtualItem__0__
  name: UpdateItem
  nameWithType: VirtualStorage<T>.UpdateItem
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.UpdateItem
  nameWithType.vb: VirtualStorage(Of T).UpdateItem
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).UpdateItem
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualItem{{T}}
  commentId: T:AkiraNetwork.VirtualStorageLibrary.VirtualItem{``0}
  parent: AkiraNetwork.VirtualStorageLibrary
  definition: AkiraNetwork.VirtualStorageLibrary.VirtualItem`1
  href: AkiraNetwork.VirtualStorageLibrary.VirtualItem-1.html
  name: VirtualItem<T>
  nameWithType: VirtualItem<T>
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualItem<T>
  nameWithType.vb: VirtualItem(Of T)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualItem(Of T)
  name.vb: VirtualItem(Of T)
  spec.csharp:
  - uid: AkiraNetwork.VirtualStorageLibrary.VirtualItem`1
    name: VirtualItem
    href: AkiraNetwork.VirtualStorageLibrary.VirtualItem-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: AkiraNetwork.VirtualStorageLibrary.VirtualItem`1
    name: VirtualItem
    href: AkiraNetwork.VirtualStorageLibrary.VirtualItem-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualItem`1
  commentId: T:AkiraNetwork.VirtualStorageLibrary.VirtualItem`1
  parent: AkiraNetwork.VirtualStorageLibrary
  href: AkiraNetwork.VirtualStorageLibrary.VirtualItem-1.html
  name: VirtualItem<T>
  nameWithType: VirtualItem<T>
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualItem<T>
  nameWithType.vb: VirtualItem(Of T)
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualItem(Of T)
  name.vb: VirtualItem(Of T)
  spec.csharp:
  - uid: AkiraNetwork.VirtualStorageLibrary.VirtualItem`1
    name: VirtualItem
    href: AkiraNetwork.VirtualStorageLibrary.VirtualItem-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: AkiraNetwork.VirtualStorageLibrary.VirtualItem`1
    name: VirtualItem
    href: AkiraNetwork.VirtualStorageLibrary.VirtualItem-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.UpdateDirectory*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.UpdateDirectory
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_UpdateDirectory_AkiraNetwork_VirtualStorageLibrary_VirtualPath_AkiraNetwork_VirtualStorageLibrary_VirtualDirectory_
  name: UpdateDirectory
  nameWithType: VirtualStorage<T>.UpdateDirectory
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.UpdateDirectory
  nameWithType.vb: VirtualStorage(Of T).UpdateDirectory
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).UpdateDirectory
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.UpdateSymbolicLInk*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.UpdateSymbolicLInk
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_UpdateSymbolicLInk_AkiraNetwork_VirtualStorageLibrary_VirtualPath_AkiraNetwork_VirtualStorageLibrary_VirtualSymbolicLink_
  name: UpdateSymbolicLInk
  nameWithType: VirtualStorage<T>.UpdateSymbolicLInk
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.UpdateSymbolicLInk
  nameWithType.vb: VirtualStorage(Of T).UpdateSymbolicLInk
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).UpdateSymbolicLInk
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualSymbolicLink
  commentId: T:AkiraNetwork.VirtualStorageLibrary.VirtualSymbolicLink
  parent: AkiraNetwork.VirtualStorageLibrary
  href: AkiraNetwork.VirtualStorageLibrary.VirtualSymbolicLink.html
  name: VirtualSymbolicLink
  nameWithType: VirtualSymbolicLink
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualSymbolicLink
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AddNode*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AddNode
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_AddNode_AkiraNetwork_VirtualStorageLibrary_VirtualPath_AkiraNetwork_VirtualStorageLibrary_VirtualNode_System_Boolean_
  name: AddNode
  nameWithType: VirtualStorage<T>.AddNode
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.AddNode
  nameWithType.vb: VirtualStorage(Of T).AddNode
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).AddNode
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AddDirectory*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AddDirectory
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_AddDirectory_AkiraNetwork_VirtualStorageLibrary_VirtualPath_AkiraNetwork_VirtualStorageLibrary_VirtualDirectory_System_Boolean_
  name: AddDirectory
  nameWithType: VirtualStorage<T>.AddDirectory
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.AddDirectory
  nameWithType.vb: VirtualStorage(Of T).AddDirectory
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).AddDirectory
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AddItem*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AddItem
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_AddItem_AkiraNetwork_VirtualStorageLibrary_VirtualPath_AkiraNetwork_VirtualStorageLibrary_VirtualItem__0__System_Boolean_
  name: AddItem
  nameWithType: VirtualStorage<T>.AddItem
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.AddItem
  nameWithType.vb: VirtualStorage(Of T).AddItem
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).AddItem
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AddSymbolicLink*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.AddSymbolicLink
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_AddSymbolicLink_AkiraNetwork_VirtualStorageLibrary_VirtualPath_AkiraNetwork_VirtualStorageLibrary_VirtualSymbolicLink_System_Boolean_
  name: AddSymbolicLink
  nameWithType: VirtualStorage<T>.AddSymbolicLink
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.AddSymbolicLink
  nameWithType.vb: VirtualStorage(Of T).AddSymbolicLink
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).AddSymbolicLink
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.SetNodeName*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.SetNodeName
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_SetNodeName_AkiraNetwork_VirtualStorageLibrary_VirtualPath_AkiraNetwork_VirtualStorageLibrary_VirtualNodeName_System_Boolean_
  name: SetNodeName
  nameWithType: VirtualStorage<T>.SetNodeName
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.SetNodeName
  nameWithType.vb: VirtualStorage(Of T).SetNodeName
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).SetNodeName
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualNodeName
  commentId: T:AkiraNetwork.VirtualStorageLibrary.VirtualNodeName
  parent: AkiraNetwork.VirtualStorageLibrary
  href: AkiraNetwork.VirtualStorageLibrary.VirtualNodeName.html
  name: VirtualNodeName
  nameWithType: VirtualNodeName
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualNodeName
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.ConvertToAbsolutePath*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.ConvertToAbsolutePath
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_ConvertToAbsolutePath_AkiraNetwork_VirtualStorageLibrary_VirtualPath_AkiraNetwork_VirtualStorageLibrary_VirtualPath_
  name: ConvertToAbsolutePath
  nameWithType: VirtualStorage<T>.ConvertToAbsolutePath
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.ConvertToAbsolutePath
  nameWithType.vb: VirtualStorage(Of T).ConvertToAbsolutePath
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).ConvertToAbsolutePath
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetNode*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetNode
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_GetNode_AkiraNetwork_VirtualStorageLibrary_VirtualPath_System_Boolean_
  name: GetNode
  nameWithType: VirtualStorage<T>.GetNode
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.GetNode
  nameWithType.vb: VirtualStorage(Of T).GetNode
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).GetNode
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.TryGetNode*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.TryGetNode
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_TryGetNode_AkiraNetwork_VirtualStorageLibrary_VirtualPath_System_Boolean_
  name: TryGetNode
  nameWithType: VirtualStorage<T>.TryGetNode
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.TryGetNode
  nameWithType.vb: VirtualStorage(Of T).TryGetNode
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).TryGetNode
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.ResolveLinkTarget*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.ResolveLinkTarget
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_ResolveLinkTarget_AkiraNetwork_VirtualStorageLibrary_VirtualPath_
  name: ResolveLinkTarget
  nameWithType: VirtualStorage<T>.ResolveLinkTarget
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.ResolveLinkTarget
  nameWithType.vb: VirtualStorage(Of T).ResolveLinkTarget
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).ResolveLinkTarget
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.TryResolveLinkTarget*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.TryResolveLinkTarget
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_TryResolveLinkTarget_AkiraNetwork_VirtualStorageLibrary_VirtualPath_
  name: TryResolveLinkTarget
  nameWithType: VirtualStorage<T>.TryResolveLinkTarget
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.TryResolveLinkTarget
  nameWithType.vb: VirtualStorage(Of T).TryResolveLinkTarget
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).TryResolveLinkTarget
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetDirectory*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetDirectory
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_GetDirectory_AkiraNetwork_VirtualStorageLibrary_VirtualPath_System_Boolean_
  name: GetDirectory
  nameWithType: VirtualStorage<T>.GetDirectory
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.GetDirectory
  nameWithType.vb: VirtualStorage(Of T).GetDirectory
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).GetDirectory
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.TryGetDirectory*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.TryGetDirectory
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_TryGetDirectory_AkiraNetwork_VirtualStorageLibrary_VirtualPath_System_Boolean_
  name: TryGetDirectory
  nameWithType: VirtualStorage<T>.TryGetDirectory
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.TryGetDirectory
  nameWithType.vb: VirtualStorage(Of T).TryGetDirectory
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).TryGetDirectory
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetItem*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetItem
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_GetItem_AkiraNetwork_VirtualStorageLibrary_VirtualPath_System_Boolean_
  name: GetItem
  nameWithType: VirtualStorage<T>.GetItem
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.GetItem
  nameWithType.vb: VirtualStorage(Of T).GetItem
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).GetItem
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.TryGetItem*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.TryGetItem
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_TryGetItem_AkiraNetwork_VirtualStorageLibrary_VirtualPath_System_Boolean_
  name: TryGetItem
  nameWithType: VirtualStorage<T>.TryGetItem
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.TryGetItem
  nameWithType.vb: VirtualStorage(Of T).TryGetItem
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).TryGetItem
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetSymbolicLink*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetSymbolicLink
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_GetSymbolicLink_AkiraNetwork_VirtualStorageLibrary_VirtualPath_
  name: GetSymbolicLink
  nameWithType: VirtualStorage<T>.GetSymbolicLink
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.GetSymbolicLink
  nameWithType.vb: VirtualStorage(Of T).GetSymbolicLink
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).GetSymbolicLink
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.TryGetSymbolicLink*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.TryGetSymbolicLink
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_TryGetSymbolicLink_AkiraNetwork_VirtualStorageLibrary_VirtualPath_
  name: TryGetSymbolicLink
  nameWithType: VirtualStorage<T>.TryGetSymbolicLink
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.TryGetSymbolicLink
  nameWithType.vb: VirtualStorage(Of T).TryGetSymbolicLink
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).TryGetSymbolicLink
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetNodeType*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetNodeType
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_GetNodeType_AkiraNetwork_VirtualStorageLibrary_VirtualPath_System_Boolean_
  name: GetNodeType
  nameWithType: VirtualStorage<T>.GetNodeType
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.GetNodeType
  nameWithType.vb: VirtualStorage(Of T).GetNodeType
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).GetNodeType
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetNodes*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetNodes
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_GetNodes_AkiraNetwork_VirtualStorageLibrary_VirtualPath_AkiraNetwork_VirtualStorageLibrary_VirtualNodeTypeFilter_System_Boolean_System_Boolean_
  name: GetNodes
  nameWithType: VirtualStorage<T>.GetNodes
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.GetNodes
  nameWithType.vb: VirtualStorage(Of T).GetNodes
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).GetNodes
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter
  commentId: T:AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter
  parent: AkiraNetwork.VirtualStorageLibrary
  href: AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter.html
  name: VirtualNodeTypeFilter
  nameWithType: VirtualNodeTypeFilter
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualNodeTypeFilter
- uid: System.Collections.Generic.IEnumerable{AkiraNetwork.VirtualStorageLibrary.VirtualNode}
  commentId: T:System.Collections.Generic.IEnumerable{AkiraNetwork.VirtualStorageLibrary.VirtualNode}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<VirtualNode>
  nameWithType: IEnumerable<VirtualNode>
  fullName: System.Collections.Generic.IEnumerable<AkiraNetwork.VirtualStorageLibrary.VirtualNode>
  nameWithType.vb: IEnumerable(Of VirtualNode)
  fullName.vb: System.Collections.Generic.IEnumerable(Of AkiraNetwork.VirtualStorageLibrary.VirtualNode)
  name.vb: IEnumerable(Of VirtualNode)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: AkiraNetwork.VirtualStorageLibrary.VirtualNode
    name: VirtualNode
    href: AkiraNetwork.VirtualStorageLibrary.VirtualNode.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: AkiraNetwork.VirtualStorageLibrary.VirtualNode
    name: VirtualNode
    href: AkiraNetwork.VirtualStorageLibrary.VirtualNode.html
  - name: )
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetNodesWithPaths*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.GetNodesWithPaths
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_GetNodesWithPaths_AkiraNetwork_VirtualStorageLibrary_VirtualPath_AkiraNetwork_VirtualStorageLibrary_VirtualNodeTypeFilter_System_Boolean_System_Boolean_
  name: GetNodesWithPaths
  nameWithType: VirtualStorage<T>.GetNodesWithPaths
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.GetNodesWithPaths
  nameWithType.vb: VirtualStorage(Of T).GetNodesWithPaths
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).GetNodesWithPaths
- uid: System.Collections.Generic.IEnumerable{AkiraNetwork.VirtualStorageLibrary.VirtualPath}
  commentId: T:System.Collections.Generic.IEnumerable{AkiraNetwork.VirtualStorageLibrary.VirtualPath}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<VirtualPath>
  nameWithType: IEnumerable<VirtualPath>
  fullName: System.Collections.Generic.IEnumerable<AkiraNetwork.VirtualStorageLibrary.VirtualPath>
  nameWithType.vb: IEnumerable(Of VirtualPath)
  fullName.vb: System.Collections.Generic.IEnumerable(Of AkiraNetwork.VirtualStorageLibrary.VirtualPath)
  name.vb: IEnumerable(Of VirtualPath)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: AkiraNetwork.VirtualStorageLibrary.VirtualPath
    name: VirtualPath
    href: AkiraNetwork.VirtualStorageLibrary.VirtualPath.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: AkiraNetwork.VirtualStorageLibrary.VirtualPath
    name: VirtualPath
    href: AkiraNetwork.VirtualStorageLibrary.VirtualPath.html
  - name: )
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.ExpandPath*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.ExpandPath
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_ExpandPath_AkiraNetwork_VirtualStorageLibrary_VirtualPath_AkiraNetwork_VirtualStorageLibrary_VirtualNodeTypeFilter_System_Boolean_System_Boolean_
  name: ExpandPath
  nameWithType: VirtualStorage<T>.ExpandPath
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.ExpandPath
  nameWithType.vb: VirtualStorage(Of T).ExpandPath
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).ExpandPath
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.NodeExists*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.NodeExists
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_NodeExists_AkiraNetwork_VirtualStorageLibrary_VirtualPath_System_Boolean_
  name: NodeExists
  nameWithType: VirtualStorage<T>.NodeExists
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.NodeExists
  nameWithType.vb: VirtualStorage(Of T).NodeExists
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).NodeExists
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.DirectoryExists*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.DirectoryExists
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_DirectoryExists_AkiraNetwork_VirtualStorageLibrary_VirtualPath_System_Boolean_
  name: DirectoryExists
  nameWithType: VirtualStorage<T>.DirectoryExists
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.DirectoryExists
  nameWithType.vb: VirtualStorage(Of T).DirectoryExists
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).DirectoryExists
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.ItemExists*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.ItemExists
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_ItemExists_AkiraNetwork_VirtualStorageLibrary_VirtualPath_System_Boolean_
  name: ItemExists
  nameWithType: VirtualStorage<T>.ItemExists
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.ItemExists
  nameWithType.vb: VirtualStorage(Of T).ItemExists
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).ItemExists
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.SymbolicLinkExists*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.SymbolicLinkExists
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_SymbolicLinkExists_AkiraNetwork_VirtualStorageLibrary_VirtualPath_
  name: SymbolicLinkExists
  nameWithType: VirtualStorage<T>.SymbolicLinkExists
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.SymbolicLinkExists
  nameWithType.vb: VirtualStorage(Of T).SymbolicLinkExists
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).SymbolicLinkExists
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.RemoveNode*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.RemoveNode
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_RemoveNode_AkiraNetwork_VirtualStorageLibrary_VirtualPath_System_Boolean_System_Boolean_System_Boolean_
  name: RemoveNode
  nameWithType: VirtualStorage<T>.RemoveNode
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.RemoveNode
  nameWithType.vb: VirtualStorage(Of T).RemoveNode
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).RemoveNode
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualNodeContext
  commentId: T:AkiraNetwork.VirtualStorageLibrary.VirtualNodeContext
  parent: AkiraNetwork.VirtualStorageLibrary
  href: AkiraNetwork.VirtualStorageLibrary.VirtualNodeContext.html
  name: VirtualNodeContext
  nameWithType: VirtualNodeContext
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualNodeContext
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.WalkPathToTarget*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.WalkPathToTarget
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_WalkPathToTarget_AkiraNetwork_VirtualStorageLibrary_VirtualPath_AkiraNetwork_VirtualStorageLibrary_NotifyNodeDelegate_AkiraNetwork_VirtualStorageLibrary_ActionNodeDelegate_System_Boolean_System_Boolean_
  name: WalkPathToTarget
  nameWithType: VirtualStorage<T>.WalkPathToTarget
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.WalkPathToTarget
  nameWithType.vb: VirtualStorage(Of T).WalkPathToTarget
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).WalkPathToTarget
- uid: AkiraNetwork.VirtualStorageLibrary.NotifyNodeDelegate
  commentId: T:AkiraNetwork.VirtualStorageLibrary.NotifyNodeDelegate
  parent: AkiraNetwork.VirtualStorageLibrary
  href: AkiraNetwork.VirtualStorageLibrary.NotifyNodeDelegate.html
  name: NotifyNodeDelegate
  nameWithType: NotifyNodeDelegate
  fullName: AkiraNetwork.VirtualStorageLibrary.NotifyNodeDelegate
- uid: AkiraNetwork.VirtualStorageLibrary.ActionNodeDelegate
  commentId: T:AkiraNetwork.VirtualStorageLibrary.ActionNodeDelegate
  parent: AkiraNetwork.VirtualStorageLibrary
  href: AkiraNetwork.VirtualStorageLibrary.ActionNodeDelegate.html
  name: ActionNodeDelegate
  nameWithType: ActionNodeDelegate
  fullName: AkiraNetwork.VirtualStorageLibrary.ActionNodeDelegate
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.ExpandPathTree*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.ExpandPathTree
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_ExpandPathTree_AkiraNetwork_VirtualStorageLibrary_VirtualPath_AkiraNetwork_VirtualStorageLibrary_VirtualNodeTypeFilter_System_Boolean_System_Boolean_
  name: ExpandPathTree
  nameWithType: VirtualStorage<T>.ExpandPathTree
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.ExpandPathTree
  nameWithType.vb: VirtualStorage(Of T).ExpandPathTree
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).ExpandPathTree
- uid: System.Collections.Generic.IEnumerable{AkiraNetwork.VirtualStorageLibrary.VirtualNodeContext}
  commentId: T:System.Collections.Generic.IEnumerable{AkiraNetwork.VirtualStorageLibrary.VirtualNodeContext}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<VirtualNodeContext>
  nameWithType: IEnumerable<VirtualNodeContext>
  fullName: System.Collections.Generic.IEnumerable<AkiraNetwork.VirtualStorageLibrary.VirtualNodeContext>
  nameWithType.vb: IEnumerable(Of VirtualNodeContext)
  fullName.vb: System.Collections.Generic.IEnumerable(Of AkiraNetwork.VirtualStorageLibrary.VirtualNodeContext)
  name.vb: IEnumerable(Of VirtualNodeContext)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: AkiraNetwork.VirtualStorageLibrary.VirtualNodeContext
    name: VirtualNodeContext
    href: AkiraNetwork.VirtualStorageLibrary.VirtualNodeContext.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: AkiraNetwork.VirtualStorageLibrary.VirtualNodeContext
    name: VirtualNodeContext
    href: AkiraNetwork.VirtualStorageLibrary.VirtualNodeContext.html
  - name: )
- uid: AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.WalkPathTree*
  commentId: Overload:AkiraNetwork.VirtualStorageLibrary.VirtualStorage`1.WalkPathTree
  href: AkiraNetwork.VirtualStorageLibrary.VirtualStorage-1.html#AkiraNetwork_VirtualStorageLibrary_VirtualStorage_1_WalkPathTree_AkiraNetwork_VirtualStorageLibrary_VirtualPath_AkiraNetwork_VirtualStorageLibrary_VirtualNodeTypeFilter_System_Boolean_System_Boolean_System_Boolean_
  name: WalkPathTree
  nameWithType: VirtualStorage<T>.WalkPathTree
  fullName: AkiraNetwork.VirtualStorageLibrary.VirtualStorage<T>.WalkPathTree
  nameWithType.vb: VirtualStorage(Of T).WalkPathTree
  fullName.vb: AkiraNetwork.VirtualStorageLibrary.VirtualStorage(Of T).WalkPathTree
